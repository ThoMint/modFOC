
Nucleo32-TMC4671.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f8  080032f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080032f8  080032f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f8  080032f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032fc  080032fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08003370  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003370  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb14  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af6  00000000  00000000  0002bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  0002d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a08  00000000  00000000  0002e190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ea0f  00000000  00000000  0002eb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000863d  00000000  00000000  0004d5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab78d  00000000  00000000  00055be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101371  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d88  00000000  00000000  001013ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032a8 	.word	0x080032a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080032a8 	.word	0x080032a8

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ce:	f000 fb19 	bl	8000804 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d2:	f000 f898 	bl	8000306 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001d6:	f000 f945 	bl	8000464 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80001da:	f000 f913 	bl	8000404 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80001de:	f000 f8d3 	bl	8000388 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	tmc4671_writeInt(0, 0x01, 0x00000000);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2101      	movs	r1, #1
 80001e6:	2000      	movs	r0, #0
 80001e8:	f002 ffdf 	bl	80031aa <tmc4671_writeInt>
	int32_t buff = tmc4671_readInt(0, 0x00);
 80001ec:	2100      	movs	r1, #0
 80001ee:	2000      	movs	r0, #0
 80001f0:	f002 ff92 	bl	8003118 <tmc4671_readInt>
 80001f4:	60f8      	str	r0, [r7, #12]
	// Motor type &  PWM configuration
	tmc4671_writeInt(0, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, 0x00000004);
 80001f6:	2204      	movs	r2, #4
 80001f8:	211b      	movs	r1, #27
 80001fa:	2000      	movs	r0, #0
 80001fc:	f002 ffd5 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_POLARITIES, 0x00000000);
 8000200:	2200      	movs	r2, #0
 8000202:	2117      	movs	r1, #23
 8000204:	2000      	movs	r0, #0
 8000206:	f002 ffd0 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_MAXCNT, 0x00000000);
 800020a:	2200      	movs	r2, #0
 800020c:	2118      	movs	r1, #24
 800020e:	2000      	movs	r0, #0
 8000210:	f002 ffcb 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_BBM_H_BBM_L, 0x00000000);
 8000214:	2200      	movs	r2, #0
 8000216:	2119      	movs	r1, #25
 8000218:	2000      	movs	r0, #0
 800021a:	f002 ffc6 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_SV_CHOP, 0x00000000);
 800021e:	2200      	movs	r2, #0
 8000220:	211a      	movs	r1, #26
 8000222:	2000      	movs	r0, #0
 8000224:	f002 ffc1 	bl	80031aa <tmc4671_writeInt>

	// ADC configuration
	tmc4671_writeInt(0, TMC4671_ADC_I_SELECT, 0x00000000);
 8000228:	2200      	movs	r2, #0
 800022a:	210a      	movs	r1, #10
 800022c:	2000      	movs	r0, #0
 800022e:	f002 ffbc 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_dsADC_MCFG_B_MCFG_A, 0x00000000);
 8000232:	2200      	movs	r2, #0
 8000234:	2104      	movs	r1, #4
 8000236:	2000      	movs	r0, #0
 8000238:	f002 ffb7 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_dsADC_MCLK_A, 0x00000000);
 800023c:	2200      	movs	r2, #0
 800023e:	2105      	movs	r1, #5
 8000240:	2000      	movs	r0, #0
 8000242:	f002 ffb2 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_dsADC_MCLK_B, 0x00000000);
 8000246:	2200      	movs	r2, #0
 8000248:	2106      	movs	r1, #6
 800024a:	2000      	movs	r0, #0
 800024c:	f002 ffad 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_dsADC_MDEC_B_MDEC_A, 0x00000000);
 8000250:	2200      	movs	r2, #0
 8000252:	2107      	movs	r1, #7
 8000254:	2000      	movs	r0, #0
 8000256:	f002 ffa8 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_ADC_I0_SCALE_OFFSET, 0x00000000);
 800025a:	2200      	movs	r2, #0
 800025c:	2109      	movs	r1, #9
 800025e:	2000      	movs	r0, #0
 8000260:	f002 ffa3 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_ADC_I1_SCALE_OFFSET, 0x00000000);
 8000264:	2200      	movs	r2, #0
 8000266:	2108      	movs	r1, #8
 8000268:	2000      	movs	r0, #0
 800026a:	f002 ff9e 	bl	80031aa <tmc4671_writeInt>

	// Open loop settings
	tmc4671_writeInt(0, TMC4671_OPENLOOP_MODE, 0x00000000);
 800026e:	2200      	movs	r2, #0
 8000270:	211f      	movs	r1, #31
 8000272:	2000      	movs	r0, #0
 8000274:	f002 ff99 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_OPENLOOP_ACCELERATION, 0x00000000);
 8000278:	2200      	movs	r2, #0
 800027a:	2120      	movs	r1, #32
 800027c:	2000      	movs	r0, #0
 800027e:	f002 ff94 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, 0x00000000);
 8000282:	2200      	movs	r2, #0
 8000284:	2121      	movs	r1, #33	; 0x21
 8000286:	2000      	movs	r0, #0
 8000288:	f002 ff8f 	bl	80031aa <tmc4671_writeInt>

	// Feedback selection
	tmc4671_writeInt(0, TMC4671_PHI_E_SELECTION, 0x00000002);
 800028c:	2202      	movs	r2, #2
 800028e:	2152      	movs	r1, #82	; 0x52
 8000290:	2000      	movs	r0, #0
 8000292:	f002 ff8a 	bl	80031aa <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT, 0x00000001);
 8000296:	2201      	movs	r2, #1
 8000298:	2124      	movs	r1, #36	; 0x24
 800029a:	2000      	movs	r0, #0
 800029c:	f002 ff85 	bl	80031aa <tmc4671_writeInt>

	// ===== Open loop test drive =====

	// Switch to open loop velocity mode
	tmc4671_writeInt(0, TMC4671_MODE_RAMP_MODE_MOTION, 0x00000008);
 80002a0:	2208      	movs	r2, #8
 80002a2:	2163      	movs	r1, #99	; 0x63
 80002a4:	2000      	movs	r0, #0
 80002a6:	f002 ff80 	bl	80031aa <tmc4671_writeInt>

	// Rotate right
	tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, 0x0000003C);
 80002aa:	223c      	movs	r2, #60	; 0x3c
 80002ac:	2121      	movs	r1, #33	; 0x21
 80002ae:	2000      	movs	r0, #0
 80002b0:	f002 ff7b 	bl	80031aa <tmc4671_writeInt>
	wait(2000);
 80002b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002b8:	f002 ffde 	bl	8003278 <wait>

	// Rotate left
	tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, 0xFFFFFFC4);
 80002bc:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 80002c0:	2121      	movs	r1, #33	; 0x21
 80002c2:	2000      	movs	r0, #0
 80002c4:	f002 ff71 	bl	80031aa <tmc4671_writeInt>
	wait(4000);
 80002c8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80002cc:	f002 ffd4 	bl	8003278 <wait>

	// Stop
	tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, 0x00000000);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2121      	movs	r1, #33	; 0x21
 80002d4:	2000      	movs	r0, #0
 80002d6:	f002 ff68 	bl	80031aa <tmc4671_writeInt>
	wait(2000);
 80002da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002de:	f002 ffcb 	bl	8003278 <wait>
	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT, 0x00000000);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2124      	movs	r1, #36	; 0x24
 80002e6:	2000      	movs	r0, #0
 80002e8:	f002 ff5f 	bl	80031aa <tmc4671_writeInt>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		tmc4671_writeInt(0, 0x01, 0x00000000);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	2000      	movs	r0, #0
 80002f2:	f002 ff5a 	bl	80031aa <tmc4671_writeInt>
		int32_t buff = tmc4671_readInt(0, 0x00);
 80002f6:	2100      	movs	r1, #0
 80002f8:	2000      	movs	r0, #0
 80002fa:	f002 ff0d 	bl	8003118 <tmc4671_readInt>
 80002fe:	60b8      	str	r0, [r7, #8]
		int32_t buff1 = buff;
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	607b      	str	r3, [r7, #4]
	{
 8000304:	e7f2      	b.n	80002ec <main+0x124>

08000306 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	b090      	sub	sp, #64	; 0x40
 800030a:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800030c:	f107 0318 	add.w	r3, r7, #24
 8000310:	2228      	movs	r2, #40	; 0x28
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f002 ffa7 	bl	8003268 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000328:	2302      	movs	r3, #2
 800032a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2310      	movs	r3, #16
 8000332:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000334:	2302      	movs	r3, #2
 8000336:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000338:	2300      	movs	r3, #0
 800033a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800033c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000340:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fd9c 	bl	8000e84 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8000352:	f000 f917 	bl	8000584 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000356:	230f      	movs	r3, #15
 8000358:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035a:	2302      	movs	r3, #2
 800035c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000366:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2102      	movs	r1, #2
 8000370:	4618      	mov	r0, r3
 8000372:	f001 fc8f 	bl	8001c94 <HAL_RCC_ClockConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x7a>
	{
		Error_Handler();
 800037c:	f000 f902 	bl	8000584 <Error_Handler>
	}
}
 8000380:	bf00      	nop
 8000382:	3740      	adds	r7, #64	; 0x40
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <MX_SPI1_Init+0x74>)
 800038e:	4a1c      	ldr	r2, [pc, #112]	; (8000400 <MX_SPI1_Init+0x78>)
 8000390:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_SPI1_Init+0x74>)
 8000394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000398:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <MX_SPI1_Init+0x74>)
 80003a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003a6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_SPI1_Init+0x74>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_SPI1_Init+0x74>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_SPI1_Init+0x74>)
 80003b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ba:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_SPI1_Init+0x74>)
 80003be:	2228      	movs	r2, #40	; 0x28
 80003c0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_SPI1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_SPI1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_SPI1_Init+0x74>)
 80003d6:	2207      	movs	r2, #7
 80003d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_SPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_SPI1_Init+0x74>)
 80003e8:	f001 fe8a 	bl	8002100 <HAL_SPI_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 80003f2:	f000 f8c7 	bl	8000584 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000008c 	.word	0x2000008c
 8000400:	40013000 	.word	0x40013000

08000404 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_USART2_UART_Init+0x58>)
 800040a:	4a15      	ldr	r2, [pc, #84]	; (8000460 <MX_USART2_UART_Init+0x5c>)
 800040c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000410:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000414:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_USART2_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART2_UART_Init+0x58>)
 800042a:	220c      	movs	r2, #12
 800042c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART2_UART_Init+0x58>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000448:	f002 fb34 	bl	8002ab4 <HAL_UART_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000452:	f000 f897 	bl	8000584 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200000f0 	.word	0x200000f0
 8000460:	40004400 	.word	0x40004400

08000464 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <MX_GPIO_Init+0xc0>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a29      	ldr	r2, [pc, #164]	; (8000524 <MX_GPIO_Init+0xc0>)
 8000480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b27      	ldr	r3, [pc, #156]	; (8000524 <MX_GPIO_Init+0xc0>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <MX_GPIO_Init+0xc0>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a23      	ldr	r2, [pc, #140]	; (8000524 <MX_GPIO_Init+0xc0>)
 8000498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b21      	ldr	r3, [pc, #132]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	4812      	ldr	r0, [pc, #72]	; (8000528 <MX_GPIO_Init+0xc4>)
 80004e0:	f000 fcb8 	bl	8000e54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80004e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <MX_GPIO_Init+0xc8>)
 80004ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <MX_GPIO_Init+0xcc>)
 80004fa:	f000 fb39 	bl	8000b70 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_Pin */
	GPIO_InitStruct.Pin = CS_Pin;
 80004fe:	2340      	movs	r3, #64	; 0x40
 8000500:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	4619      	mov	r1, r3
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_GPIO_Init+0xc4>)
 8000516:	f000 fb2b 	bl	8000b70 <HAL_GPIO_Init>

}
 800051a:	bf00      	nop
 800051c:	3728      	adds	r7, #40	; 0x28
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	48000400 	.word	0x48000400
 800052c:	10210000 	.word	0x10210000
 8000530:	48000800 	.word	0x48000800

08000534 <tmc4671_readwriteByte>:

/* USER CODE BEGIN 4 */
uint8_t tmc4671_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af02      	add	r7, sp, #8
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
 800053e:	460b      	mov	r3, r1
 8000540:	71bb      	strb	r3, [r7, #6]
 8000542:	4613      	mov	r3, r2
 8000544:	717b      	strb	r3, [r7, #5]
	uint8_t buffer;

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	480c      	ldr	r0, [pc, #48]	; (800057c <tmc4671_readwriteByte+0x48>)
 800054c:	f000 fc82 	bl	8000e54 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, &data, &buffer, 1, 100);
 8000550:	f107 020f 	add.w	r2, r7, #15
 8000554:	1db9      	adds	r1, r7, #6
 8000556:	2364      	movs	r3, #100	; 0x64
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <tmc4671_readwriteByte+0x4c>)
 800055e:	f001 fe59 	bl	8002214 <HAL_SPI_TransmitReceive>

	if (lastTransfer)
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d004      	beq.n	8000572 <tmc4671_readwriteByte+0x3e>
	{
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <tmc4671_readwriteByte+0x48>)
 800056e:	f000 fc71 	bl	8000e54 <HAL_GPIO_WritePin>
	}

	return buffer;
 8000572:	7bfb      	ldrb	r3, [r7, #15]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	48000400 	.word	0x48000400
 8000580:	2000008c 	.word	0x2000008c

08000584 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <HAL_MspInit+0x44>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_MspInit+0x44>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_MspInit+0x44>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <HAL_MspInit+0x44>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <HAL_MspInit+0x44>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_MspInit+0x44>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005ca:	2007      	movs	r0, #7
 80005cc:	f000 fa50 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <HAL_SPI_MspInit+0x8c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d130      	bne.n	8000660 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <HAL_SPI_MspInit+0x90>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a1a      	ldr	r2, [pc, #104]	; (800066c <HAL_SPI_MspInit+0x90>)
 8000604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <HAL_SPI_MspInit+0x90>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_SPI_MspInit+0x90>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <HAL_SPI_MspInit+0x90>)
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_SPI_MspInit+0x90>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800062e:	23e0      	movs	r3, #224	; 0xe0
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800063e:	2305      	movs	r3, #5
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064c:	f000 fa90 	bl	8000b70 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2023      	movs	r0, #35	; 0x23
 8000656:	f000 fa16 	bl	8000a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800065a:	2023      	movs	r0, #35	; 0x23
 800065c:	f000 fa2f 	bl	8000abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40013000 	.word	0x40013000
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_UART_MspInit+0x7c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d128      	bne.n	80006e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_UART_MspInit+0x80>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <HAL_UART_MspInit+0x80>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_UART_MspInit+0x80>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_UART_MspInit+0x80>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <HAL_UART_MspInit+0x80>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_UART_MspInit+0x80>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006c2:	230c      	movs	r3, #12
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006d2:	2307      	movs	r3, #7
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f000 fa46 	bl	8000b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40004400 	.word	0x40004400
 80006f0:	40021000 	.word	0x40021000

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f8a2 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <SPI1_IRQHandler+0x10>)
 8000756:	f001 ff71 	bl	800263c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000008c 	.word	0x2000008c

08000764 <_wait>:
	/* Pretend like we always fail */
	return -1;
}

int _wait(int *status)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 800076c:	f002 fd52 	bl	8003214 <__errno>
 8000770:	4602      	mov	r2, r0
 8000772:	230a      	movs	r3, #10
 8000774:	6013      	str	r3, [r2, #0]
	return -1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <SystemInit+0x28>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <SystemInit+0x28>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SystemInit+0x28>)
 800079a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079e:	609a      	str	r2, [r3, #8]
#endif
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007b6:	e003      	b.n	80007c0 <LoopCopyDataInit>

080007b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007be:	3104      	adds	r1, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007c8:	d3f6      	bcc.n	80007b8 <CopyDataInit>
	ldr	r2, =_sbss
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007cc:	e002      	b.n	80007d4 <LoopFillZerobss>

080007ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007d0:	f842 3b04 	str.w	r3, [r2], #4

080007d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <LoopForever+0x16>)
	cmp	r2, r3
 80007d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007d8:	d3f9      	bcc.n	80007ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007da:	f7ff ffd3 	bl	8000784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007de:	f002 fd1f 	bl	8003220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007e2:	f7ff fcf1 	bl	80001c8 <main>

080007e6 <LoopForever>:

LoopForever:
    b LoopForever
 80007e6:	e7fe      	b.n	80007e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80007ec:	08003300 	.word	0x08003300
	ldr	r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007f4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80007f8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80007fc:	20000178 	.word	0x20000178

08000800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC1_2_IRQHandler>
	...

08000804 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_Init+0x28>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_Init+0x28>)
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f92b 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f808 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff feb8 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x54>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_InitTick+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f943 	bl	8000ada <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d80a      	bhi.n	800087a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f000 f90b 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <HAL_InitTick+0x5c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x20>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x24>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_IncTick+0x24>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000170 	.word	0x20000170

080008b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <HAL_GetTick+0x14>)
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000170 	.word	0x20000170

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff8e 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff29 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff3e 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff8e 	bl	80009c4 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5d 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff31 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa2 	bl	8000a2c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d005      	beq.n	8000b14 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
 8000b12:	e027      	b.n	8000b64 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 020e 	bic.w	r2, r2, #14
 8000b22:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f022 0201 	bic.w	r2, r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b42:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	4798      	blx	r3
    } 
  }
  return status;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	e14e      	b.n	8000e1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8140 	beq.w	8000e18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d00b      	beq.n	8000bb8 <HAL_GPIO_Init+0x48>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d007      	beq.n	8000bb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bac:	2b11      	cmp	r3, #17
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b12      	cmp	r3, #18
 8000bb6:	d130      	bne.n	8000c1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bee:	2201      	movs	r2, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	091b      	lsrs	r3, r3, #4
 8000c04:	f003 0201 	and.w	r2, r3, #1
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0xea>
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d123      	bne.n	8000ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	6939      	ldr	r1, [r7, #16]
 8000c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0203 	and.w	r2, r3, #3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 809a 	beq.w	8000e18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce4:	4b55      	ldr	r3, [pc, #340]	; (8000e3c <HAL_GPIO_Init+0x2cc>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a54      	ldr	r2, [pc, #336]	; (8000e3c <HAL_GPIO_Init+0x2cc>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b52      	ldr	r3, [pc, #328]	; (8000e3c <HAL_GPIO_Init+0x2cc>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cfc:	4a50      	ldr	r2, [pc, #320]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	3302      	adds	r3, #2
 8000d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d26:	d013      	beq.n	8000d50 <HAL_GPIO_Init+0x1e0>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <HAL_GPIO_Init+0x2d4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d00d      	beq.n	8000d4c <HAL_GPIO_Init+0x1dc>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <HAL_GPIO_Init+0x2d8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d007      	beq.n	8000d48 <HAL_GPIO_Init+0x1d8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <HAL_GPIO_Init+0x2dc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d101      	bne.n	8000d44 <HAL_GPIO_Init+0x1d4>
 8000d40:	2303      	movs	r3, #3
 8000d42:	e006      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d44:	2305      	movs	r3, #5
 8000d46:	e004      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d50:	2300      	movs	r3, #0
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d62:	4937      	ldr	r1, [pc, #220]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d70:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d94:	4a2e      	ldr	r2, [pc, #184]	; (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f47f aea9 	bne.w	8000b80 <HAL_GPIO_Init+0x10>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48000800 	.word	0x48000800
 8000e4c:	48000c00 	.word	0x48000c00
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f000 bef4 	b.w	8001c86 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 816a 	beq.w	8001182 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eae:	4bb3      	ldr	r3, [pc, #716]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d00c      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eba:	4bb0      	ldr	r3, [pc, #704]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d159      	bne.n	8000f7a <HAL_RCC_OscConfig+0xf6>
 8000ec6:	4bad      	ldr	r3, [pc, #692]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed2:	d152      	bne.n	8000f7a <HAL_RCC_OscConfig+0xf6>
 8000ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000edc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ee0:	fa93 f3a3 	rbit	r3, r3
 8000ee4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ee8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eec:	fab3 f383 	clz	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d102      	bne.n	8000f06 <HAL_RCC_OscConfig+0x82>
 8000f00:	4b9e      	ldr	r3, [pc, #632]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	e015      	b.n	8000f32 <HAL_RCC_OscConfig+0xae>
 8000f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f22:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f2e:	4b93      	ldr	r3, [pc, #588]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f36:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f3a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f3e:	fa92 f2a2 	rbit	r2, r2
 8000f42:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f46:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f4a:	fab2 f282 	clz	r2, r2
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	f042 0220 	orr.w	r2, r2, #32
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	f002 021f 	and.w	r2, r2, #31
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 810c 	beq.w	8001180 <HAL_RCC_OscConfig+0x2fc>
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 8106 	bne.w	8001180 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f000 be86 	b.w	8001c86 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d106      	bne.n	8000f94 <HAL_RCC_OscConfig+0x110>
 8000f86:	4b7d      	ldr	r3, [pc, #500]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a7c      	ldr	r2, [pc, #496]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e030      	b.n	8000ff6 <HAL_RCC_OscConfig+0x172>
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x134>
 8000f9e:	4b77      	ldr	r3, [pc, #476]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a76      	ldr	r2, [pc, #472]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b74      	ldr	r3, [pc, #464]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a73      	ldr	r2, [pc, #460]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e01e      	b.n	8000ff6 <HAL_RCC_OscConfig+0x172>
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc2:	d10c      	bne.n	8000fde <HAL_RCC_OscConfig+0x15a>
 8000fc4:	4b6d      	ldr	r3, [pc, #436]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a6c      	ldr	r2, [pc, #432]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a69      	ldr	r2, [pc, #420]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e00b      	b.n	8000ff6 <HAL_RCC_OscConfig+0x172>
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a66      	ldr	r2, [pc, #408]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b64      	ldr	r3, [pc, #400]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a63      	ldr	r2, [pc, #396]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff6:	4b61      	ldr	r3, [pc, #388]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	f023 020f 	bic.w	r2, r3, #15
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	495d      	ldr	r1, [pc, #372]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8001006:	4313      	orrs	r3, r2
 8001008:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d059      	beq.n	80010c8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fc50 	bl	80008b8 <HAL_GetTick>
 8001018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101e:	f7ff fc4b 	bl	80008b8 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d902      	bls.n	8001034 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	f000 be29 	b.w	8001c86 <HAL_RCC_OscConfig+0xe02>
 8001034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001038:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001048:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d102      	bne.n	8001066 <HAL_RCC_OscConfig+0x1e2>
 8001060:	4b46      	ldr	r3, [pc, #280]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	e015      	b.n	8001092 <HAL_RCC_OscConfig+0x20e>
 8001066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800107a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001082:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001096:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800109a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800109e:	fa92 f2a2 	rbit	r2, r2
 80010a2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010a6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010aa:	fab2 f282 	clz	r2, r2
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	f002 021f 	and.w	r2, r2, #31
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0ab      	beq.n	800101e <HAL_RCC_OscConfig+0x19a>
 80010c6:	e05c      	b.n	8001182 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fbf6 	bl	80008b8 <HAL_GetTick>
 80010cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d0:	e00a      	b.n	80010e8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d2:	f7ff fbf1 	bl	80008b8 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d902      	bls.n	80010e8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	f000 bdcf 	b.w	8001c86 <HAL_RCC_OscConfig+0xe02>
 80010e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001100:	fab3 f383 	clz	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d102      	bne.n	800111a <HAL_RCC_OscConfig+0x296>
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	e015      	b.n	8001146 <HAL_RCC_OscConfig+0x2c2>
 800111a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001126:	fa93 f3a3 	rbit	r3, r3
 800112a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800112e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001132:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001136:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_RCC_OscConfig+0x2f8>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800114a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800114e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001152:	fa92 f2a2 	rbit	r2, r2
 8001156:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800115a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800115e:	fab2 f282 	clz	r2, r2
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	f042 0220 	orr.w	r2, r2, #32
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	f002 021f 	and.w	r2, r2, #31
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ab      	bne.n	80010d2 <HAL_RCC_OscConfig+0x24e>
 800117a:	e002      	b.n	8001182 <HAL_RCC_OscConfig+0x2fe>
 800117c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 816f 	beq.w	8001470 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001192:	4bd0      	ldr	r3, [pc, #832]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800119e:	4bcd      	ldr	r3, [pc, #820]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d16c      	bne.n	8001284 <HAL_RCC_OscConfig+0x400>
 80011aa:	4bca      	ldr	r3, [pc, #808]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d166      	bne.n	8001284 <HAL_RCC_OscConfig+0x400>
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d102      	bne.n	80011e6 <HAL_RCC_OscConfig+0x362>
 80011e0:	4bbc      	ldr	r3, [pc, #752]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	e013      	b.n	800120e <HAL_RCC_OscConfig+0x38a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800120a:	4bb2      	ldr	r3, [pc, #712]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	2202      	movs	r2, #2
 8001210:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001214:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001218:	fa92 f2a2 	rbit	r2, r2
 800121c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001220:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001224:	fab2 f282 	clz	r2, r2
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f042 0220 	orr.w	r2, r2, #32
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	f002 021f 	and.w	r2, r2, #31
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_RCC_OscConfig+0x3cc>
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d002      	beq.n	8001250 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	f000 bd1b 	b.w	8001c86 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4ba0      	ldr	r3, [pc, #640]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	21f8      	movs	r1, #248	; 0xf8
 8001260:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001268:	fa91 f1a1 	rbit	r1, r1
 800126c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001270:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001274:	fab1 f181 	clz	r1, r1
 8001278:	b2c9      	uxtb	r1, r1
 800127a:	408b      	lsls	r3, r1
 800127c:	4995      	ldr	r1, [pc, #596]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	e0f5      	b.n	8001470 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8085 	beq.w	800139a <HAL_RCC_OscConfig+0x516>
 8001290:	2301      	movs	r3, #1
 8001292:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	461a      	mov	r2, r3
 80012b8:	2301      	movs	r3, #1
 80012ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fafc 	bl	80008b8 <HAL_GetTick>
 80012c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff faf7 	bl	80008b8 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d902      	bls.n	80012dc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f000 bcd5 	b.w	8001c86 <HAL_RCC_OscConfig+0xe02>
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	095b      	lsrs	r3, r3, #5
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <HAL_RCC_OscConfig+0x488>
 8001306:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	e013      	b.n	8001334 <HAL_RCC_OscConfig+0x4b0>
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001324:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001330:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	2202      	movs	r2, #2
 8001336:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800133a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800133e:	fa92 f2a2 	rbit	r2, r2
 8001342:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001346:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800134a:	fab2 f282 	clz	r2, r2
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	f042 0220 	orr.w	r2, r2, #32
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	f002 021f 	and.w	r2, r2, #31
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0af      	beq.n	80012c6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	21f8      	movs	r1, #248	; 0xf8
 8001376:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800137e:	fa91 f1a1 	rbit	r1, r1
 8001382:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001386:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800138a:	fab1 f181 	clz	r1, r1
 800138e:	b2c9      	uxtb	r1, r1
 8001390:	408b      	lsls	r3, r1
 8001392:	4950      	ldr	r1, [pc, #320]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e06a      	b.n	8001470 <HAL_RCC_OscConfig+0x5ec>
 800139a:	2301      	movs	r3, #1
 800139c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	461a      	mov	r2, r3
 80013c2:	2300      	movs	r3, #0
 80013c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fa77 	bl	80008b8 <HAL_GetTick>
 80013ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fa72 	bl	80008b8 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d902      	bls.n	80013e6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	f000 bc50 	b.w	8001c86 <HAL_RCC_OscConfig+0xe02>
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d102      	bne.n	8001416 <HAL_RCC_OscConfig+0x592>
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	e013      	b.n	800143e <HAL_RCC_OscConfig+0x5ba>
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800142e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_RCC_OscConfig+0x650>)
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	2202      	movs	r2, #2
 8001440:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001444:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001448:	fa92 f2a2 	rbit	r2, r2
 800144c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001450:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001454:	fab2 f282 	clz	r2, r2
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	f042 0220 	orr.w	r2, r2, #32
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f002 021f 	and.w	r2, r2, #31
 8001464:	2101      	movs	r1, #1
 8001466:	fa01 f202 	lsl.w	r2, r1, r2
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1af      	bne.n	80013d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80da 	beq.w	8001634 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d069      	beq.n	800155e <HAL_RCC_OscConfig+0x6da>
 800148a:	2301      	movs	r3, #1
 800148c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800149c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x654>)
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	461a      	mov	r2, r3
 80014b0:	2301      	movs	r3, #1
 80014b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fa00 	bl	80008b8 <HAL_GetTick>
 80014b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014bc:	e00e      	b.n	80014dc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014be:	f7ff f9fb 	bl	80008b8 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d906      	bls.n	80014dc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e3d9      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	10908120 	.word	0x10908120
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800150a:	2202      	movs	r2, #2
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800151c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	4ba5      	ldr	r3, [pc, #660]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001526:	2102      	movs	r1, #2
 8001528:	6019      	str	r1, [r3, #0]
 800152a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f1a3 	rbit	r1, r3
 8001534:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001538:	6019      	str	r1, [r3, #0]
  return result;
 800153a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	2101      	movs	r1, #1
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0b0      	beq.n	80014be <HAL_RCC_OscConfig+0x63a>
 800155c:	e06a      	b.n	8001634 <HAL_RCC_OscConfig+0x7b0>
 800155e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa93 f2a3 	rbit	r2, r3
 8001570:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001574:	601a      	str	r2, [r3, #0]
  return result;
 8001576:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800157a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	4b8c      	ldr	r3, [pc, #560]	; (80017b8 <HAL_RCC_OscConfig+0x934>)
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	461a      	mov	r2, r3
 800158c:	2300      	movs	r3, #0
 800158e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff f992 	bl	80008b8 <HAL_GetTick>
 8001594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	e009      	b.n	80015ae <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff f98d 	bl	80008b8 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e36b      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
 80015ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015ca:	2202      	movs	r2, #2
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	fa93 f2a3 	rbit	r2, r3
 80015d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f6:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 80015f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015fe:	2102      	movs	r1, #2
 8001600:	6019      	str	r1, [r3, #0]
 8001602:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f1a3 	rbit	r1, r3
 800160c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001610:	6019      	str	r1, [r3, #0]
  return result;
 8001612:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1b2      	bne.n	800159a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8158 	beq.w	80018f4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d112      	bne.n	800167c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b57      	ldr	r3, [pc, #348]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a56      	ldr	r2, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b54      	ldr	r3, [pc, #336]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b4f      	ldr	r3, [pc, #316]	; (80017bc <HAL_RCC_OscConfig+0x938>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d11a      	bne.n	80016be <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001688:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <HAL_RCC_OscConfig+0x938>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a4b      	ldr	r2, [pc, #300]	; (80017bc <HAL_RCC_OscConfig+0x938>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001694:	f7ff f910 	bl	80008b8 <HAL_GetTick>
 8001698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	e009      	b.n	80016b2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff f90b 	bl	80008b8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e2e9      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_RCC_OscConfig+0x938>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0ef      	beq.n	800169e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x852>
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e02f      	b.n	8001736 <HAL_RCC_OscConfig+0x8b2>
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0x876>
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a33      	ldr	r2, [pc, #204]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a30      	ldr	r2, [pc, #192]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	e01d      	b.n	8001736 <HAL_RCC_OscConfig+0x8b2>
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x89a>
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0x8b2>
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d06b      	beq.n	8001818 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff f8ba 	bl	80008b8 <HAL_GetTick>
 8001744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff f8b5 	bl	80008b8 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e291      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
 8001762:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001790:	601a      	str	r2, [r3, #0]
  return result;
 8001792:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001796:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d109      	bne.n	80017c0 <HAL_RCC_OscConfig+0x93c>
 80017ac:	4b01      	ldr	r3, [pc, #4]	; (80017b4 <HAL_RCC_OscConfig+0x930>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	e014      	b.n	80017dc <HAL_RCC_OscConfig+0x958>
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	10908120 	.word	0x10908120
 80017bc:	40007000 	.word	0x40007000
 80017c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017c4:	2202      	movs	r2, #2
 80017c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4bbb      	ldr	r3, [pc, #748]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017e0:	2102      	movs	r1, #2
 80017e2:	6011      	str	r1, [r2, #0]
 80017e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	fa92 f1a2 	rbit	r1, r2
 80017ee:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80017f2:	6011      	str	r1, [r2, #0]
  return result;
 80017f4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	fab2 f282 	clz	r2, r2
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	f002 021f 	and.w	r2, r2, #31
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d099      	beq.n	800174a <HAL_RCC_OscConfig+0x8c6>
 8001816:	e063      	b.n	80018e0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff f84e 	bl	80008b8 <HAL_GetTick>
 800181c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001820:	e00b      	b.n	800183a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f849 	bl	80008b8 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e225      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
 800183a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800183e:	2202      	movs	r2, #2
 8001840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001868:	601a      	str	r2, [r3, #0]
  return result;
 800186a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800186e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d102      	bne.n	800188a <HAL_RCC_OscConfig+0xa06>
 8001884:	4b90      	ldr	r3, [pc, #576]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	e00d      	b.n	80018a6 <HAL_RCC_OscConfig+0xa22>
 800188a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800188e:	2202      	movs	r2, #2
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	4b89      	ldr	r3, [pc, #548]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018aa:	2102      	movs	r1, #2
 80018ac:	6011      	str	r1, [r2, #0]
 80018ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	fa92 f1a2 	rbit	r1, r2
 80018b8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80018bc:	6011      	str	r1, [r2, #0]
  return result;
 80018be:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	fab2 f282 	clz	r2, r2
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f002 021f 	and.w	r2, r2, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1a0      	bne.n	8001822 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e8:	4b77      	ldr	r3, [pc, #476]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	4a76      	ldr	r2, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 80018ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 81c2 	beq.w	8001c84 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	f000 819c 	beq.w	8001c46 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b02      	cmp	r3, #2
 8001916:	f040 8114 	bne.w	8001b42 <HAL_RCC_OscConfig+0xcbe>
 800191a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800191e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001932:	601a      	str	r2, [r3, #0]
  return result;
 8001934:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001938:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	2300      	movs	r3, #0
 800194e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7fe ffb2 	bl	80008b8 <HAL_GetTick>
 8001954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	e009      	b.n	800196e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195a:	f7fe ffad 	bl	80008b8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e18b      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
 800196e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001986:	601a      	str	r2, [r3, #0]
  return result;
 8001988:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800198c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0xb24>
 80019a2:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e01b      	b.n	80019e0 <HAL_RCC_OscConfig+0xb5c>
 80019a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019e8:	6011      	str	r1, [r2, #0]
 80019ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	fa92 f1a2 	rbit	r1, r2
 80019f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019f8:	6011      	str	r1, [r2, #0]
  return result;
 80019fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	fab2 f282 	clz	r2, r2
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f002 021f 	and.w	r2, r2, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d19e      	bne.n	800195a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	4925      	ldr	r1, [pc, #148]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
 8001a38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a50:	601a      	str	r2, [r3, #0]
  return result;
 8001a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a56:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7fe ff23 	bl	80008b8 <HAL_GetTick>
 8001a72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a76:	e009      	b.n	8001a8c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a78:	f7fe ff1e 	bl	80008b8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0fc      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
 8001a8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aa4:	601a      	str	r2, [r3, #0]
  return result;
 8001aa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aaa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0xc48>
 8001ac0:	4b01      	ldr	r3, [pc, #4]	; (8001ac8 <HAL_RCC_OscConfig+0xc44>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e01e      	b.n	8001b04 <HAL_RCC_OscConfig+0xc80>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_RCC_OscConfig+0xe0c>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fa92 f1a2 	rbit	r1, r2
 8001b18:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b1c:	6011      	str	r1, [r2, #0]
  return result;
 8001b1e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f042 0220 	orr.w	r2, r2, #32
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d09b      	beq.n	8001a78 <HAL_RCC_OscConfig+0xbf4>
 8001b40:	e0a0      	b.n	8001c84 <HAL_RCC_OscConfig+0xe00>
 8001b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f2a3 	rbit	r2, r3
 8001b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5a:	601a      	str	r2, [r3, #0]
  return result;
 8001b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	461a      	mov	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7fe fe9e 	bl	80008b8 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b82:	f7fe fe99 	bl	80008b8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e077      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
 8001b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f2a3 	rbit	r2, r3
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	601a      	str	r2, [r3, #0]
  return result;
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xd4c>
 8001bca:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <HAL_RCC_OscConfig+0xe0c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e01b      	b.n	8001c08 <HAL_RCC_OscConfig+0xd84>
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f107 0320 	add.w	r3, r7, #32
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f107 0318 	add.w	r3, r7, #24
 8001bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f2a3 	rbit	r2, r3
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_RCC_OscConfig+0xe0c>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f107 0210 	add.w	r2, r7, #16
 8001c0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c10:	6011      	str	r1, [r2, #0]
 8001c12:	f107 0210 	add.w	r2, r7, #16
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	fa92 f1a2 	rbit	r1, r2
 8001c1c:	f107 020c 	add.w	r2, r7, #12
 8001c20:	6011      	str	r1, [r2, #0]
  return result;
 8001c22:	f107 020c 	add.w	r2, r7, #12
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f002 021f 	and.w	r2, r2, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d19e      	bne.n	8001b82 <HAL_RCC_OscConfig+0xcfe>
 8001c44:	e01e      	b.n	8001c84 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e018      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_RCC_OscConfig+0xe0c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d108      	bne.n	8001c80 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b09e      	sub	sp, #120	; 0x78
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e162      	b.n	8001f72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <HAL_RCC_ClockConfig+0x25c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d910      	bls.n	8001cdc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b8d      	ldr	r3, [pc, #564]	; (8001ef0 <HAL_RCC_ClockConfig+0x25c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	498b      	ldr	r1, [pc, #556]	; (8001ef0 <HAL_RCC_ClockConfig+0x25c>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <HAL_RCC_ClockConfig+0x25c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e14a      	b.n	8001f72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	497f      	ldr	r1, [pc, #508]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80dc 	beq.w	8001ec0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d13c      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xf6>
 8001d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d102      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xa6>
 8001d34:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	e00f      	b.n	8001d5a <HAL_RCC_ClockConfig+0xc6>
 8001d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	667b      	str	r3, [r7, #100]	; 0x64
 8001d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d56:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d17b      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0f3      	b.n	8001f72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d13c      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x178>
 8001d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d102      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x128>
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_ClockConfig+0x148>
 8001dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8001dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40
 8001dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001de4:	fa92 f2a2 	rbit	r2, r2
 8001de8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f002 021f 	and.w	r2, r2, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d13a      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0b2      	b.n	8001f72 <HAL_RCC_ClockConfig+0x2de>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d102      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x1a0>
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	e00d      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1bc>
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e40:	2302      	movs	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	2202      	movs	r2, #2
 8001e52:	61ba      	str	r2, [r7, #24]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	617a      	str	r2, [r7, #20]
  return result;
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	fab2 f282 	clz	r2, r2
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f042 0220 	orr.w	r2, r2, #32
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f002 021f 	and.w	r2, r2, #31
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e079      	b.n	8001f72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	491a      	ldr	r1, [pc, #104]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e90:	f7fe fd12 	bl	80008b8 <HAL_GetTick>
 8001e94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7fe fd0e 	bl	80008b8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e061      	b.n	8001f72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 020c 	and.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d1eb      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_ClockConfig+0x25c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d214      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_RCC_ClockConfig+0x25c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4906      	ldr	r1, [pc, #24]	; (8001ef0 <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e040      	b.n	8001f72 <HAL_RCC_ClockConfig+0x2de>
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_RCC_ClockConfig+0x2e8>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	491a      	ldr	r1, [pc, #104]	; (8001f7c <HAL_RCC_ClockConfig+0x2e8>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x2e8>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4912      	ldr	r1, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x2e8>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f36:	f000 f829 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_RCC_ClockConfig+0x2e8>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f44:	22f0      	movs	r2, #240	; 0xf0
 8001f46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	fa92 f2a2 	rbit	r2, r2
 8001f4e:	60fa      	str	r2, [r7, #12]
  return result;
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	40d3      	lsrs	r3, r2
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x2ec>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_RCC_ClockConfig+0x2f0>)
 8001f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_RCC_ClockConfig+0x2f4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fc60 	bl	8000830 <HAL_InitTick>
  
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3778      	adds	r7, #120	; 0x78
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	080032c0 	.word	0x080032c0
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b08b      	sub	sp, #44	; 0x2c
 8001f90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x30>
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fba:	e03c      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fbe:	623b      	str	r3, [r7, #32]
      break;
 8001fc0:	e03c      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	fa92 f2a2 	rbit	r2, r2
 8001fd4:	607a      	str	r2, [r7, #4]
  return result;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	fab2 f282 	clz	r2, r2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	40d3      	lsrs	r3, r2
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	220f      	movs	r2, #15
 8001ff0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	fa92 f2a2 	rbit	r2, r2
 8001ff8:	60fa      	str	r2, [r7, #12]
  return result;
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	40d3      	lsrs	r3, r2
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	fbb2 f2f3 	udiv	r2, r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
 8002024:	e004      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	4a0c      	ldr	r2, [pc, #48]	; (800205c <HAL_RCC_GetSysClockFreq+0xd0>)
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	623b      	str	r3, [r7, #32]
      break;
 8002034:	e002      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002038:	623b      	str	r3, [r7, #32]
      break;
 800203a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800203c:	6a3b      	ldr	r3, [r7, #32]
}
 800203e:	4618      	mov	r0, r3
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	007a1200 	.word	0x007a1200
 8002054:	080032d8 	.word	0x080032d8
 8002058:	080032e8 	.word	0x080032e8
 800205c:	003d0900 	.word	0x003d0900

08002060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCC_GetHCLKFreq+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800207e:	f7ff ffef 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800208c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002090:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	fa92 f2a2 	rbit	r2, r2
 8002098:	603a      	str	r2, [r7, #0]
  return result;
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	40d3      	lsrs	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	080032d0 	.word	0x080032d0

080020bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020c2:	f7ff ffcd 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 80020c6:	4601      	mov	r1, r0
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	fa92 f2a2 	rbit	r2, r2
 80020dc:	603a      	str	r2, [r7, #0]
  return result;
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	40d3      	lsrs	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	080032d0 	.word	0x080032d0

08002100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07c      	b.n	800220c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe fa55 	bl	80005dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002148:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002152:	d902      	bls.n	800215a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e002      	b.n	8002160 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002168:	d007      	beq.n	800217a <HAL_SPI_Init+0x7a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002172:	d002      	beq.n	800217a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800218a:	d903      	bls.n	8002194 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
 8002192:	e002      	b.n	800219a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	f003 0204 	and.w	r2, r3, #4
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	ea42 0103 	orr.w	r1, r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002222:	2301      	movs	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_SPI_TransmitReceive+0x26>
 8002236:	2302      	movs	r3, #2
 8002238:	e1fb      	b.n	8002632 <HAL_SPI_TransmitReceive+0x41e>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002242:	f7fe fb39 	bl	80008b8 <HAL_GetTick>
 8002246:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800224e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800225e:	7efb      	ldrb	r3, [r7, #27]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d00e      	beq.n	8002282 <HAL_SPI_TransmitReceive+0x6e>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800226a:	d106      	bne.n	800227a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <HAL_SPI_TransmitReceive+0x66>
 8002274:	7efb      	ldrb	r3, [r7, #27]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d003      	beq.n	8002282 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002280:	e1cd      	b.n	800261e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x80>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x80>
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800229a:	e1c0      	b.n	800261e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d003      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	887a      	ldrh	r2, [r7, #2]
 80022d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022f2:	d802      	bhi.n	80022fa <HAL_SPI_TransmitReceive+0xe6>
 80022f4:	8a3b      	ldrh	r3, [r7, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d908      	bls.n	800230c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	e007      	b.n	800231c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800231a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d007      	beq.n	800233a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002342:	d97c      	bls.n	800243e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_SPI_TransmitReceive+0x13e>
 800234c:	8a7b      	ldrh	r3, [r7, #18]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d169      	bne.n	8002426 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	1c9a      	adds	r2, r3, #2
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002376:	e056      	b.n	8002426 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d11b      	bne.n	80023be <HAL_SPI_TransmitReceive+0x1aa>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d016      	beq.n	80023be <HAL_SPI_TransmitReceive+0x1aa>
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	2b01      	cmp	r3, #1
 8002394:	d113      	bne.n	80023be <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	1c9a      	adds	r2, r3, #2
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11c      	bne.n	8002406 <HAL_SPI_TransmitReceive+0x1f2>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d016      	beq.n	8002406 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	b292      	uxth	r2, r2
 80023e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	1c9a      	adds	r2, r3, #2
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002402:	2301      	movs	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002406:	f7fe fa57 	bl	80008b8 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002412:	429a      	cmp	r2, r3
 8002414:	d807      	bhi.n	8002426 <HAL_SPI_TransmitReceive+0x212>
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d003      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002424:	e0fb      	b.n	800261e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1a3      	bne.n	8002378 <HAL_SPI_TransmitReceive+0x164>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d19d      	bne.n	8002378 <HAL_SPI_TransmitReceive+0x164>
 800243c:	e0df      	b.n	80025fe <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_SPI_TransmitReceive+0x23a>
 8002446:	8a7b      	ldrh	r3, [r7, #18]
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 80cb 	bne.w	80025e4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d912      	bls.n	800247e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	881a      	ldrh	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	1c9a      	adds	r2, r3, #2
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b02      	subs	r3, #2
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800247c:	e0b2      	b.n	80025e4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a4:	e09e      	b.n	80025e4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d134      	bne.n	800251e <HAL_SPI_TransmitReceive+0x30a>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d02f      	beq.n	800251e <HAL_SPI_TransmitReceive+0x30a>
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d12c      	bne.n	800251e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d912      	bls.n	80024f4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	881a      	ldrh	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	1c9a      	adds	r2, r3, #2
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b02      	subs	r3, #2
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024f2:	e012      	b.n	800251a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	330c      	adds	r3, #12
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d148      	bne.n	80025be <HAL_SPI_TransmitReceive+0x3aa>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d042      	beq.n	80025be <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d923      	bls.n	800258c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	b292      	uxth	r2, r2
 8002550:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	1c9a      	adds	r2, r3, #2
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b02      	subs	r3, #2
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d81f      	bhi.n	80025ba <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	e016      	b.n	80025ba <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f103 020c 	add.w	r2, r3, #12
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	7812      	ldrb	r2, [r2, #0]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025ba:	2301      	movs	r3, #1
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025be:	f7fe f97b 	bl	80008b8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d803      	bhi.n	80025d6 <HAL_SPI_TransmitReceive+0x3c2>
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d102      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x3c8>
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80025e2:	e01c      	b.n	800261e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f af5b 	bne.w	80024a6 <HAL_SPI_TransmitReceive+0x292>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f af54 	bne.w	80024a6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fa10 	bl	8002a28 <SPI_EndRxTxTransaction>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	661a      	str	r2, [r3, #96]	; 0x60
 800261a:	e000      	b.n	800261e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800261c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800262e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002632:	4618      	mov	r0, r3
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	099b      	lsrs	r3, r3, #6
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10f      	bne.n	8002680 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
    return;
 800267e:	e0d8      	b.n	8002832 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_SPI_IRQHandler+0x66>
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	09db      	lsrs	r3, r3, #7
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
    return;
 80026a0:	e0c7      	b.n	8002832 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_SPI_IRQHandler+0x8c>
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80b5 	beq.w	8002832 <HAL_SPI_IRQHandler+0x1f6>
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80ae 	beq.w	8002832 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d023      	beq.n	800272a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d011      	beq.n	8002712 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f2:	f043 0204 	orr.w	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	e00b      	b.n	800272a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	693b      	ldr	r3, [r7, #16]
        return;
 8002728:	e083      	b.n	8002832 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d014      	beq.n	8002760 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002770:	f043 0208 	orr.w	r2, r3, #8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	2b00      	cmp	r3, #0
 800278c:	d050      	beq.n	8002830 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800279c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d104      	bne.n	80027ba <HAL_SPI_IRQHandler+0x17e>
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d034      	beq.n	8002824 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0203 	bic.w	r2, r2, #3
 80027c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d011      	beq.n	80027f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a18      	ldr	r2, [pc, #96]	; (8002838 <HAL_SPI_IRQHandler+0x1fc>)
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe f987 	bl	8000af2 <HAL_DMA_Abort_IT>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_SPI_IRQHandler+0x1fc>)
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe f971 	bl	8000af2 <HAL_DMA_Abort_IT>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002822:	e003      	b.n	800282c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f809 	bl	800283c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800282a:	e000      	b.n	800282e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800282c:	bf00      	nop
    return;
 800282e:	bf00      	nop
 8002830:	bf00      	nop
  }
}
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	08002851 	.word	0x08002851

0800283c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ffe5 	bl	800283c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288a:	e04c      	b.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d048      	beq.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002894:	f7fe f810 	bl	80008b8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d902      	bls.n	80028aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d13d      	bne.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c2:	d111      	bne.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028cc:	d004      	beq.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d6:	d107      	bne.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f0:	d10f      	bne.n	8002912 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e00f      	b.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	429a      	cmp	r2, r3
 8002942:	d1a3      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800295c:	e057      	b.n	8002a0e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002964:	d106      	bne.n	8002974 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d048      	beq.n	8002a0e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800297c:	f7fd ff9c 	bl	80008b8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d902      	bls.n	8002992 <SPI_WaitFifoStateUntilTimeout+0x44>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d13d      	bne.n	8002a0e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029aa:	d111      	bne.n	80029d0 <SPI_WaitFifoStateUntilTimeout+0x82>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b4:	d004      	beq.n	80029c0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029be:	d107      	bne.n	80029d0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d8:	d10f      	bne.n	80029fa <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e008      	b.n	8002a20 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4013      	ands	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d19f      	bne.n	800295e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff ff84 	bl	800294e <SPI_WaitFifoStateUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e027      	b.n	8002aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff ff07 	bl	800287a <SPI_WaitFlagStateUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e014      	b.n	8002aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ff5d 	bl	800294e <SPI_WaitFifoStateUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e000      	b.n	8002aac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e040      	b.n	8002b48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fd fdca 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2224      	movs	r2, #36	; 0x24
 8002ae0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f82c 	bl	8002b50 <UART_SetConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e022      	b.n	8002b48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9a2 	bl	8002e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa29 	bl	8002f98 <UART_CheckIdleState>
 8002b46:	4603      	mov	r3, r0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4ba2      	ldr	r3, [pc, #648]	; (8002e08 <UART_SetConfig+0x2b8>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	6939      	ldr	r1, [r7, #16]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a90      	ldr	r2, [pc, #576]	; (8002e0c <UART_SetConfig+0x2bc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d121      	bne.n	8002c14 <UART_SetConfig+0xc4>
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <UART_SetConfig+0x2c0>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d817      	bhi.n	8002c0c <UART_SetConfig+0xbc>
 8002bdc:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <UART_SetConfig+0x94>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c01 	.word	0x08002c01
 8002bec:	08002c07 	.word	0x08002c07
 8002bf0:	08002bfb 	.word	0x08002bfb
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e01e      	b.n	8002c38 <UART_SetConfig+0xe8>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e01b      	b.n	8002c38 <UART_SetConfig+0xe8>
 8002c00:	2304      	movs	r3, #4
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e018      	b.n	8002c38 <UART_SetConfig+0xe8>
 8002c06:	2308      	movs	r3, #8
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e015      	b.n	8002c38 <UART_SetConfig+0xe8>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	bf00      	nop
 8002c12:	e011      	b.n	8002c38 <UART_SetConfig+0xe8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a7e      	ldr	r2, [pc, #504]	; (8002e14 <UART_SetConfig+0x2c4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d102      	bne.n	8002c24 <UART_SetConfig+0xd4>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e009      	b.n	8002c38 <UART_SetConfig+0xe8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a7b      	ldr	r2, [pc, #492]	; (8002e18 <UART_SetConfig+0x2c8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d102      	bne.n	8002c34 <UART_SetConfig+0xe4>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	77fb      	strb	r3, [r7, #31]
 8002c32:	e001      	b.n	8002c38 <UART_SetConfig+0xe8>
 8002c34:	2310      	movs	r3, #16
 8002c36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c40:	f040 8082 	bne.w	8002d48 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d85e      	bhi.n	8002d08 <UART_SetConfig+0x1b8>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <UART_SetConfig+0x100>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c75 	.word	0x08002c75
 8002c54:	08002c95 	.word	0x08002c95
 8002c58:	08002cb5 	.word	0x08002cb5
 8002c5c:	08002d09 	.word	0x08002d09
 8002c60:	08002cd1 	.word	0x08002cd1
 8002c64:	08002d09 	.word	0x08002d09
 8002c68:	08002d09 	.word	0x08002d09
 8002c6c:	08002d09 	.word	0x08002d09
 8002c70:	08002cf1 	.word	0x08002cf1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c74:	f7ff fa00 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8002c78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	005a      	lsls	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	441a      	add	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	61bb      	str	r3, [r7, #24]
        break;
 8002c92:	e03c      	b.n	8002d0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c94:	f7ff fa12 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8002c98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	005a      	lsls	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	441a      	add	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	61bb      	str	r3, [r7, #24]
        break;
 8002cb2:	e02c      	b.n	8002d0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002cbe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6852      	ldr	r2, [r2, #4]
 8002cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	61bb      	str	r3, [r7, #24]
        break;
 8002cce:	e01e      	b.n	8002d0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd0:	f7ff f95c 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8002cd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	005a      	lsls	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	61bb      	str	r3, [r7, #24]
        break;
 8002cee:	e00e      	b.n	8002d0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	61bb      	str	r3, [r7, #24]
        break;
 8002d06:	e002      	b.n	8002d0e <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75fb      	strb	r3, [r7, #23]
        break;
 8002d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d916      	bls.n	8002d42 <UART_SetConfig+0x1f2>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1a:	d212      	bcs.n	8002d42 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f023 030f 	bic.w	r3, r3, #15
 8002d24:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	897a      	ldrh	r2, [r7, #10]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	e07d      	b.n	8002e3e <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
 8002d46:	e07a      	b.n	8002e3e <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d866      	bhi.n	8002e1c <UART_SetConfig+0x2cc>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <UART_SetConfig+0x204>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002d79 	.word	0x08002d79
 8002d58:	08002d97 	.word	0x08002d97
 8002d5c:	08002db5 	.word	0x08002db5
 8002d60:	08002e1d 	.word	0x08002e1d
 8002d64:	08002dd1 	.word	0x08002dd1
 8002d68:	08002e1d 	.word	0x08002e1d
 8002d6c:	08002e1d 	.word	0x08002e1d
 8002d70:	08002e1d 	.word	0x08002e1d
 8002d74:	08002def 	.word	0x08002def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d78:	f7ff f97e 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8002d7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	085a      	lsrs	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	441a      	add	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	61bb      	str	r3, [r7, #24]
        break;
 8002d94:	e045      	b.n	8002e22 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d96:	f7ff f991 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8002d9a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	085a      	lsrs	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	61bb      	str	r3, [r7, #24]
        break;
 8002db2:	e036      	b.n	8002e22 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002dbe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6852      	ldr	r2, [r2, #4]
 8002dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	61bb      	str	r3, [r7, #24]
        break;
 8002dce:	e028      	b.n	8002e22 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd0:	f7ff f8dc 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8002dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	085a      	lsrs	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	441a      	add	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	61bb      	str	r3, [r7, #24]
        break;
 8002dec:	e019      	b.n	8002e22 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	61bb      	str	r3, [r7, #24]
        break;
 8002e04:	e00d      	b.n	8002e22 <UART_SetConfig+0x2d2>
 8002e06:	bf00      	nop
 8002e08:	efff69f3 	.word	0xefff69f3
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40004400 	.word	0x40004400
 8002e18:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	75fb      	strb	r3, [r7, #23]
        break;
 8002e20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d908      	bls.n	8002e3a <UART_SetConfig+0x2ea>
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2e:	d204      	bcs.n	8002e3a <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	e001      	b.n	8002e3e <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01a      	beq.n	8002f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f52:	d10a      	bne.n	8002f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002fa6:	f7fd fc87 	bl	80008b8 <HAL_GetTick>
 8002faa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d10e      	bne.n	8002fd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f82a 	bl	8003022 <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e020      	b.n	800301a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d10e      	bne.n	8003004 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f814 	bl	8003022 <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e00a      	b.n	800301a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003032:	e05d      	b.n	80030f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d059      	beq.n	80030f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7fd fc3c 	bl	80008b8 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <UART_WaitOnFlagUntilTimeout+0x30>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11b      	bne.n	800308a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003060:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e042      	b.n	8003110 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02b      	beq.n	80030f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a6:	d123      	bne.n	80030f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e00f      	b.n	8003110 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	429a      	cmp	r2, r3
 800310c:	d092      	beq.n	8003034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <tmc4671_readInt>:
extern uint8_t tmc4671_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int32_t tmc4671_readInt(uint8_t motor, uint8_t address)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	460a      	mov	r2, r1
 8003122:	71fb      	strb	r3, [r7, #7]
 8003124:	4613      	mov	r3, r2
 8003126:	71bb      	strb	r3, [r7, #6]
	// clear write bit
	address &= 0x7F;
 8003128:	79bb      	ldrb	r3, [r7, #6]
 800312a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800312e:	71bb      	strb	r3, [r7, #6]

	// write address
	tmc4671_readwriteByte(motor, address, false);
 8003130:	79b9      	ldrb	r1, [r7, #6]
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2200      	movs	r2, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f9fc 	bl	8000534 <tmc4671_readwriteByte>

	// read data
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	2200      	movs	r2, #0
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd f9f6 	bl	8000534 <tmc4671_readwriteByte>
 8003148:	4603      	mov	r3, r0
 800314a:	60fb      	str	r3, [r7, #12]
	value <<= 8;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	60fb      	str	r3, [r7, #12]
	value |= tmc4671_readwriteByte(motor, 0, false);
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2200      	movs	r2, #0
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f9eb 	bl	8000534 <tmc4671_readwriteByte>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
	value <<= 8;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	60fb      	str	r3, [r7, #12]
	value |= tmc4671_readwriteByte(motor, 0, false);
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2200      	movs	r2, #0
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f9dd 	bl	8000534 <tmc4671_readwriteByte>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
	value <<= 8;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	60fb      	str	r3, [r7, #12]
	value |= tmc4671_readwriteByte(motor, 0, true);
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	2201      	movs	r2, #1
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f9cf 	bl	8000534 <tmc4671_readwriteByte>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

	return value;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <tmc4671_writeInt>:

void tmc4671_writeInt(uint8_t motor, uint8_t address, int32_t value)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	603a      	str	r2, [r7, #0]
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	460b      	mov	r3, r1
 80031b8:	71bb      	strb	r3, [r7, #6]
	// write address
	tmc4671_readwriteByte(motor, address | 0x80, false);
 80031ba:	79bb      	ldrb	r3, [r7, #6]
 80031bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031c0:	b2d9      	uxtb	r1, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	2200      	movs	r2, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f9b4 	bl	8000534 <tmc4671_readwriteByte>

	// write value
	tmc4671_readwriteByte(motor, 0xFF & (value >> 24), false);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	0e1b      	lsrs	r3, r3, #24
 80031d0:	b2d9      	uxtb	r1, r3
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	2200      	movs	r2, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f9ac 	bl	8000534 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value >> 16), false);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	141b      	asrs	r3, r3, #16
 80031e0:	b2d9      	uxtb	r1, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	2200      	movs	r2, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f9a4 	bl	8000534 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value >> 8), false);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	121b      	asrs	r3, r3, #8
 80031f0:	b2d9      	uxtb	r1, r3
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	2200      	movs	r2, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f99c 	bl	8000534 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value >> 0), true);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2d9      	uxtb	r1, r3
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2201      	movs	r2, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd f995 	bl	8000534 <tmc4671_readwriteByte>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <__errno>:
 8003214:	4b01      	ldr	r3, [pc, #4]	; (800321c <__errno+0x8>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2000000c 	.word	0x2000000c

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	4e0d      	ldr	r6, [pc, #52]	; (8003258 <__libc_init_array+0x38>)
 8003224:	4c0d      	ldr	r4, [pc, #52]	; (800325c <__libc_init_array+0x3c>)
 8003226:	1ba4      	subs	r4, r4, r6
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	2500      	movs	r5, #0
 800322c:	42a5      	cmp	r5, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	4e0b      	ldr	r6, [pc, #44]	; (8003260 <__libc_init_array+0x40>)
 8003232:	4c0c      	ldr	r4, [pc, #48]	; (8003264 <__libc_init_array+0x44>)
 8003234:	f000 f838 	bl	80032a8 <_init>
 8003238:	1ba4      	subs	r4, r4, r6
 800323a:	10a4      	asrs	r4, r4, #2
 800323c:	2500      	movs	r5, #0
 800323e:	42a5      	cmp	r5, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003248:	4798      	blx	r3
 800324a:	3501      	adds	r5, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003252:	4798      	blx	r3
 8003254:	3501      	adds	r5, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	080032f8 	.word	0x080032f8
 800325c:	080032f8 	.word	0x080032f8
 8003260:	080032f8 	.word	0x080032f8
 8003264:	080032fc 	.word	0x080032fc

08003268 <memset>:
 8003268:	4402      	add	r2, r0
 800326a:	4603      	mov	r3, r0
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <memset+0xa>
 8003270:	4770      	bx	lr
 8003272:	f803 1b01 	strb.w	r1, [r3], #1
 8003276:	e7f9      	b.n	800326c <memset+0x4>

08003278 <wait>:
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <wait+0xc>)
 800327a:	4601      	mov	r1, r0
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f000 b803 	b.w	8003288 <_wait_r>
 8003282:	bf00      	nop
 8003284:	2000000c 	.word	0x2000000c

08003288 <_wait_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	4c06      	ldr	r4, [pc, #24]	; (80032a4 <_wait_r+0x1c>)
 800328c:	2300      	movs	r3, #0
 800328e:	4605      	mov	r5, r0
 8003290:	4608      	mov	r0, r1
 8003292:	6023      	str	r3, [r4, #0]
 8003294:	f7fd fa66 	bl	8000764 <_wait>
 8003298:	1c43      	adds	r3, r0, #1
 800329a:	d102      	bne.n	80032a2 <_wait_r+0x1a>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	b103      	cbz	r3, 80032a2 <_wait_r+0x1a>
 80032a0:	602b      	str	r3, [r5, #0]
 80032a2:	bd38      	pop	{r3, r4, r5, pc}
 80032a4:	20000174 	.word	0x20000174

080032a8 <_init>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	bf00      	nop
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr

080032b4 <_fini>:
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	bf00      	nop
 80032b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ba:	bc08      	pop	{r3}
 80032bc:	469e      	mov	lr, r3
 80032be:	4770      	bx	lr
