
Nucleo32-TMC4671.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003198  08003198  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003198  08003198  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003198  08003198  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080031ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080031ac  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abe2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001867  00000000  00000000  0002ac1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000970  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d9a3  00000000  00000000  0002d830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ed7  00000000  00000000  0004b1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9563  00000000  00000000  000530aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc60d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  000fc688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003148 	.word	0x08003148

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003148 	.word	0x08003148

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa87 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f816 	bl	8000202 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8c3 	bl	8000360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f891 	bl	8000300 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001de:	f000 f851 	bl	8000284 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  tmc4671_writeInt(0, 0x01, 0x00000001);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	2000      	movs	r0, #0
 80001e8:	f002 ff4d 	bl	8003086 <tmc4671_writeInt>
  int32_t buff = tmc4671_readInt(0, 0x00);
 80001ec:	2100      	movs	r1, #0
 80001ee:	2000      	movs	r0, #0
 80001f0:	f002 ff00 	bl	8002ff4 <tmc4671_readInt>
 80001f4:	6078      	str	r0, [r7, #4]
  buff = tmc4671_readInt(0, 0x01);
 80001f6:	2101      	movs	r1, #1
 80001f8:	2000      	movs	r0, #0
 80001fa:	f002 fefb 	bl	8002ff4 <tmc4671_readInt>
 80001fe:	6078      	str	r0, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x38>

08000202 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b090      	sub	sp, #64	; 0x40
 8000206:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000208:	f107 0318 	add.w	r3, r7, #24
 800020c:	2228      	movs	r2, #40	; 0x28
 800020e:	2100      	movs	r1, #0
 8000210:	4618      	mov	r0, r3
 8000212:	f002 ff91 	bl	8003138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	2302      	movs	r3, #2
 8000226:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022c:	2310      	movs	r3, #16
 800022e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000238:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800023c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fd8c 	bl	8000d60 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800024e:	f000 f917 	bl	8000480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2102      	movs	r1, #2
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fc7f 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000278:	f000 f902 	bl	8000480 <Error_Handler>
  }
}
 800027c:	bf00      	nop
 800027e:	3740      	adds	r7, #64	; 0x40
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <MX_SPI1_Init+0x74>)
 800028a:	4a1c      	ldr	r2, [pc, #112]	; (80002fc <MX_SPI1_Init+0x78>)
 800028c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <MX_SPI1_Init+0x74>)
 8000290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <MX_SPI1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <MX_SPI1_Init+0x74>)
 800029e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80002a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002a6:	2202      	movs	r2, #2
 80002a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002ba:	2238      	movs	r2, #56	; 0x38
 80002bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002d2:	2207      	movs	r2, #7
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_SPI1_Init+0x74>)
 80002e4:	f001 fe7a 	bl	8001fdc <HAL_SPI_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80002ee:	f000 f8c7 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000028 	.word	0x20000028
 80002fc:	40013000 	.word	0x40013000

08000300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000306:	4a15      	ldr	r2, [pc, #84]	; (800035c <MX_USART2_UART_Init+0x5c>)
 8000308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800030c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000344:	f002 fb24 	bl	8002990 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800034e:	f000 f897 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	2000008c 	.word	0x2000008c
 800035c:	40004400 	.word	0x40004400

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08a      	sub	sp, #40	; 0x28
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <MX_GPIO_Init+0xc0>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a29      	ldr	r2, [pc, #164]	; (8000420 <MX_GPIO_Init+0xc0>)
 800037c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_GPIO_Init+0xc0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800038a:	613b      	str	r3, [r7, #16]
 800038c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038e:	4b24      	ldr	r3, [pc, #144]	; (8000420 <MX_GPIO_Init+0xc0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a23      	ldr	r2, [pc, #140]	; (8000420 <MX_GPIO_Init+0xc0>)
 8000394:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <MX_GPIO_Init+0xc0>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <MX_GPIO_Init+0xc0>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a1d      	ldr	r2, [pc, #116]	; (8000420 <MX_GPIO_Init+0xc0>)
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_GPIO_Init+0xc0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_GPIO_Init+0xc0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a17      	ldr	r2, [pc, #92]	; (8000420 <MX_GPIO_Init+0xc0>)
 80003c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_GPIO_Init+0xc0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	4812      	ldr	r0, [pc, #72]	; (8000424 <MX_GPIO_Init+0xc4>)
 80003dc:	f000 fca8 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_GPIO_Init+0xc8>)
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <MX_GPIO_Init+0xcc>)
 80003f6:	f000 fb29 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80003fa:	2340      	movs	r3, #64	; 0x40
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2300      	movs	r3, #0
 8000408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <MX_GPIO_Init+0xc4>)
 8000412:	f000 fb1b 	bl	8000a4c <HAL_GPIO_Init>

}
 8000416:	bf00      	nop
 8000418:	3728      	adds	r7, #40	; 0x28
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	48000400 	.word	0x48000400
 8000428:	10210000 	.word	0x10210000
 800042c:	48000800 	.word	0x48000800

08000430 <tmc4671_readwriteByte>:

/* USER CODE BEGIN 4 */
uint8_t tmc4671_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af02      	add	r7, sp, #8
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
 800043a:	460b      	mov	r3, r1
 800043c:	71bb      	strb	r3, [r7, #6]
 800043e:	4613      	mov	r3, r2
 8000440:	717b      	strb	r3, [r7, #5]
	uint8_t buffer;

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	480c      	ldr	r0, [pc, #48]	; (8000478 <tmc4671_readwriteByte+0x48>)
 8000448:	f000 fc72 	bl	8000d30 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, &data, &buffer, 1, 100);
 800044c:	f107 020f 	add.w	r2, r7, #15
 8000450:	1db9      	adds	r1, r7, #6
 8000452:	2364      	movs	r3, #100	; 0x64
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	4808      	ldr	r0, [pc, #32]	; (800047c <tmc4671_readwriteByte+0x4c>)
 800045a:	f001 fe49 	bl	80020f0 <HAL_SPI_TransmitReceive>

	if(lastTransfer)
 800045e:	797b      	ldrb	r3, [r7, #5]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <tmc4671_readwriteByte+0x3e>
	{
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000464:	2201      	movs	r2, #1
 8000466:	2140      	movs	r1, #64	; 0x40
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <tmc4671_readwriteByte+0x48>)
 800046a:	f000 fc61 	bl	8000d30 <HAL_GPIO_WritePin>
	}

	return buffer;
 800046e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	48000400 	.word	0x48000400
 800047c:	20000028 	.word	0x20000028

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
	...

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_MspInit+0x44>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x44>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <HAL_MspInit+0x44>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <HAL_MspInit+0x44>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_MspInit+0x44>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004c6:	2007      	movs	r0, #7
 80004c8:	f000 fa40 	bl	800094c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <HAL_SPI_MspInit+0x8c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d130      	bne.n	800055c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <HAL_SPI_MspInit+0x90>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <HAL_SPI_MspInit+0x90>)
 8000500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <HAL_SPI_MspInit+0x90>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_SPI_MspInit+0x90>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a14      	ldr	r2, [pc, #80]	; (8000568 <HAL_SPI_MspInit+0x90>)
 8000518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_SPI_MspInit+0x90>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800052a:	23e0      	movs	r3, #224	; 0xe0
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052e:	2302      	movs	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	2303      	movs	r3, #3
 8000538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800053a:	2305      	movs	r3, #5
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f000 fa80 	bl	8000a4c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2023      	movs	r0, #35	; 0x23
 8000552:	f000 fa06 	bl	8000962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000556:	2023      	movs	r0, #35	; 0x23
 8000558:	f000 fa1f 	bl	800099a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800055c:	bf00      	nop
 800055e:	3728      	adds	r7, #40	; 0x28
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40013000 	.word	0x40013000
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <HAL_UART_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d128      	bne.n	80005e0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_UART_MspInit+0x80>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <HAL_UART_MspInit+0x80>)
 8000594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000598:	61d3      	str	r3, [r2, #28]
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_UART_MspInit+0x80>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_UART_MspInit+0x80>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <HAL_UART_MspInit+0x80>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_UART_MspInit+0x80>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005be:	230c      	movs	r3, #12
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ce:	2307      	movs	r3, #7
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005dc:	f000 fa36 	bl	8000a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	; 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40004400 	.word	0x40004400
 80005ec:	40021000 	.word	0x40021000

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000644:	f000 f892 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <SPI1_IRQHandler+0x10>)
 8000652:	f001 ff61 	bl	8002518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000028 	.word	0x20000028

08000660 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <SystemInit+0x28>)
 8000666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <SystemInit+0x28>)
 800066c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <SystemInit+0x28>)
 8000676:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800067a:	609a      	str	r2, [r3, #8]
#endif
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800068c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000690:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000692:	e003      	b.n	800069c <LoopCopyDataInit>

08000694 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000696:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000698:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800069a:	3104      	adds	r1, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800069c:	480b      	ldr	r0, [pc, #44]	; (80006cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006a4:	d3f6      	bcc.n	8000694 <CopyDataInit>
	ldr	r2, =_sbss
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006a8:	e002      	b.n	80006b0 <LoopFillZerobss>

080006aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006ac:	f842 3b04 	str.w	r3, [r2], #4

080006b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <LoopForever+0x16>)
	cmp	r2, r3
 80006b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006b4:	d3f9      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b6:	f7ff ffd3 	bl	8000660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ba:	f002 fd19 	bl	80030f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006be:	f7ff fd83 	bl	80001c8 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80006c8:	080031a0 	.word	0x080031a0
	ldr	r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006d8:	20000110 	.word	0x20000110

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_Init+0x28>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_Init+0x28>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f92b 	bl	800094c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f808 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f7ff fec8 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x54>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x58>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f943 	bl	80009b6 <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 f90b 	bl	8000962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x5c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	2000010c 	.word	0x2000010c

08000794 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;  
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2000010c 	.word	0x2000010c

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <__NVIC_EnableIRQ+0x38>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000918:	d301      	bcc.n	800091e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091a:	2301      	movs	r3, #1
 800091c:	e00f      	b.n	800093e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <SysTick_Config+0x40>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000926:	210f      	movs	r1, #15
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f7ff ff8e 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x40>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x40>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff29 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff3e 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff8e 	bl	80008a0 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5d 	bl	800084c <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff31 	bl	8000810 <__NVIC_EnableIRQ>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffa2 	bl	8000908 <SysTick_Config>
 80009c4:	4603      	mov	r3, r0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d005      	beq.n	80009f0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e027      	b.n	8000a40 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f022 020e 	bic.w	r2, r2, #14
 80009fe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0201 	bic.w	r2, r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2201      	movs	r2, #1
 8000a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	4798      	blx	r3
    } 
  }
  return status;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e14e      	b.n	8000cfa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 8140 	beq.w	8000cf4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d00b      	beq.n	8000a94 <HAL_GPIO_Init+0x48>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d007      	beq.n	8000a94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a88:	2b11      	cmp	r3, #17
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b12      	cmp	r3, #18
 8000a92:	d130      	bne.n	8000af6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aca:	2201      	movs	r2, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	091b      	lsrs	r3, r3, #4
 8000ae0:	f003 0201 	and.w	r2, r3, #1
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0xea>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2b12      	cmp	r3, #18
 8000b34:	d123      	bne.n	8000b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	08da      	lsrs	r2, r3, #3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	08da      	lsrs	r2, r3, #3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3208      	adds	r2, #8
 8000b78:	6939      	ldr	r1, [r7, #16]
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0203 	and.w	r2, r3, #3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 809a 	beq.w	8000cf4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a54      	ldr	r2, [pc, #336]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd8:	4a50      	ldr	r2, [pc, #320]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c02:	d013      	beq.n	8000c2c <HAL_GPIO_Init+0x1e0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a46      	ldr	r2, [pc, #280]	; (8000d20 <HAL_GPIO_Init+0x2d4>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00d      	beq.n	8000c28 <HAL_GPIO_Init+0x1dc>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a45      	ldr	r2, [pc, #276]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d007      	beq.n	8000c24 <HAL_GPIO_Init+0x1d8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a44      	ldr	r2, [pc, #272]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d101      	bne.n	8000c20 <HAL_GPIO_Init+0x1d4>
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e006      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c20:	2305      	movs	r3, #5
 8000c22:	e004      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <HAL_GPIO_Init+0x1e2>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	4093      	lsls	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3e:	4937      	ldr	r1, [pc, #220]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c4c:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c70:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c9a:	4a24      	ldr	r2, [pc, #144]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f47f aea9 	bne.w	8000a5c <HAL_GPIO_Init+0x10>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	371c      	adds	r7, #28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d4c:	e002      	b.n	8000d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f000 bef4 	b.w	8001b62 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 816a 	beq.w	800105e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d8a:	4bb3      	ldr	r3, [pc, #716]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d00c      	beq.n	8000db0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d96:	4bb0      	ldr	r3, [pc, #704]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d159      	bne.n	8000e56 <HAL_RCC_OscConfig+0xf6>
 8000da2:	4bad      	ldr	r3, [pc, #692]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dae:	d152      	bne.n	8000e56 <HAL_RCC_OscConfig+0xf6>
 8000db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dbc:	fa93 f3a3 	rbit	r3, r3
 8000dc0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dc4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d102      	bne.n	8000de2 <HAL_RCC_OscConfig+0x82>
 8000ddc:	4b9e      	ldr	r3, [pc, #632]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	e015      	b.n	8000e0e <HAL_RCC_OscConfig+0xae>
 8000de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dee:	fa93 f3a3 	rbit	r3, r3
 8000df2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dfe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e0a:	4b93      	ldr	r3, [pc, #588]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e12:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e16:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e1a:	fa92 f2a2 	rbit	r2, r2
 8000e1e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e22:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e26:	fab2 f282 	clz	r2, r2
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	f042 0220 	orr.w	r2, r2, #32
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	f002 021f 	and.w	r2, r2, #31
 8000e36:	2101      	movs	r1, #1
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 810c 	beq.w	800105c <HAL_RCC_OscConfig+0x2fc>
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 8106 	bne.w	800105c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f000 be86 	b.w	8001b62 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e60:	d106      	bne.n	8000e70 <HAL_RCC_OscConfig+0x110>
 8000e62:	4b7d      	ldr	r3, [pc, #500]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7c      	ldr	r2, [pc, #496]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e030      	b.n	8000ed2 <HAL_RCC_OscConfig+0x172>
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x134>
 8000e7a:	4b77      	ldr	r3, [pc, #476]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a76      	ldr	r2, [pc, #472]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4b74      	ldr	r3, [pc, #464]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a73      	ldr	r2, [pc, #460]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e01e      	b.n	8000ed2 <HAL_RCC_OscConfig+0x172>
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e9e:	d10c      	bne.n	8000eba <HAL_RCC_OscConfig+0x15a>
 8000ea0:	4b6d      	ldr	r3, [pc, #436]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a6c      	ldr	r2, [pc, #432]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a69      	ldr	r2, [pc, #420]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	e00b      	b.n	8000ed2 <HAL_RCC_OscConfig+0x172>
 8000eba:	4b67      	ldr	r3, [pc, #412]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a66      	ldr	r2, [pc, #408]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b64      	ldr	r3, [pc, #400]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a63      	ldr	r2, [pc, #396]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ed2:	4b61      	ldr	r3, [pc, #388]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed6:	f023 020f 	bic.w	r2, r3, #15
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	495d      	ldr	r1, [pc, #372]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d059      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fc50 	bl	8000794 <HAL_GetTick>
 8000ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef8:	e00a      	b.n	8000f10 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efa:	f7ff fc4b 	bl	8000794 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d902      	bls.n	8000f10 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f000 be29 	b.w	8001b62 <HAL_RCC_OscConfig+0xe02>
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f1c:	fa93 f3a3 	rbit	r3, r3
 8000f20:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f24:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <HAL_RCC_OscConfig+0x1e2>
 8000f3c:	4b46      	ldr	r3, [pc, #280]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	e015      	b.n	8000f6e <HAL_RCC_OscConfig+0x20e>
 8000f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f46:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f5e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f72:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f76:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f7a:	fa92 f2a2 	rbit	r2, r2
 8000f7e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f82:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	f042 0220 	orr.w	r2, r2, #32
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	f002 021f 	and.w	r2, r2, #31
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0ab      	beq.n	8000efa <HAL_RCC_OscConfig+0x19a>
 8000fa2:	e05c      	b.n	800105e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fbf6 	bl	8000794 <HAL_GetTick>
 8000fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fac:	e00a      	b.n	8000fc4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fae:	f7ff fbf1 	bl	8000794 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d902      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f000 bdcf 	b.w	8001b62 <HAL_RCC_OscConfig+0xe02>
 8000fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d102      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x296>
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	e015      	b.n	8001022 <HAL_RCC_OscConfig+0x2c2>
 8000ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800100a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001012:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_RCC_OscConfig+0x2f8>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001026:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800102a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800102e:	fa92 f2a2 	rbit	r2, r2
 8001032:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001036:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800103a:	fab2 f282 	clz	r2, r2
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	f042 0220 	orr.w	r2, r2, #32
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	f002 021f 	and.w	r2, r2, #31
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1ab      	bne.n	8000fae <HAL_RCC_OscConfig+0x24e>
 8001056:	e002      	b.n	800105e <HAL_RCC_OscConfig+0x2fe>
 8001058:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 816f 	beq.w	800134c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800106e:	4bd0      	ldr	r3, [pc, #832]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800107a:	4bcd      	ldr	r3, [pc, #820]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d16c      	bne.n	8001160 <HAL_RCC_OscConfig+0x400>
 8001086:	4bca      	ldr	r3, [pc, #808]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d166      	bne.n	8001160 <HAL_RCC_OscConfig+0x400>
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a8:	fab3 f383 	clz	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d102      	bne.n	80010c2 <HAL_RCC_OscConfig+0x362>
 80010bc:	4bbc      	ldr	r3, [pc, #752]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	e013      	b.n	80010ea <HAL_RCC_OscConfig+0x38a>
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010e6:	4bb2      	ldr	r3, [pc, #712]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	2202      	movs	r2, #2
 80010ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010f4:	fa92 f2a2 	rbit	r2, r2
 80010f8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001100:	fab2 f282 	clz	r2, r2
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	f042 0220 	orr.w	r2, r2, #32
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	f002 021f 	and.w	r2, r2, #31
 8001110:	2101      	movs	r1, #1
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d007      	beq.n	800112c <HAL_RCC_OscConfig+0x3cc>
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d002      	beq.n	800112c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	f000 bd1b 	b.w	8001b62 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4ba0      	ldr	r3, [pc, #640]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	21f8      	movs	r1, #248	; 0xf8
 800113c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001144:	fa91 f1a1 	rbit	r1, r1
 8001148:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800114c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001150:	fab1 f181 	clz	r1, r1
 8001154:	b2c9      	uxtb	r1, r1
 8001156:	408b      	lsls	r3, r1
 8001158:	4995      	ldr	r1, [pc, #596]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e0f5      	b.n	800134c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8085 	beq.w	8001276 <HAL_RCC_OscConfig+0x516>
 800116c:	2301      	movs	r3, #1
 800116e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800117e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800118c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	461a      	mov	r2, r3
 8001194:	2301      	movs	r3, #1
 8001196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fafc 	bl	8000794 <HAL_GetTick>
 800119c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a2:	f7ff faf7 	bl	8000794 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d902      	bls.n	80011b8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f000 bcd5 	b.w	8001b62 <HAL_RCC_OscConfig+0xe02>
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	095b      	lsrs	r3, r3, #5
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x488>
 80011e2:	4b73      	ldr	r3, [pc, #460]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	e013      	b.n	8001210 <HAL_RCC_OscConfig+0x4b0>
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001200:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800120c:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	2202      	movs	r2, #2
 8001212:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001216:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800121a:	fa92 f2a2 	rbit	r2, r2
 800121e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001222:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001226:	fab2 f282 	clz	r2, r2
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	f002 021f 	and.w	r2, r2, #31
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0af      	beq.n	80011a2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	21f8      	movs	r1, #248	; 0xf8
 8001252:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800125a:	fa91 f1a1 	rbit	r1, r1
 800125e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001262:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001266:	fab1 f181 	clz	r1, r1
 800126a:	b2c9      	uxtb	r1, r1
 800126c:	408b      	lsls	r3, r1
 800126e:	4950      	ldr	r1, [pc, #320]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e06a      	b.n	800134c <HAL_RCC_OscConfig+0x5ec>
 8001276:	2301      	movs	r3, #1
 8001278:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001288:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001296:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	461a      	mov	r2, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fa77 	bl	8000794 <HAL_GetTick>
 80012a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	e00a      	b.n	80012c2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fa72 	bl	8000794 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d902      	bls.n	80012c2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	f000 bc50 	b.w	8001b62 <HAL_RCC_OscConfig+0xe02>
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d102      	bne.n	80012f2 <HAL_RCC_OscConfig+0x592>
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	e013      	b.n	800131a <HAL_RCC_OscConfig+0x5ba>
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012fc:	fa93 f3a3 	rbit	r3, r3
 8001300:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800130a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_RCC_OscConfig+0x650>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	2202      	movs	r2, #2
 800131c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001320:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001324:	fa92 f2a2 	rbit	r2, r2
 8001328:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800132c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001330:	fab2 f282 	clz	r2, r2
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	f042 0220 	orr.w	r2, r2, #32
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	f002 021f 	and.w	r2, r2, #31
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1af      	bne.n	80012ac <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80da 	beq.w	8001510 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d069      	beq.n	800143a <HAL_RCC_OscConfig+0x6da>
 8001366:	2301      	movs	r3, #1
 8001368:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_OscConfig+0x654>)
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	461a      	mov	r2, r3
 800138c:	2301      	movs	r3, #1
 800138e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fa00 	bl	8000794 <HAL_GetTick>
 8001394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001398:	e00e      	b.n	80013b8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139a:	f7ff f9fb 	bl	8000794 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d906      	bls.n	80013b8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e3d9      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	10908120 	.word	0x10908120
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013ce:	2202      	movs	r2, #2
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	fa93 f2a3 	rbit	r2, r3
 80013dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013e6:	2202      	movs	r2, #2
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	4ba5      	ldr	r3, [pc, #660]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80013fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001402:	2102      	movs	r1, #2
 8001404:	6019      	str	r1, [r3, #0]
 8001406:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f1a3 	rbit	r1, r3
 8001410:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001414:	6019      	str	r1, [r3, #0]
  return result;
 8001416:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0b0      	beq.n	800139a <HAL_RCC_OscConfig+0x63a>
 8001438:	e06a      	b.n	8001510 <HAL_RCC_OscConfig+0x7b0>
 800143a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	fa93 f2a3 	rbit	r2, r3
 800144c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001450:	601a      	str	r2, [r3, #0]
  return result;
 8001452:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001456:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4b8c      	ldr	r3, [pc, #560]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	461a      	mov	r2, r3
 8001468:	2300      	movs	r3, #0
 800146a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff f992 	bl	8000794 <HAL_GetTick>
 8001470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	e009      	b.n	800148a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001476:	f7ff f98d 	bl	8000794 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e36b      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
 800148a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800148e:	2202      	movs	r2, #2
 8001490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fa93 f2a3 	rbit	r2, r3
 800149c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fa93 f2a3 	rbit	r2, r3
 80014b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014be:	2202      	movs	r2, #2
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fa93 f2a3 	rbit	r2, r3
 80014cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80014d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014da:	2102      	movs	r1, #2
 80014dc:	6019      	str	r1, [r3, #0]
 80014de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fa93 f1a3 	rbit	r1, r3
 80014e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014ec:	6019      	str	r1, [r3, #0]
  return result;
 80014ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1b2      	bne.n	8001476 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8158 	beq.w	80017d0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b5a      	ldr	r3, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d112      	bne.n	8001558 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b57      	ldr	r3, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b54      	ldr	r3, [pc, #336]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d11a      	bne.n	800159a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001564:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001570:	f7ff f910 	bl	8000794 <HAL_GetTick>
 8001574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e009      	b.n	800158e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff f90b 	bl	8000794 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e2e9      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ef      	beq.n	800157a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x852>
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a39      	ldr	r2, [pc, #228]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e02f      	b.n	8001612 <HAL_RCC_OscConfig+0x8b2>
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x876>
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a33      	ldr	r2, [pc, #204]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a30      	ldr	r2, [pc, #192]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015ce:	f023 0304 	bic.w	r3, r3, #4
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	e01d      	b.n	8001612 <HAL_RCC_OscConfig+0x8b2>
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x89a>
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x8b2>
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a24      	ldr	r2, [pc, #144]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a21      	ldr	r2, [pc, #132]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d06b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f8ba 	bl	8000794 <HAL_GetTick>
 8001620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff f8b5 	bl	8000794 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e291      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
 800163e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001642:	2202      	movs	r2, #2
 8001644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fa93 f2a3 	rbit	r2, r3
 8001650:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800165a:	2202      	movs	r2, #2
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fa93 f2a3 	rbit	r2, r3
 8001668:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800166c:	601a      	str	r2, [r3, #0]
  return result;
 800166e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001672:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d109      	bne.n	800169c <HAL_RCC_OscConfig+0x93c>
 8001688:	4b01      	ldr	r3, [pc, #4]	; (8001690 <HAL_RCC_OscConfig+0x930>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x958>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	10908120 	.word	0x10908120
 8001698:	40007000 	.word	0x40007000
 800169c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016a0:	2202      	movs	r2, #2
 80016a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	4bbb      	ldr	r3, [pc, #748]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016bc:	2102      	movs	r1, #2
 80016be:	6011      	str	r1, [r2, #0]
 80016c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	fa92 f1a2 	rbit	r1, r2
 80016ca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80016ce:	6011      	str	r1, [r2, #0]
  return result;
 80016d0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	fab2 f282 	clz	r2, r2
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	f002 021f 	and.w	r2, r2, #31
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d099      	beq.n	8001626 <HAL_RCC_OscConfig+0x8c6>
 80016f2:	e063      	b.n	80017bc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff f84e 	bl	8000794 <HAL_GetTick>
 80016f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	e00b      	b.n	8001716 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff f849 	bl	8000794 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e225      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
 8001716:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800171a:	2202      	movs	r2, #2
 800171c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001732:	2202      	movs	r2, #2
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fa93 f2a3 	rbit	r2, r3
 8001740:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001744:	601a      	str	r2, [r3, #0]
  return result;
 8001746:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800174a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0xa06>
 8001760:	4b90      	ldr	r3, [pc, #576]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	e00d      	b.n	8001782 <HAL_RCC_OscConfig+0xa22>
 8001766:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800176a:	2202      	movs	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f2a3 	rbit	r2, r3
 8001778:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	4b89      	ldr	r3, [pc, #548]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001786:	2102      	movs	r1, #2
 8001788:	6011      	str	r1, [r2, #0]
 800178a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	fa92 f1a2 	rbit	r1, r2
 8001794:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001798:	6011      	str	r1, [r2, #0]
  return result;
 800179a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	fab2 f282 	clz	r2, r2
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	f002 021f 	and.w	r2, r2, #31
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f202 	lsl.w	r2, r1, r2
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1a0      	bne.n	80016fe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	4a76      	ldr	r2, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 81c2 	beq.w	8001b60 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	f000 819c 	beq.w	8001b22 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	f040 8114 	bne.w	8001a1e <HAL_RCC_OscConfig+0xcbe>
 80017f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800180e:	601a      	str	r2, [r3, #0]
  return result;
 8001810:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001814:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	461a      	mov	r2, r3
 8001828:	2300      	movs	r3, #0
 800182a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7fe ffb2 	bl	8000794 <HAL_GetTick>
 8001830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	e009      	b.n	800184a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7fe ffad 	bl	8000794 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e18b      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
 800184a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800184e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001862:	601a      	str	r2, [r3, #0]
  return result;
 8001864:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001868:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0xb24>
 800187e:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	e01b      	b.n	80018bc <HAL_RCC_OscConfig+0xb5c>
 8001884:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800188c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018c4:	6011      	str	r1, [r2, #0]
 80018c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	fa92 f1a2 	rbit	r1, r2
 80018d0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80018d4:	6011      	str	r1, [r2, #0]
  return result;
 80018d6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	fab2 f282 	clz	r2, r2
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f042 0220 	orr.w	r2, r2, #32
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f002 021f 	and.w	r2, r2, #31
 80018ec:	2101      	movs	r1, #1
 80018ee:	fa01 f202 	lsl.w	r2, r1, r2
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d19e      	bne.n	8001836 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	430b      	orrs	r3, r1
 800190e:	4925      	ldr	r1, [pc, #148]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
 8001914:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800191c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800192c:	601a      	str	r2, [r3, #0]
  return result;
 800192e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001932:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800193e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	461a      	mov	r2, r3
 8001946:	2301      	movs	r3, #1
 8001948:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7fe ff23 	bl	8000794 <HAL_GetTick>
 800194e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001952:	e009      	b.n	8001968 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7fe ff1e 	bl	8000794 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0fc      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
 8001968:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800196c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001980:	601a      	str	r2, [r3, #0]
  return result;
 8001982:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001986:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0xc48>
 800199c:	4b01      	ldr	r3, [pc, #4]	; (80019a4 <HAL_RCC_OscConfig+0xc44>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	e01e      	b.n	80019e0 <HAL_RCC_OscConfig+0xc80>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <HAL_RCC_OscConfig+0xe0c>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019e8:	6011      	str	r1, [r2, #0]
 80019ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	fa92 f1a2 	rbit	r1, r2
 80019f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019f8:	6011      	str	r1, [r2, #0]
  return result;
 80019fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	fab2 f282 	clz	r2, r2
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f002 021f 	and.w	r2, r2, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d09b      	beq.n	8001954 <HAL_RCC_OscConfig+0xbf4>
 8001a1c:	e0a0      	b.n	8001b60 <HAL_RCC_OscConfig+0xe00>
 8001a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a36:	601a      	str	r2, [r3, #0]
  return result;
 8001a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7fe fe9e 	bl	8000794 <HAL_GetTick>
 8001a58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5c:	e009      	b.n	8001a72 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7fe fe99 	bl	8000794 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e077      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
 8001a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	601a      	str	r2, [r3, #0]
  return result;
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0xd4c>
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_RCC_OscConfig+0xe0c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	e01b      	b.n	8001ae4 <HAL_RCC_OscConfig+0xd84>
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f107 0320 	add.w	r3, r7, #32
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f107 0318 	add.w	r3, r7, #24
 8001aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_RCC_OscConfig+0xe0c>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f107 0210 	add.w	r2, r7, #16
 8001ae8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001aec:	6011      	str	r1, [r2, #0]
 8001aee:	f107 0210 	add.w	r2, r7, #16
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	fa92 f1a2 	rbit	r1, r2
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	6011      	str	r1, [r2, #0]
  return result;
 8001afe:	f107 020c 	add.w	r2, r7, #12
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	fab2 f282 	clz	r2, r2
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f042 0220 	orr.w	r2, r2, #32
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f002 021f 	and.w	r2, r2, #31
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d19e      	bne.n	8001a5e <HAL_RCC_OscConfig+0xcfe>
 8001b20:	e01e      	b.n	8001b60 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e018      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_RCC_OscConfig+0xe0c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b38:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b09e      	sub	sp, #120	; 0x78
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e162      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b90      	ldr	r3, [pc, #576]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d910      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	498b      	ldr	r1, [pc, #556]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e14a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	497f      	ldr	r1, [pc, #508]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80dc 	beq.w	8001d9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d13c      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xf6>
 8001bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xa6>
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e00f      	b.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
 8001c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	667b      	str	r3, [r7, #100]	; 0x64
 8001c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
 8001c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c3e:	fa92 f2a2 	rbit	r2, r2
 8001c42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f002 021f 	and.w	r2, r2, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d17b      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0f3      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d13c      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x178>
 8001c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x128>
 8001c92:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e00f      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
 8001c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d13a      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b2      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x1a0>
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e00d      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1bc>
 8001d10:	2302      	movs	r3, #2
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	61ba      	str	r2, [r7, #24]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	fa92 f2a2 	rbit	r2, r2
 8001d36:	617a      	str	r2, [r7, #20]
  return result;
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	fab2 f282 	clz	r2, r2
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f042 0220 	orr.w	r2, r2, #32
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f002 021f 	and.w	r2, r2, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e079      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	491a      	ldr	r1, [pc, #104]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7fe fd12 	bl	8000794 <HAL_GetTick>
 8001d70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7fe fd0e 	bl	8000794 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e061      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d214      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4906      	ldr	r1, [pc, #24]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e040      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	491a      	ldr	r1, [pc, #104]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4912      	ldr	r1, [pc, #72]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e12:	f000 f829 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e20:	22f0      	movs	r2, #240	; 0xf0
 8001e22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	fa92 f2a2 	rbit	r2, r2
 8001e2a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	fab2 f282 	clz	r2, r2
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	40d3      	lsrs	r3, r2
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x2ec>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_RCC_ClockConfig+0x2f0>)
 8001e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_RCC_ClockConfig+0x2f4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fc60 	bl	800070c <HAL_InitTick>
  
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3778      	adds	r7, #120	; 0x78
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08003160 	.word	0x08003160
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b08b      	sub	sp, #44	; 0x2c
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x30>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x36>
 8001e96:	e03c      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e9a:	623b      	str	r3, [r7, #32]
      break;
 8001e9c:	e03c      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ea4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ea8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	fa92 f2a2 	rbit	r2, r2
 8001eb0:	607a      	str	r2, [r7, #4]
  return result;
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	fab2 f282 	clz	r2, r2
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	40d3      	lsrs	r3, r2
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	220f      	movs	r2, #15
 8001ecc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	60fa      	str	r2, [r7, #12]
  return result;
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	40d3      	lsrs	r3, r2
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f14:	623b      	str	r3, [r7, #32]
      break;
 8001f16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f18:	6a3b      	ldr	r3, [r7, #32]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	372c      	adds	r7, #44	; 0x2c
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	08003178 	.word	0x08003178
 8001f34:	08003188 	.word	0x08003188
 8001f38:	003d0900 	.word	0x003d0900

08001f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000000 	.word	0x20000000

08001f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f5a:	f7ff ffef 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	fa92 f2a2 	rbit	r2, r2
 8001f74:	603a      	str	r2, [r7, #0]
  return result;
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	40d3      	lsrs	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08003170 	.word	0x08003170

08001f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f9e:	f7ff ffcd 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001fac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	fa92 f2a2 	rbit	r2, r2
 8001fb8:	603a      	str	r2, [r7, #0]
  return result;
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	40d3      	lsrs	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08003170 	.word	0x08003170

08001fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e07c      	b.n	80020e8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d106      	bne.n	800200e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe fa65 	bl	80004d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002024:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800202e:	d902      	bls.n	8002036 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e002      	b.n	800203c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002044:	d007      	beq.n	8002056 <HAL_SPI_Init+0x7a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800204e:	d002      	beq.n	8002056 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10b      	bne.n	8002076 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002066:	d903      	bls.n	8002070 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
 800206e:	e002      	b.n	8002076 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	ea42 0103 	orr.w	r1, r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	f003 0204 	and.w	r2, r3, #4
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	ea42 0103 	orr.w	r1, r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020fe:	2301      	movs	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_SPI_TransmitReceive+0x26>
 8002112:	2302      	movs	r3, #2
 8002114:	e1fb      	b.n	800250e <HAL_SPI_TransmitReceive+0x41e>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800211e:	f7fe fb39 	bl	8000794 <HAL_GetTick>
 8002122:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800212a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800213a:	7efb      	ldrb	r3, [r7, #27]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d00e      	beq.n	800215e <HAL_SPI_TransmitReceive+0x6e>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002146:	d106      	bne.n	8002156 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <HAL_SPI_TransmitReceive+0x66>
 8002150:	7efb      	ldrb	r3, [r7, #27]
 8002152:	2b04      	cmp	r3, #4
 8002154:	d003      	beq.n	800215e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800215c:	e1cd      	b.n	80024fa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_SPI_TransmitReceive+0x80>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_SPI_TransmitReceive+0x80>
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d103      	bne.n	8002178 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002176:	e1c0      	b.n	80024fa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b04      	cmp	r3, #4
 8002182:	d003      	beq.n	800218c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2205      	movs	r2, #5
 8002188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	887a      	ldrh	r2, [r7, #2]
 80021b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021ce:	d802      	bhi.n	80021d6 <HAL_SPI_TransmitReceive+0xe6>
 80021d0:	8a3b      	ldrh	r3, [r7, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d908      	bls.n	80021e8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	e007      	b.n	80021f8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d007      	beq.n	8002216 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800221e:	d97c      	bls.n	800231a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_SPI_TransmitReceive+0x13e>
 8002228:	8a7b      	ldrh	r3, [r7, #18]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d169      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	1c9a      	adds	r2, r3, #2
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002252:	e056      	b.n	8002302 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d11b      	bne.n	800229a <HAL_SPI_TransmitReceive+0x1aa>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <HAL_SPI_TransmitReceive+0x1aa>
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	2b01      	cmp	r3, #1
 8002270:	d113      	bne.n	800229a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	1c9a      	adds	r2, r3, #2
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d11c      	bne.n	80022e2 <HAL_SPI_TransmitReceive+0x1f2>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d016      	beq.n	80022e2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	b292      	uxth	r2, r2
 80022c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022e2:	f7fe fa57 	bl	8000794 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d807      	bhi.n	8002302 <HAL_SPI_TransmitReceive+0x212>
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d003      	beq.n	8002302 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002300:	e0fb      	b.n	80024fa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1a3      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x164>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d19d      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x164>
 8002318:	e0df      	b.n	80024da <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_SPI_TransmitReceive+0x23a>
 8002322:	8a7b      	ldrh	r3, [r7, #18]
 8002324:	2b01      	cmp	r3, #1
 8002326:	f040 80cb 	bne.w	80024c0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d912      	bls.n	800235a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	1c9a      	adds	r2, r3, #2
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b02      	subs	r3, #2
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002358:	e0b2      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	330c      	adds	r3, #12
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002380:	e09e      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d134      	bne.n	80023fa <HAL_SPI_TransmitReceive+0x30a>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d02f      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x30a>
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	2b01      	cmp	r3, #1
 800239e:	d12c      	bne.n	80023fa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d912      	bls.n	80023d0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	881a      	ldrh	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	1c9a      	adds	r2, r3, #2
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b02      	subs	r3, #2
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023ce:	e012      	b.n	80023f6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330c      	adds	r3, #12
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d148      	bne.n	800249a <HAL_SPI_TransmitReceive+0x3aa>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d042      	beq.n	800249a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d923      	bls.n	8002468 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	b292      	uxth	r2, r2
 800242c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	1c9a      	adds	r2, r3, #2
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b02      	subs	r3, #2
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d81f      	bhi.n	8002496 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	e016      	b.n	8002496 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f103 020c 	add.w	r2, r3, #12
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002496:	2301      	movs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800249a:	f7fe f97b 	bl	8000794 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d803      	bhi.n	80024b2 <HAL_SPI_TransmitReceive+0x3c2>
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d102      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x3c8>
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80024be:	e01c      	b.n	80024fa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f47f af5b 	bne.w	8002382 <HAL_SPI_TransmitReceive+0x292>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f47f af54 	bne.w	8002382 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fa10 	bl	8002904 <SPI_EndRxTxTransaction>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	661a      	str	r2, [r3, #96]	; 0x60
 80024f6:	e000      	b.n	80024fa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80024f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800250a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800250e:	4618      	mov	r0, r3
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
    return;
 800255a:	e0d8      	b.n	800270e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_SPI_IRQHandler+0x66>
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	09db      	lsrs	r3, r3, #7
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
    return;
 800257c:	e0c7      	b.n	800270e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_SPI_IRQHandler+0x8c>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80b5 	beq.w	800270e <HAL_SPI_IRQHandler+0x1f6>
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80ae 	beq.w	800270e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d023      	beq.n	8002606 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d011      	beq.n	80025ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f043 0204 	orr.w	r2, r3, #4
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	e00b      	b.n	8002606 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
        return;
 8002604:	e083      	b.n	800270e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d014      	beq.n	800263c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	f043 0208 	orr.w	r2, r3, #8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	2b00      	cmp	r3, #0
 8002668:	d050      	beq.n	800270c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002678:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <HAL_SPI_IRQHandler+0x17e>
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d034      	beq.n	8002700 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0203 	bic.w	r2, r2, #3
 80026a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d011      	beq.n	80026d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_SPI_IRQHandler+0x1fc>)
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe f987 	bl	80009ce <HAL_DMA_Abort_IT>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_SPI_IRQHandler+0x1fc>)
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe f971 	bl	80009ce <HAL_DMA_Abort_IT>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80026fe:	e003      	b.n	8002708 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f809 	bl	8002718 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002706:	e000      	b.n	800270a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002708:	bf00      	nop
    return;
 800270a:	bf00      	nop
 800270c:	bf00      	nop
  }
}
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	0800272d 	.word	0x0800272d

08002718 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ffe5 	bl	8002718 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002766:	e04c      	b.n	8002802 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d048      	beq.n	8002802 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002770:	f7fe f810 	bl	8000794 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d902      	bls.n	8002786 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d13d      	bne.n	8002802 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279e:	d111      	bne.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a8:	d004      	beq.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b2:	d107      	bne.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027cc:	d10f      	bne.n	80027ee <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e00f      	b.n	8002822 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	429a      	cmp	r2, r3
 800281e:	d1a3      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002838:	e057      	b.n	80028ea <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002840:	d106      	bne.n	8002850 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d048      	beq.n	80028ea <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002858:	f7fd ff9c 	bl	8000794 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d902      	bls.n	800286e <SPI_WaitFifoStateUntilTimeout+0x44>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d13d      	bne.n	80028ea <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800287c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002886:	d111      	bne.n	80028ac <SPI_WaitFifoStateUntilTimeout+0x82>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002890:	d004      	beq.n	800289c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d107      	bne.n	80028ac <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b4:	d10f      	bne.n	80028d6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e008      	b.n	80028fc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d19f      	bne.n	800283a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff ff84 	bl	800282a <SPI_WaitFifoStateUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e027      	b.n	8002988 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2200      	movs	r2, #0
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7ff ff07 	bl	8002756 <SPI_WaitFlagStateUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e014      	b.n	8002988 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff ff5d 	bl	800282a <SPI_WaitFifoStateUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e000      	b.n	8002988 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e040      	b.n	8002a24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd fdda 	bl	800056c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f82c 	bl	8002a2c <UART_SetConfig>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e022      	b.n	8002a24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f9a2 	bl	8002d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fa29 	bl	8002e74 <UART_CheckIdleState>
 8002a22:	4603      	mov	r3, r0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4ba2      	ldr	r3, [pc, #648]	; (8002ce4 <UART_SetConfig+0x2b8>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	6939      	ldr	r1, [r7, #16]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a90      	ldr	r2, [pc, #576]	; (8002ce8 <UART_SetConfig+0x2bc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d121      	bne.n	8002af0 <UART_SetConfig+0xc4>
 8002aac:	4b8f      	ldr	r3, [pc, #572]	; (8002cec <UART_SetConfig+0x2c0>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d817      	bhi.n	8002ae8 <UART_SetConfig+0xbc>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <UART_SetConfig+0x94>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ad1 	.word	0x08002ad1
 8002ac4:	08002add 	.word	0x08002add
 8002ac8:	08002ae3 	.word	0x08002ae3
 8002acc:	08002ad7 	.word	0x08002ad7
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	77fb      	strb	r3, [r7, #31]
 8002ad4:	e01e      	b.n	8002b14 <UART_SetConfig+0xe8>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	77fb      	strb	r3, [r7, #31]
 8002ada:	e01b      	b.n	8002b14 <UART_SetConfig+0xe8>
 8002adc:	2304      	movs	r3, #4
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e018      	b.n	8002b14 <UART_SetConfig+0xe8>
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	77fb      	strb	r3, [r7, #31]
 8002ae6:	e015      	b.n	8002b14 <UART_SetConfig+0xe8>
 8002ae8:	2310      	movs	r3, #16
 8002aea:	77fb      	strb	r3, [r7, #31]
 8002aec:	bf00      	nop
 8002aee:	e011      	b.n	8002b14 <UART_SetConfig+0xe8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a7e      	ldr	r2, [pc, #504]	; (8002cf0 <UART_SetConfig+0x2c4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d102      	bne.n	8002b00 <UART_SetConfig+0xd4>
 8002afa:	2300      	movs	r3, #0
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e009      	b.n	8002b14 <UART_SetConfig+0xe8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7b      	ldr	r2, [pc, #492]	; (8002cf4 <UART_SetConfig+0x2c8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d102      	bne.n	8002b10 <UART_SetConfig+0xe4>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	77fb      	strb	r3, [r7, #31]
 8002b0e:	e001      	b.n	8002b14 <UART_SetConfig+0xe8>
 8002b10:	2310      	movs	r3, #16
 8002b12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1c:	f040 8082 	bne.w	8002c24 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002b20:	7ffb      	ldrb	r3, [r7, #31]
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d85e      	bhi.n	8002be4 <UART_SetConfig+0x1b8>
 8002b26:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <UART_SetConfig+0x100>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002b51 	.word	0x08002b51
 8002b30:	08002b71 	.word	0x08002b71
 8002b34:	08002b91 	.word	0x08002b91
 8002b38:	08002be5 	.word	0x08002be5
 8002b3c:	08002bad 	.word	0x08002bad
 8002b40:	08002be5 	.word	0x08002be5
 8002b44:	08002be5 	.word	0x08002be5
 8002b48:	08002be5 	.word	0x08002be5
 8002b4c:	08002bcd 	.word	0x08002bcd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7ff fa00 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002b54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	005a      	lsls	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	61bb      	str	r3, [r7, #24]
        break;
 8002b6e:	e03c      	b.n	8002bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7ff fa12 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002b74:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	005a      	lsls	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	61bb      	str	r3, [r7, #24]
        break;
 8002b8e:	e02c      	b.n	8002bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6852      	ldr	r2, [r2, #4]
 8002ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	61bb      	str	r3, [r7, #24]
        break;
 8002baa:	e01e      	b.n	8002bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bac:	f7ff f95c 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8002bb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	005a      	lsls	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	441a      	add	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	61bb      	str	r3, [r7, #24]
        break;
 8002bca:	e00e      	b.n	8002bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	61bb      	str	r3, [r7, #24]
        break;
 8002be2:	e002      	b.n	8002bea <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	75fb      	strb	r3, [r7, #23]
        break;
 8002be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b0f      	cmp	r3, #15
 8002bee:	d916      	bls.n	8002c1e <UART_SetConfig+0x1f2>
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf6:	d212      	bcs.n	8002c1e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f023 030f 	bic.w	r3, r3, #15
 8002c00:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	897a      	ldrh	r2, [r7, #10]
 8002c1a:	60da      	str	r2, [r3, #12]
 8002c1c:	e07d      	b.n	8002d1a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
 8002c22:	e07a      	b.n	8002d1a <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d866      	bhi.n	8002cf8 <UART_SetConfig+0x2cc>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <UART_SetConfig+0x204>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c55 	.word	0x08002c55
 8002c34:	08002c73 	.word	0x08002c73
 8002c38:	08002c91 	.word	0x08002c91
 8002c3c:	08002cf9 	.word	0x08002cf9
 8002c40:	08002cad 	.word	0x08002cad
 8002c44:	08002cf9 	.word	0x08002cf9
 8002c48:	08002cf9 	.word	0x08002cf9
 8002c4c:	08002cf9 	.word	0x08002cf9
 8002c50:	08002ccb 	.word	0x08002ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c54:	f7ff f97e 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002c58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	085a      	lsrs	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	61bb      	str	r3, [r7, #24]
        break;
 8002c70:	e045      	b.n	8002cfe <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c72:	f7ff f991 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002c76:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	085a      	lsrs	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	61bb      	str	r3, [r7, #24]
        break;
 8002c8e:	e036      	b.n	8002cfe <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002c9a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6852      	ldr	r2, [r2, #4]
 8002ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	61bb      	str	r3, [r7, #24]
        break;
 8002caa:	e028      	b.n	8002cfe <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cac:	f7ff f8dc 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8002cb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	085a      	lsrs	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	441a      	add	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	61bb      	str	r3, [r7, #24]
        break;
 8002cc8:	e019      	b.n	8002cfe <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	61bb      	str	r3, [r7, #24]
        break;
 8002ce0:	e00d      	b.n	8002cfe <UART_SetConfig+0x2d2>
 8002ce2:	bf00      	nop
 8002ce4:	efff69f3 	.word	0xefff69f3
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40004400 	.word	0x40004400
 8002cf4:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	75fb      	strb	r3, [r7, #23]
        break;
 8002cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d908      	bls.n	8002d16 <UART_SetConfig+0x2ea>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0a:	d204      	bcs.n	8002d16 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	e001      	b.n	8002d1a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01a      	beq.n	8002e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e2e:	d10a      	bne.n	8002e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e82:	f7fd fc87 	bl	8000794 <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d10e      	bne.n	8002eb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f82a 	bl	8002efe <UART_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e020      	b.n	8002ef6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d10e      	bne.n	8002ee0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f814 	bl	8002efe <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e00a      	b.n	8002ef6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0e:	e05d      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d059      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f18:	f7fd fc3c 	bl	8000794 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d302      	bcc.n	8002f2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11b      	bne.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e042      	b.n	8002fec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d02b      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f82:	d123      	bne.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f8c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e00f      	b.n	8002fec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d092      	beq.n	8002f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <tmc4671_readInt>:
extern uint8_t tmc4671_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int32_t tmc4671_readInt(uint8_t motor, uint8_t address)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	71fb      	strb	r3, [r7, #7]
 8003000:	4613      	mov	r3, r2
 8003002:	71bb      	strb	r3, [r7, #6]
	// clear write bit
	address &= 0x7F;
 8003004:	79bb      	ldrb	r3, [r7, #6]
 8003006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800300a:	71bb      	strb	r3, [r7, #6]

	// write address
	tmc4671_readwriteByte(motor, address, false);
 800300c:	79b9      	ldrb	r1, [r7, #6]
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2200      	movs	r2, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fa0c 	bl	8000430 <tmc4671_readwriteByte>

	// read data
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2200      	movs	r2, #0
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fa06 	bl	8000430 <tmc4671_readwriteByte>
 8003024:	4603      	mov	r3, r0
 8003026:	60fb      	str	r3, [r7, #12]
	value <<= 8;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	60fb      	str	r3, [r7, #12]
	value |= tmc4671_readwriteByte(motor, 0, false);
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2200      	movs	r2, #0
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd f9fb 	bl	8000430 <tmc4671_readwriteByte>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
	value <<= 8;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	60fb      	str	r3, [r7, #12]
	value |= tmc4671_readwriteByte(motor, 0, false);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	2200      	movs	r2, #0
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd f9ed 	bl	8000430 <tmc4671_readwriteByte>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
	value <<= 8;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	60fb      	str	r3, [r7, #12]
	value |= tmc4671_readwriteByte(motor, 0, true);
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	2201      	movs	r2, #1
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd f9df 	bl	8000430 <tmc4671_readwriteByte>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

	return value;
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <tmc4671_writeInt>:

void tmc4671_writeInt(uint8_t motor, uint8_t address, int32_t value)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	603a      	str	r2, [r7, #0]
 8003090:	71fb      	strb	r3, [r7, #7]
 8003092:	460b      	mov	r3, r1
 8003094:	71bb      	strb	r3, [r7, #6]
	// write address
	tmc4671_readwriteByte(motor, address|0x80, false);
 8003096:	79bb      	ldrb	r3, [r7, #6]
 8003098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800309c:	b2d9      	uxtb	r1, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	2200      	movs	r2, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f9c4 	bl	8000430 <tmc4671_readwriteByte>

	// write value
	tmc4671_readwriteByte(motor, 0xFF & (value>>24), false);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	0e1b      	lsrs	r3, r3, #24
 80030ac:	b2d9      	uxtb	r1, r3
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	2200      	movs	r2, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd f9bc 	bl	8000430 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>16), false);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	141b      	asrs	r3, r3, #16
 80030bc:	b2d9      	uxtb	r1, r3
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2200      	movs	r2, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd f9b4 	bl	8000430 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>8), false);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	121b      	asrs	r3, r3, #8
 80030cc:	b2d9      	uxtb	r1, r3
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	2200      	movs	r2, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd f9ac 	bl	8000430 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2d9      	uxtb	r1, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	2201      	movs	r2, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd f9a5 	bl	8000430 <tmc4671_readwriteByte>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <__libc_init_array>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	4e0d      	ldr	r6, [pc, #52]	; (8003128 <__libc_init_array+0x38>)
 80030f4:	4c0d      	ldr	r4, [pc, #52]	; (800312c <__libc_init_array+0x3c>)
 80030f6:	1ba4      	subs	r4, r4, r6
 80030f8:	10a4      	asrs	r4, r4, #2
 80030fa:	2500      	movs	r5, #0
 80030fc:	42a5      	cmp	r5, r4
 80030fe:	d109      	bne.n	8003114 <__libc_init_array+0x24>
 8003100:	4e0b      	ldr	r6, [pc, #44]	; (8003130 <__libc_init_array+0x40>)
 8003102:	4c0c      	ldr	r4, [pc, #48]	; (8003134 <__libc_init_array+0x44>)
 8003104:	f000 f820 	bl	8003148 <_init>
 8003108:	1ba4      	subs	r4, r4, r6
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	2500      	movs	r5, #0
 800310e:	42a5      	cmp	r5, r4
 8003110:	d105      	bne.n	800311e <__libc_init_array+0x2e>
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003118:	4798      	blx	r3
 800311a:	3501      	adds	r5, #1
 800311c:	e7ee      	b.n	80030fc <__libc_init_array+0xc>
 800311e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003122:	4798      	blx	r3
 8003124:	3501      	adds	r5, #1
 8003126:	e7f2      	b.n	800310e <__libc_init_array+0x1e>
 8003128:	08003198 	.word	0x08003198
 800312c:	08003198 	.word	0x08003198
 8003130:	08003198 	.word	0x08003198
 8003134:	0800319c 	.word	0x0800319c

08003138 <memset>:
 8003138:	4402      	add	r2, r0
 800313a:	4603      	mov	r3, r0
 800313c:	4293      	cmp	r3, r2
 800313e:	d100      	bne.n	8003142 <memset+0xa>
 8003140:	4770      	bx	lr
 8003142:	f803 1b01 	strb.w	r1, [r3], #1
 8003146:	e7f9      	b.n	800313c <memset+0x4>

08003148 <_init>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	bf00      	nop
 800314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314e:	bc08      	pop	{r3}
 8003150:	469e      	mov	lr, r3
 8003152:	4770      	bx	lr

08003154 <_fini>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr
