
modFOC-TMCL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000663c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800681c  0800681c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08006910  08006910  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006910  08006910  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08006918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ac0  200001e8  08006b00  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ca8  08006b00  00026ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a6ec  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051e9  00000000  00000000  0004a904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  0004faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000032e0  00000000  00000000  00050a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa63  00000000  00000000  00053d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de2b  00000000  00000000  0007e793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2c93  00000000  00000000  0009c5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  0018f2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00013953  00000000  00000000  001927cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006804 	.word	0x08006804

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08006804 	.word	0x08006804

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2iz>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d215      	bcs.n	80008c2 <__aeabi_d2iz+0x36>
 8000896:	d511      	bpl.n	80008bc <__aeabi_d2iz+0x30>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d912      	bls.n	80008c8 <__aeabi_d2iz+0x3c>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008b2:	fa23 f002 	lsr.w	r0, r3, r2
 80008b6:	bf18      	it	ne
 80008b8:	4240      	negne	r0, r0
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d105      	bne.n	80008d4 <__aeabi_d2iz+0x48>
 80008c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008dc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	2400      	movs	r4, #0
{
 80008e0:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80008e6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_GPIO_Init+0x98>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS0_Pin|CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 80008f0:	4821      	ldr	r0, [pc, #132]	; (8000978 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f2:	f042 0220 	orr.w	r2, r2, #32
 80008f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80008f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008fa:	f002 0220 	and.w	r2, r2, #32
 80008fe:	9200      	str	r2, [sp, #0]
 8000900:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000904:	f042 0202 	orr.w	r2, r2, #2
 8000908:	64da      	str	r2, [r3, #76]	; 0x4c
 800090a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800090c:	f002 0202 	and.w	r2, r2, #2
 8000910:	9201      	str	r2, [sp, #4]
 8000912:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000916:	f042 0204 	orr.w	r2, r2, #4
 800091a:	64da      	str	r2, [r3, #76]	; 0x4c
 800091c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800091e:	f002 0204 	and.w	r2, r2, #4
 8000922:	9202      	str	r2, [sp, #8]
 8000924:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000928:	f042 0201 	orr.w	r2, r2, #1
 800092c:	64da      	str	r2, [r3, #76]	; 0x4c
 800092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, CS0_Pin|CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 8000936:	4622      	mov	r2, r4
 8000938:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, CS0_Pin|CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 800093e:	f000 fbd3 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS0_Pin|CS1_Pin|CS2_Pin;
 8000942:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000946:	2301      	movs	r3, #1
 8000948:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = CS0_Pin|CS1_Pin|CS2_Pin;
 800094e:	2200      	movs	r2, #0
 8000950:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pin = CS0_Pin|CS1_Pin|CS2_Pin;
 8000954:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	f000 facc 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX_SW_Pin;
 800095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000960:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(AUX_SW_GPIO_Port, &GPIO_InitStruct);
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(AUX_SW_GPIO_Port, &GPIO_InitStruct);
 8000966:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = AUX_SW_Pin;
 8000968:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(AUX_SW_GPIO_Port, &GPIO_InitStruct);
 800096c:	f000 fac2 	bl	8000ef4 <HAL_GPIO_Init>

}
 8000970:	b00a      	add	sp, #40	; 0x28
 8000972:	bd10      	pop	{r4, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	48000800 	.word	0x48000800
 800097c:	48000400 	.word	0x48000400

08000980 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
	for (int i = 0; i < len; i++)
 8000980:	1e10      	subs	r0, r2, #0
 8000982:	dd1a      	ble.n	80009ba <_write+0x3a>
{
 8000984:	b430      	push	{r4, r5}
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000986:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800098a:	180d      	adds	r5, r1, r0
 800098c:	f8d3 4e80 	ldr.w	r4, [r3, #3712]	; 0xe80
 8000990:	07e4      	lsls	r4, r4, #31
	{
		ITM_SendChar(*ptr++);
 8000992:	f101 0101 	add.w	r1, r1, #1
 8000996:	d50c      	bpl.n	80009b2 <_write+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000998:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800099c:	07e2      	lsls	r2, r4, #31
 800099e:	d508      	bpl.n	80009b2 <_write+0x32>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009a0:	681c      	ldr	r4, [r3, #0]
 80009a2:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80009a6:	b91c      	cbnz	r4, 80009b0 <_write+0x30>
    {
      __NOP();
 80009a8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009aa:	681c      	ldr	r4, [r3, #0]
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d0fb      	beq.n	80009a8 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 80009b2:	42a9      	cmp	r1, r5
 80009b4:	d1ea      	bne.n	800098c <_write+0xc>
	}
	return len;
}
 80009b6:	bc30      	pop	{r4, r5}
 80009b8:	4770      	bx	lr
 80009ba:	4770      	bx	lr

080009bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009bc:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80009be:	2100      	movs	r1, #0
{
 80009c0:	b0ab      	sub	sp, #172	; 0xac
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80009c2:	460c      	mov	r4, r1
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80009c4:	2238      	movs	r2, #56	; 0x38
 80009c6:	a806      	add	r0, sp, #24
 80009c8:	f004 ffbe 	bl	8005948 <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80009cc:	4621      	mov	r1, r4
 80009ce:	2254      	movs	r2, #84	; 0x54
 80009d0:	a815      	add	r0, sp, #84	; 0x54
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80009d2:	e9cd 4400 	strd	r4, r4, [sp]
 80009d6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80009da:	9404      	str	r4, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80009dc:	f004 ffb4 	bl	8005948 <memset>
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009e0:	4620      	mov	r0, r4
 80009e2:	f001 fb19 	bl	8002018 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
 80009e6:	2221      	movs	r2, #33	; 0x21
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009f0:	2401      	movs	r4, #1
 80009f2:	2502      	movs	r5, #2
 80009f4:	2203      	movs	r2, #3
 80009f6:	2304      	movs	r3, #4
 80009f8:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80009fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000a00:	2455      	movs	r4, #85	; 0x55
 8000a02:	2502      	movs	r5, #2
 8000a04:	2202      	movs	r2, #2
 8000a06:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
	RCC_OscInitStruct.PLL.PLLN = 85;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a0a:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8000a0e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f001 fb87 	bl	8002124 <HAL_RCC_OscConfig>
 8000a16:	b108      	cbz	r0, 8000a1c <SystemClock_Config+0x60>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a1a:	e7fe      	b.n	8000a1a <SystemClock_Config+0x5e>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	4603      	mov	r3, r0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a20:	2200      	movs	r2, #0
 8000a22:	2300      	movs	r3, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a24:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a26:	240f      	movs	r4, #15
 8000a28:	2503      	movs	r5, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a2a:	2104      	movs	r1, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000a30:	e9cd 4500 	strd	r4, r5, [sp]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a34:	f001 fdf0 	bl	8002618 <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <SystemClock_Config+0x84>
 8000a3c:	b672      	cpsid	i
	while (1)
 8000a3e:	e7fe      	b.n	8000a3e <SystemClock_Config+0x82>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a44:	a815      	add	r0, sp, #84	; 0x54
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a46:	9324      	str	r3, [sp, #144]	; 0x90
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a48:	9215      	str	r2, [sp, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4a:	f001 feef 	bl	800282c <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	b108      	cbz	r0, 8000a54 <SystemClock_Config+0x98>
 8000a50:	b672      	cpsid	i
	while (1)
 8000a52:	e7fe      	b.n	8000a52 <SystemClock_Config+0x96>
}
 8000a54:	b02b      	add	sp, #172	; 0xac
 8000a56:	bd30      	pop	{r4, r5, pc}

08000a58 <main>:
{
 8000a58:	b508      	push	{r3, lr}
	HAL_Init();
 8000a5a:	f000 f9a3 	bl	8000da4 <HAL_Init>
	SystemClock_Config();
 8000a5e:	f7ff ffad 	bl	80009bc <SystemClock_Config>
	MX_GPIO_Init();
 8000a62:	f7ff ff3b 	bl	80008dc <MX_GPIO_Init>
	MX_SPI2_Init();
 8000a66:	f000 f871 	bl	8000b4c <MX_SPI2_Init>
	MX_USB_Device_Init();
 8000a6a:	f004 fc67 	bl	800533c <MX_USB_Device_Init>
	RUN_MODE = HAL_GPIO_ReadPin(AUX_SW_GPIO_Port, AUX_SW_Pin);
 8000a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a72:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <main+0x80>)
 8000a74:	4c19      	ldr	r4, [pc, #100]	; (8000adc <main+0x84>)
 8000a76:	f000 fb31 	bl	80010dc <HAL_GPIO_ReadPin>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	bf18      	it	ne
 8000a7e:	2301      	movne	r3, #1
	tmc4671_disablePWM(DEFAULT_MC);
 8000a80:	2005      	movs	r0, #5
	RUN_MODE = HAL_GPIO_ReadPin(AUX_SW_GPIO_Port, AUX_SW_Pin);
 8000a82:	7023      	strb	r3, [r4, #0]
	tmc4671_disablePWM(DEFAULT_MC);
 8000a84:	f004 fa3e 	bl	8004f04 <tmc4671_disablePWM>
	tmc4671_writeInt(DEFAULT_MC, TMC4671_GPIO_dsADCI_CONFIG, 0x00000009);
 8000a88:	2209      	movs	r2, #9
 8000a8a:	217b      	movs	r1, #123	; 0x7b
 8000a8c:	2005      	movs	r0, #5
 8000a8e:	f004 fa19 	bl	8004ec4 <tmc4671_writeInt>
	HAL_Delay(1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 f9a8 	bl	8000de8 <HAL_Delay>
	tmc4671_writeInt(DEFAULT_MC, TMC4671_GPIO_dsADCI_CONFIG, 0x00010009);
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <main+0x88>)
 8000a9a:	217b      	movs	r1, #123	; 0x7b
 8000a9c:	2005      	movs	r0, #5
 8000a9e:	f004 fa11 	bl	8004ec4 <tmc4671_writeInt>
	HAL_Delay(1);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f000 f9a0 	bl	8000de8 <HAL_Delay>
	tmc4671_writeInt(DEFAULT_MC, TMC4671_GPIO_dsADCI_CONFIG, 0x00000009);
 8000aa8:	2209      	movs	r2, #9
 8000aaa:	217b      	movs	r1, #123	; 0x7b
 8000aac:	2005      	movs	r0, #5
 8000aae:	f004 fa09 	bl	8004ec4 <tmc4671_writeInt>
 8000ab2:	e002      	b.n	8000aba <main+0x62>
			HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 f997 	bl	8000de8 <HAL_Delay>
		if (RUN_MODE == RM_TMCL)
 8000aba:	7823      	ldrb	r3, [r4, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f9      	beq.n	8000ab4 <main+0x5c>
			tmcl_processCommand();
 8000ac0:	f004 fb98 	bl	80051f4 <tmcl_processCommand>
		if (RUN_MODE == RM_ESC)
 8000ac4:	7823      	ldrb	r3, [r4, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f4      	beq.n	8000ab4 <main+0x5c>
			tmcl_processCommand();
 8000aca:	f004 fb93 	bl	80051f4 <tmcl_processCommand>
		if (RUN_MODE == RM_ESC)
 8000ace:	7823      	ldrb	r3, [r4, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f5      	bne.n	8000ac0 <main+0x68>
 8000ad4:	e7ee      	b.n	8000ab4 <main+0x5c>
 8000ad6:	bf00      	nop
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	2000044e 	.word	0x2000044e
 8000ae0:	00010009 	.word	0x00010009

08000ae4 <tmc4671_readwriteByte>:
{
 8000ae4:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(CS0_GPIO_Port, (CS2_Pin * ((motor >> 2) & 0x01)) | (CS1_Pin * ((motor >> 1) & 0x01)) | (CS0_Pin * ((motor >> 0) & 0x01)), GPIO_PIN_SET);
 8000ae6:	f3c0 0440 	ubfx	r4, r0, #1, #1
 8000aea:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8000aee:	01e4      	lsls	r4, r4, #7
 8000af0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8000af4:	f000 0001 	and.w	r0, r0, #1
{
 8000af8:	b087      	sub	sp, #28
	HAL_GPIO_WritePin(CS0_GPIO_Port, (CS2_Pin * ((motor >> 2) & 0x01)) | (CS1_Pin * ((motor >> 1) & 0x01)) | (CS0_Pin * ((motor >> 0) & 0x01)), GPIO_PIN_SET);
 8000afa:	ea44 1480 	orr.w	r4, r4, r0, lsl #6
{
 8000afe:	460b      	mov	r3, r1
	HAL_GPIO_WritePin(CS0_GPIO_Port, (CS2_Pin * ((motor >> 2) & 0x01)) | (CS1_Pin * ((motor >> 1) & 0x01)) | (CS0_Pin * ((motor >> 0) & 0x01)), GPIO_PIN_SET);
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <tmc4671_readwriteByte+0x5c>)
{
 8000b02:	f88d 300f 	strb.w	r3, [sp, #15]
 8000b06:	4615      	mov	r5, r2
	HAL_GPIO_WritePin(CS0_GPIO_Port, (CS2_Pin * ((motor >> 2) & 0x01)) | (CS1_Pin * ((motor >> 1) & 0x01)) | (CS0_Pin * ((motor >> 0) & 0x01)), GPIO_PIN_SET);
 8000b08:	4621      	mov	r1, r4
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f000 faec 	bl	80010e8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, &data, &buffer, 1, 100);
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <tmc4671_readwriteByte+0x60>)
 8000b16:	2301      	movs	r3, #1
 8000b18:	f10d 0217 	add.w	r2, sp, #23
 8000b1c:	f10d 010f 	add.w	r1, sp, #15
 8000b20:	f002 f996 	bl	8002e50 <HAL_SPI_TransmitReceive>
	if (lastTransfer)
 8000b24:	b91d      	cbnz	r5, 8000b2e <tmc4671_readwriteByte+0x4a>
}
 8000b26:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000b2a:	b007      	add	sp, #28
 8000b2c:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin(CS0_GPIO_Port, (CS2_Pin * ((motor >> 2) & 0x01)) | (CS1_Pin * ((motor >> 1) & 0x01)) | (CS0_Pin * ((motor >> 0) & 0x01)), GPIO_PIN_RESET);
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <tmc4671_readwriteByte+0x5c>)
 8000b30:	4621      	mov	r1, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	f000 fad8 	bl	80010e8 <HAL_GPIO_WritePin>
}
 8000b38:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000b3c:	b007      	add	sp, #28
 8000b3e:	bd30      	pop	{r4, r5, pc}
 8000b40:	48000800 	.word	0x48000800
 8000b44:	20000458 	.word	0x20000458

08000b48 <Error_Handler>:
 8000b48:	b672      	cpsid	i
	while (1)
 8000b4a:	e7fe      	b.n	8000b4a <Error_Handler+0x2>

08000b4c <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_SPI2_Init+0x48>)
{
 8000b4e:	b538      	push	{r3, r4, r5, lr}
  hspi2.Instance = SPI2;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_SPI2_Init+0x4c>)
 8000b52:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b54:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b5c:	2301      	movs	r3, #1
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b5e:	2502      	movs	r5, #2
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b60:	e9c0 5304 	strd	r5, r3, [r0, #16]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b64:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b68:	2300      	movs	r3, #0
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b6a:	6041      	str	r1, [r0, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	60c2      	str	r2, [r0, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b6e:	2120      	movs	r1, #32
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8000b70:	2207      	movs	r2, #7
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b72:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b7a:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hspi2.Init.CRCPolynomial = 7;
 8000b7e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b80:	6083      	str	r3, [r0, #8]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b82:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b84:	f002 f8de 	bl	8002d44 <HAL_SPI_Init>
 8000b88:	b900      	cbnz	r0, 8000b8c <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b8a:	bd38      	pop	{r3, r4, r5, pc}
 8000b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000b90:	f7ff bfda 	b.w	8000b48 <Error_Handler>
 8000b94:	20000458 	.word	0x20000458
 8000b98:	40003800 	.word	0x40003800

08000b9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b9c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 8000b9e:	6801      	ldr	r1, [r0, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_SPI_MspInit+0x6c>)
{
 8000ba2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI2)
 8000ba6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000bac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000bb0:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI2)
 8000bb2:	d001      	beq.n	8000bb8 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bb4:	b009      	add	sp, #36	; 0x24
 8000bb6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bbc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bc8:	659a      	str	r2, [r3, #88]	; 0x58
 8000bca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bcc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bd0:	9200      	str	r2, [sp, #0]
 8000bd2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd6:	f042 0202 	orr.w	r2, r2, #2
 8000bda:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be4:	2305      	movs	r3, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bf0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
 8000bf4:	2502      	movs	r5, #2
 8000bf6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f000 f979 	bl	8000ef4 <HAL_GPIO_Init>
}
 8000c02:	b009      	add	sp, #36	; 0x24
 8000c04:	bd30      	pop	{r4, r5, pc}
 8000c06:	bf00      	nop
 8000c08:	40003800 	.word	0x40003800
 8000c0c:	48000400 	.word	0x48000400

08000c10 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_MspInit+0x30>)
 8000c12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c14:	f042 0201 	orr.w	r2, r2, #1
 8000c18:	661a      	str	r2, [r3, #96]	; 0x60
 8000c1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000c1c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	f002 0201 	and.w	r2, r2, #1
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c3a:	f001 ba6b 	b.w	8002114 <HAL_PWREx_DisableUCPDDeadBattery>
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler>
 8000c46:	bf00      	nop

08000c48 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <HardFault_Handler>
 8000c4a:	bf00      	nop

08000c4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler>
 8000c4e:	bf00      	nop

08000c50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <BusFault_Handler>
 8000c52:	bf00      	nop

08000c54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler>
 8000c56:	bf00      	nop

08000c58 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <DebugMon_Handler>:
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <PendSV_Handler>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 b8ae 	b.w	8000dc4 <HAL_IncTick>

08000c68 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c68:	4801      	ldr	r0, [pc, #4]	; (8000c70 <USB_LP_IRQHandler+0x8>)
 8000c6a:	f000 babb 	b.w	80011e4 <HAL_PCD_IRQHandler>
 8000c6e:	bf00      	nop
 8000c70:	200069a4 	.word	0x200069a4

08000c74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c74:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	1e16      	subs	r6, r2, #0
 8000c78:	dd07      	ble.n	8000c8a <_read+0x16>
 8000c7a:	460c      	mov	r4, r1
 8000c7c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	d1f9      	bne.n	8000c7e <_read+0xa>
	}

return len;
}
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}
 8000c8e:	bf00      	nop

08000c90 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4770      	bx	lr

08000ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000ca8:	2000      	movs	r0, #0
 8000caa:	4770      	bx	lr

08000cac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cae:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8000cb0:	680b      	ldr	r3, [r1, #0]
{
 8000cb2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4c0c      	ldr	r4, [pc, #48]	; (8000ce8 <_sbrk+0x3c>)
 8000cb6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000cb8:	b12b      	cbz	r3, 8000cc6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4418      	add	r0, r3
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	d807      	bhi.n	8000cd0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000cc0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <_sbrk+0x40>)
 8000cc8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4418      	add	r0, r3
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d9f7      	bls.n	8000cc0 <_sbrk+0x14>
    errno = ENOMEM;
 8000cd0:	f004 fe02 	bl	80058d8 <__errno>
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	bd10      	pop	{r4, pc}
 8000ce0:	20000204 	.word	0x20000204
 8000ce4:	20020000 	.word	0x20020000
 8000ce8:	00000400 	.word	0x00000400
 8000cec:	20006ca8 	.word	0x20006ca8

08000cf0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <SystemInit+0x10>)
 8000cf2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000cf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d2e:	f7ff ffdf 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f004 fdd7 	bl	80058e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d36:	f7ff fe8f 	bl	8000a58 <main>

08000d3a <LoopForever>:

LoopForever:
    b LoopForever
 8000d3a:	e7fe      	b.n	8000d3a <LoopForever>
  ldr   r0, =_estack
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000d48:	08006918 	.word	0x08006918
  ldr r2, =_sbss
 8000d4c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000d50:	20006ca8 	.word	0x20006ca8

08000d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC1_2_IRQHandler>
	...

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_InitTick+0x40>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	b90b      	cbnz	r3, 8000d64 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d60:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000d62:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d64:	490d      	ldr	r1, [pc, #52]	; (8000d9c <HAL_InitTick+0x44>)
 8000d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d70:	6808      	ldr	r0, [r1, #0]
 8000d72:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d76:	f000 f8a3 	bl	8000ec0 <HAL_SYSTICK_Config>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d1ef      	bne.n	8000d60 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	2d0f      	cmp	r5, #15
 8000d82:	d8ed      	bhi.n	8000d60 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	4602      	mov	r2, r0
 8000d86:	4629      	mov	r1, r5
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f852 	bl	8000e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_InitTick+0x48>)
 8000d92:	4620      	mov	r0, r4
 8000d94:	601d      	str	r5, [r3, #0]
}
 8000d96:	bd38      	pop	{r3, r4, r5, pc}
 8000d98:	20000004 	.word	0x20000004
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008

08000da4 <HAL_Init>:
{
 8000da4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da6:	2003      	movs	r0, #3
 8000da8:	f000 f830 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ffd3 	bl	8000d58 <HAL_InitTick>
 8000db2:	b110      	cbz	r0, 8000dba <HAL_Init+0x16>
    status = HAL_ERROR;
 8000db4:	2401      	movs	r4, #1
}
 8000db6:	4620      	mov	r0, r4
 8000db8:	bd10      	pop	{r4, pc}
 8000dba:	4604      	mov	r4, r0
    HAL_MspInit();
 8000dbc:	f7ff ff28 	bl	8000c10 <HAL_MspInit>
}
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	bd10      	pop	{r4, pc}

08000dc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_IncTick+0x10>)
 8000dc6:	4904      	ldr	r1, [pc, #16]	; (8000dd8 <HAL_IncTick+0x14>)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	6809      	ldr	r1, [r1, #0]
 8000dcc:	440b      	add	r3, r1
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200004bc 	.word	0x200004bc
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ddc:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <HAL_GetTick+0x8>)
 8000dde:	6818      	ldr	r0, [r3, #0]
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200004bc 	.word	0x200004bc

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b538      	push	{r3, r4, r5, lr}
 8000dea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fff6 	bl	8000ddc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000df2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000df4:	d002      	beq.n	8000dfc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_Delay+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	1b43      	subs	r3, r0, r5
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d3fa      	bcc.n	8000dfc <HAL_Delay+0x14>
  {
  }
}
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4908      	ldr	r1, [pc, #32]	; (8000e30 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8000e0e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e12:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e14:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000e18:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e28:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8000e2c:	60cb      	str	r3, [r1, #12]
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_NVIC_SetPriority+0x68>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3e:	f1c3 0507 	rsb	r5, r3, #7
 8000e42:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e44:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	bf28      	it	cs
 8000e4a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4c:	2c06      	cmp	r4, #6
 8000e4e:	d919      	bls.n	8000e84 <HAL_NVIC_SetPriority+0x50>
 8000e50:	3b03      	subs	r3, #3
 8000e52:	f04f 34ff 	mov.w	r4, #4294967295
 8000e56:	409c      	lsls	r4, r3
 8000e58:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8000e60:	40ac      	lsls	r4, r5
 8000e62:	ea21 0104 	bic.w	r1, r1, r4
 8000e66:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000e68:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	db0c      	blt.n	8000e8a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e74:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e78:	0109      	lsls	r1, r1, #4
 8000e7a:	b2c9      	uxtb	r1, r1
 8000e7c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e80:	bc30      	pop	{r4, r5}
 8000e82:	4770      	bx	lr
 8000e84:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	4613      	mov	r3, r2
 8000e88:	e7e8      	b.n	8000e5c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_NVIC_SetPriority+0x6c>)
 8000e8c:	f000 000f 	and.w	r0, r0, #15
 8000e90:	0109      	lsls	r1, r1, #4
 8000e92:	4403      	add	r3, r0
 8000e94:	b2c9      	uxtb	r1, r1
 8000e96:	7619      	strb	r1, [r3, #24]
 8000e98:	bc30      	pop	{r4, r5}
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	e000ecfc 	.word	0xe000ecfc

08000ea4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	db07      	blt.n	8000eb8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_NVIC_EnableIRQ+0x18>)
 8000eaa:	f000 011f 	and.w	r1, r0, #31
 8000eae:	2301      	movs	r3, #1
 8000eb0:	0940      	lsrs	r0, r0, #5
 8000eb2:	408b      	lsls	r3, r1
 8000eb4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ec6:	d20e      	bcs.n	8000ee6 <HAL_SYSTICK_Config+0x26>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	4c08      	ldr	r4, [pc, #32]	; (8000ef0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	20f0      	movs	r0, #240	; 0xf0
 8000ed2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed8:	2107      	movs	r1, #7
  return (0UL);                                                     /* Function successful */
 8000eda:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8000ede:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	6019      	str	r1, [r3, #0]
 8000ee4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ef8:	680e      	ldr	r6, [r1, #0]
{
 8000efa:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	f000 808b 	beq.w	8001018 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f02:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 80010d8 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 8000f06:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8000f0e:	ea14 0c06 	ands.w	ip, r4, r6
 8000f12:	d07c      	beq.n	800100e <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f14:	684d      	ldr	r5, [r1, #4]
 8000f16:	f025 0a10 	bic.w	sl, r5, #16
 8000f1a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000f1e:	2a01      	cmp	r2, #1
 8000f20:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f24:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f28:	d979      	bls.n	800101e <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 8000f2a:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f2e:	fa02 f208 	lsl.w	r2, r2, r8
 8000f32:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f36:	fa04 f408 	lsl.w	r4, r4, r8
 8000f3a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000f3c:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f3e:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8000f40:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f42:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f46:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	fa02 f208 	lsl.w	r2, r2, r8
 8000f4c:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4e:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8000f50:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f52:	d55c      	bpl.n	800100e <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4c5a      	ldr	r4, [pc, #360]	; (80010c0 <HAL_GPIO_Init+0x1cc>)
 8000f56:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000f58:	f042 0201 	orr.w	r2, r2, #1
 8000f5c:	6622      	str	r2, [r4, #96]	; 0x60
 8000f5e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000f60:	f023 0403 	bic.w	r4, r3, #3
 8000f64:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000f68:	f002 0201 	and.w	r2, r2, #1
 8000f6c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000f70:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7c:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f84:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f88:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f8c:	d018      	beq.n	8000fc0 <HAL_GPIO_Init+0xcc>
 8000f8e:	4a4d      	ldr	r2, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x1d0>)
 8000f90:	4290      	cmp	r0, r2
 8000f92:	f000 8084 	beq.w	800109e <HAL_GPIO_Init+0x1aa>
 8000f96:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_GPIO_Init+0x1d4>)
 8000f98:	4290      	cmp	r0, r2
 8000f9a:	f000 8085 	beq.w	80010a8 <HAL_GPIO_Init+0x1b4>
 8000f9e:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_GPIO_Init+0x1d8>)
 8000fa0:	4290      	cmp	r0, r2
 8000fa2:	d076      	beq.n	8001092 <HAL_GPIO_Init+0x19e>
 8000fa4:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <HAL_GPIO_Init+0x1dc>)
 8000fa6:	4290      	cmp	r0, r2
 8000fa8:	f000 8084 	beq.w	80010b4 <HAL_GPIO_Init+0x1c0>
 8000fac:	4a49      	ldr	r2, [pc, #292]	; (80010d4 <HAL_GPIO_Init+0x1e0>)
 8000fae:	4290      	cmp	r0, r2
 8000fb0:	bf0c      	ite	eq
 8000fb2:	f04f 0805 	moveq.w	r8, #5
 8000fb6:	f04f 0806 	movne.w	r8, #6
 8000fba:	fa08 f209 	lsl.w	r2, r8, r9
 8000fbe:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc0:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 8000fc2:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8000fc6:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fca:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8000fcc:	bf54      	ite	pl
 8000fce:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000fd0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8000fd4:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8000fd8:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8000fde:	bf54      	ite	pl
 8000fe0:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000fe2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 8000fe6:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fea:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fee:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8000ff0:	bf54      	ite	pl
 8000ff2:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000ff4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8000ff8:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8000ffc:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001000:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8001002:	bf54      	ite	pl
 8001004:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001006:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 800100a:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 800100e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001010:	fa36 f203 	lsrs.w	r2, r6, r3
 8001014:	f47f af78 	bne.w	8000f08 <HAL_GPIO_Init+0x14>
  }
}
 8001018:	b003      	add	sp, #12
 800101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800101e:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001024:	fa02 f208 	lsl.w	r2, r2, r8
 8001028:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102c:	68cf      	ldr	r7, [r1, #12]
 800102e:	fa07 f708 	lsl.w	r7, r7, r8
 8001032:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8001036:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001038:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800103a:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001042:	465c      	mov	r4, fp
 8001044:	409c      	lsls	r4, r3
 8001046:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8001048:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800104a:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001050:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001054:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001058:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800105c:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8001060:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001062:	f47f af6d 	bne.w	8000f40 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8001066:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800106a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800106e:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001072:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	f04f 0a0f 	mov.w	sl, #15
 800107c:	fa0a fb02 	lsl.w	fp, sl, r2
 8001080:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001084:	690c      	ldr	r4, [r1, #16]
 8001086:	4094      	lsls	r4, r2
 8001088:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 800108c:	f8c9 4020 	str.w	r4, [r9, #32]
 8001090:	e756      	b.n	8000f40 <HAL_GPIO_Init+0x4c>
 8001092:	f04f 0803 	mov.w	r8, #3
 8001096:	fa08 f209 	lsl.w	r2, r8, r9
 800109a:	4317      	orrs	r7, r2
 800109c:	e790      	b.n	8000fc0 <HAL_GPIO_Init+0xcc>
 800109e:	2201      	movs	r2, #1
 80010a0:	fa02 f209 	lsl.w	r2, r2, r9
 80010a4:	4317      	orrs	r7, r2
 80010a6:	e78b      	b.n	8000fc0 <HAL_GPIO_Init+0xcc>
 80010a8:	f04f 0802 	mov.w	r8, #2
 80010ac:	fa08 f209 	lsl.w	r2, r8, r9
 80010b0:	4317      	orrs	r7, r2
 80010b2:	e785      	b.n	8000fc0 <HAL_GPIO_Init+0xcc>
 80010b4:	f04f 0804 	mov.w	r8, #4
 80010b8:	fa08 f209 	lsl.w	r2, r8, r9
 80010bc:	4317      	orrs	r7, r2
 80010be:	e77f      	b.n	8000fc0 <HAL_GPIO_Init+0xcc>
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	48000800 	.word	0x48000800
 80010cc:	48000c00 	.word	0x48000c00
 80010d0:	48001000 	.word	0x48001000
 80010d4:	48001400 	.word	0x48001400
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80010dc:	6903      	ldr	r3, [r0, #16]
 80010de:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80010e0:	bf14      	ite	ne
 80010e2:	2001      	movne	r0, #1
 80010e4:	2000      	moveq	r0, #0
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e8:	b10a      	cbz	r2, 80010ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ea:	6181      	str	r1, [r0, #24]
 80010ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ee:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d057      	beq.n	80011a8 <HAL_PCD_Init+0xb4>
{
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fa:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
{
 80010fe:	b087      	sub	sp, #28
 8001100:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001102:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001106:	2b00      	cmp	r3, #0
 8001108:	d049      	beq.n	800119e <HAL_PCD_Init+0xaa>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800110a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800110c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800110e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001112:	f002 f833 	bl	800317c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001116:	6865      	ldr	r5, [r4, #4]
 8001118:	b345      	cbz	r5, 800116c <HAL_PCD_Init+0x78>
 800111a:	2300      	movs	r3, #0
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800111c:	4618      	mov	r0, r3
    hpcd->IN_ep[i].is_in = 1U;
 800111e:	2701      	movs	r7, #1
 8001120:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001124:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	1c5e      	adds	r6, r3, #1
    hpcd->IN_ep[i].num = i;
 800112a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800112e:	86cb      	strh	r3, [r1, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	b2f3      	uxtb	r3, r6
 8001132:	42ab      	cmp	r3, r5
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001134:	e9c1 000e 	strd	r0, r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8001138:	f881 7029 	strb.w	r7, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800113c:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8001140:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001142:	d3ed      	bcc.n	8001120 <HAL_PCD_Init+0x2c>
 8001144:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001146:	4611      	mov	r1, r2
 8001148:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800114c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001150:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].num = i;
 8001152:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001156:	b2c2      	uxtb	r2, r0
 8001158:	42aa      	cmp	r2, r5
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800115a:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800115e:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001162:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001166:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116a:	d3ed      	bcc.n	8001148 <HAL_PCD_Init+0x54>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800116c:	4625      	mov	r5, r4
 800116e:	466e      	mov	r6, sp
 8001170:	f855 7b10 	ldr.w	r7, [r5], #16
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	6033      	str	r3, [r6, #0]
 800117c:	1d23      	adds	r3, r4, #4
 800117e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001180:	4638      	mov	r0, r7
 8001182:	f002 f805 	bl	8003190 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001186:	69e3      	ldr	r3, [r4, #28]
  hpcd->State = HAL_PCD_STATE_READY;
 8001188:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 800118a:	2500      	movs	r5, #0
  if (hpcd->Init.lpm_enable == 1U)
 800118c:	4293      	cmp	r3, r2
  hpcd->USB_Address = 0U;
 800118e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001192:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8001196:	d009      	beq.n	80011ac <HAL_PCD_Init+0xb8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8001198:	4628      	mov	r0, r5
}
 800119a:	b007      	add	sp, #28
 800119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800119e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80011a2:	f004 fa4b 	bl	800563c <HAL_PCD_MspInit>
 80011a6:	e7b0      	b.n	800110a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80011a8:	2001      	movs	r0, #1
}
 80011aa:	4770      	bx	lr
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011ac:	4620      	mov	r0, r4
 80011ae:	f000 ff17 	bl	8001fe0 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80011b2:	4628      	mov	r0, r5
}
 80011b4:	b007      	add	sp, #28
 80011b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b8 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80011b8:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d00e      	beq.n	80011de <HAL_PCD_Start+0x26>
{
 80011c0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80011c2:	2301      	movs	r3, #1
 80011c4:	4604      	mov	r4, r0
 80011c6:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011ca:	6800      	ldr	r0, [r0, #0]
 80011cc:	f001 ffcc 	bl	8003168 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	f002 fff3 	bl	80041bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80011dc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80011de:	2002      	movs	r0, #2
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011e8:	4604      	mov	r4, r0
 80011ea:	b083      	sub	sp, #12
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011ec:	6800      	ldr	r0, [r0, #0]
 80011ee:	f002 fff1 	bl	80041d4 <USB_ReadInterrupts>
 80011f2:	0403      	lsls	r3, r0, #16
 80011f4:	f100 80e4 	bmi.w	80013c0 <HAL_PCD_IRQHandler+0x1dc>
 80011f8:	6820      	ldr	r0, [r4, #0]
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011fa:	f002 ffeb 	bl	80041d4 <USB_ReadInterrupts>
 80011fe:	0546      	lsls	r6, r0, #21
 8001200:	f100 80c0 	bmi.w	8001384 <HAL_PCD_IRQHandler+0x1a0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001204:	6820      	ldr	r0, [r4, #0]
 8001206:	f002 ffe5 	bl	80041d4 <USB_ReadInterrupts>
 800120a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800120e:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001210:	d007      	beq.n	8001222 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001212:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800121a:	041b      	lsls	r3, r3, #16
 800121c:	0c1b      	lsrs	r3, r3, #16
 800121e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001222:	f002 ffd7 	bl	80041d4 <USB_ReadInterrupts>
 8001226:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800122a:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800122c:	d007      	beq.n	800123e <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800122e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001236:	041b      	lsls	r3, r3, #16
 8001238:	0c1b      	lsrs	r3, r3, #16
 800123a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800123e:	f002 ffc9 	bl	80041d4 <USB_ReadInterrupts>
 8001242:	04c5      	lsls	r5, r0, #19
 8001244:	d448      	bmi.n	80012d8 <HAL_PCD_IRQHandler+0xf4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001246:	6820      	ldr	r0, [r4, #0]
 8001248:	f002 ffc4 	bl	80041d4 <USB_ReadInterrupts>
 800124c:	0500      	lsls	r0, r0, #20
 800124e:	d469      	bmi.n	8001324 <HAL_PCD_IRQHandler+0x140>
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001250:	6820      	ldr	r0, [r4, #0]
 8001252:	f002 ffbf 	bl	80041d4 <USB_ReadInterrupts>
 8001256:	0601      	lsls	r1, r0, #24
 8001258:	d528      	bpl.n	80012ac <HAL_PCD_IRQHandler+0xc8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800125a:	6822      	ldr	r2, [r4, #0]
 800125c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800126c:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d172      	bne.n	800135a <HAL_PCD_IRQHandler+0x176>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001274:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001278:	b29b      	uxth	r3, r3
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001282:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001286:	b29b      	uxth	r3, r3
 8001288:	f043 0308 	orr.w	r3, r3, #8

      hpcd->LPM_State = LPM_L1;
 800128c:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800128e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8001292:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001296:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800129a:	f3c3 038d 	ubfx	r3, r3, #2, #14
 800129e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80012a2:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012a6:	4620      	mov	r0, r4
 80012a8:	f000 feb4 	bl	8002014 <HAL_PCDEx_LPM_Callback>
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80012ac:	6820      	ldr	r0, [r4, #0]
 80012ae:	f002 ff91 	bl	80041d4 <USB_ReadInterrupts>
 80012b2:	0582      	lsls	r2, r0, #22
 80012b4:	d459      	bmi.n	800136a <HAL_PCD_IRQHandler+0x186>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80012b6:	6820      	ldr	r0, [r4, #0]
 80012b8:	f002 ff8c 	bl	80041d4 <USB_ReadInterrupts>
 80012bc:	05c3      	lsls	r3, r0, #23
 80012be:	d508      	bpl.n	80012d2 <HAL_PCD_IRQHandler+0xee>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 80012d2:	b003      	add	sp, #12
 80012d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80012d8:	6822      	ldr	r2, [r4, #0]
 80012da:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80012de:	f023 0304 	bic.w	r3, r3, #4
 80012e2:	041b      	lsls	r3, r3, #16
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012ea:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80012ee:	f023 0308 	bic.w	r3, r3, #8
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80012fa:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	f000 8384 	beq.w	8001a0c <HAL_PCD_IRQHandler+0x828>
    HAL_PCD_ResumeCallback(hpcd);
 8001304:	4620      	mov	r0, r4
 8001306:	f004 f9f9 	bl	80056fc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800130a:	6820      	ldr	r0, [r4, #0]
 800130c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001314:	041b      	lsls	r3, r3, #16
 8001316:	0c1b      	lsrs	r3, r3, #16
 8001318:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800131c:	f002 ff5a 	bl	80041d4 <USB_ReadInterrupts>
 8001320:	0500      	lsls	r0, r0, #20
 8001322:	d595      	bpl.n	8001250 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001324:	6822      	ldr	r2, [r4, #0]
 8001326:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800132a:	b29b      	uxth	r3, r3
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001334:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001344:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001348:	b29b      	uxth	r3, r3
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001352:	4620      	mov	r0, r4
 8001354:	f004 f9c2 	bl	80056dc <HAL_PCD_SuspendCallback>
 8001358:	e77a      	b.n	8001250 <HAL_PCD_IRQHandler+0x6c>
      HAL_PCD_SuspendCallback(hpcd);
 800135a:	4620      	mov	r0, r4
 800135c:	f004 f9be 	bl	80056dc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001360:	6820      	ldr	r0, [r4, #0]
 8001362:	f002 ff37 	bl	80041d4 <USB_ReadInterrupts>
 8001366:	0582      	lsls	r2, r0, #22
 8001368:	d5a5      	bpl.n	80012b6 <HAL_PCD_IRQHandler+0xd2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800136a:	6822      	ldr	r2, [r4, #0]
 800136c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	0c1b      	lsrs	r3, r3, #16
 8001378:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800137c:	4620      	mov	r0, r4
 800137e:	f004 f997 	bl	80056b0 <HAL_PCD_SOFCallback>
 8001382:	e798      	b.n	80012b6 <HAL_PCD_IRQHandler+0xd2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800138a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001396:	4620      	mov	r0, r4
 8001398:	f004 f98e 	bl	80056b8 <HAL_PCD_ResetCallback>
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800139c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	f43f af2f 	beq.w	8001204 <HAL_PCD_IRQHandler+0x20>
  hpcd->USB_Address = address;
 80013a6:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80013a8:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013aa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80013ac:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80013b0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013b4:	4629      	mov	r1, r5
 80013b6:	f002 fefb 	bl	80041b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013ba:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8

  return HAL_OK;
 80013be:	e721      	b.n	8001204 <HAL_PCD_IRQHandler+0x20>
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013c0:	6825      	ldr	r5, [r4, #0]
 80013c2:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
 80013c6:	041f      	lsls	r7, r3, #16
 80013c8:	4628      	mov	r0, r5
 80013ca:	f57f af16 	bpl.w	80011fa <HAL_PCD_IRQHandler+0x16>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80013ce:	f8df b974 	ldr.w	fp, [pc, #2420]	; 8001d44 <HAL_PCD_IRQHandler+0xb60>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80013d2:	462a      	mov	r2, r5
 80013d4:	e011      	b.n	80013fa <HAL_PCD_IRQHandler+0x216>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013d6:	f011 0110 	ands.w	r1, r1, #16
 80013da:	f000 80fb 	beq.w	80015d4 <HAL_PCD_IRQHandler+0x3f0>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013de:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013e0:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013e4:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013e6:	f040 8126 	bne.w	8001636 <HAL_PCD_IRQHandler+0x452>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013ea:	041e      	lsls	r6, r3, #16
 80013ec:	f100 81f2 	bmi.w	80017d4 <HAL_PCD_IRQHandler+0x5f0>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013f0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80013f4:	041f      	lsls	r7, r3, #16
 80013f6:	f140 811c 	bpl.w	8001632 <HAL_PCD_IRQHandler+0x44e>
    wIstr = hpcd->Instance->ISTR;
 80013fa:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80013fe:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8001400:	f015 050f 	ands.w	r5, r5, #15
 8001404:	d0e7      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x1f2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001406:	fa0f f985 	sxth.w	r9, r5
 800140a:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800140e:	041e      	lsls	r6, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001410:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001412:	f100 809c 	bmi.w	800154e <HAL_PCD_IRQHandler+0x36a>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001416:	0639      	lsls	r1, r7, #24
 8001418:	d5ea      	bpl.n	80013f0 <HAL_PCD_IRQHandler+0x20c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800141a:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 800141e:	b29b      	uxth	r3, r3
 8001420:	ea03 030b 	and.w	r3, r3, fp
 8001424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001428:	eb09 0689 	add.w	r6, r9, r9, lsl #2
 800142c:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8001430:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8001434:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8001438:	2b02      	cmp	r3, #2
 800143a:	d12c      	bne.n	8001496 <HAL_PCD_IRQHandler+0x2b2>
 800143c:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
 8001440:	d129      	bne.n	8001496 <HAL_PCD_IRQHandler+0x2b2>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001442:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001446:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800144a:	f240 4202 	movw	r2, #1026	; 0x402
 800144e:	fa10 f181 	uxtah	r1, r0, r1
 8001452:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8001456:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800145a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800145e:	5a8a      	ldrh	r2, [r1, r2]
          if (ep->xfer_len > TxByteNbre)
 8001460:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001462:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001466:	4291      	cmp	r1, r2
 8001468:	f240 82ea 	bls.w	8001a40 <HAL_PCD_IRQHandler+0x85c>
            ep->xfer_len -= TxByteNbre;
 800146c:	1a89      	subs	r1, r1, r2
 800146e:	6419      	str	r1, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8001470:	2900      	cmp	r1, #0
 8001472:	f000 82e7 	beq.w	8001a44 <HAL_PCD_IRQHandler+0x860>
            ep->xfer_buff += TxByteNbre;
 8001476:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001478:	6c5e      	ldr	r6, [r3, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800147a:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 800147c:	4417      	add	r7, r2
        ep = &hpcd->IN_ep[epindex];
 800147e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8001482:	4432      	add	r2, r6
 8001484:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001486:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
            ep->xfer_buff += TxByteNbre;
 800148a:	63df      	str	r7, [r3, #60]	; 0x3c
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800148c:	f002 f914 	bl	80036b8 <USB_EPStartXfer>
 8001490:	6820      	ldr	r0, [r4, #0]
 8001492:	4602      	mov	r2, r0
 8001494:	e7ac      	b.n	80013f0 <HAL_PCD_IRQHandler+0x20c>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001496:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	f000 8121 	beq.w	80016e2 <HAL_PCD_IRQHandler+0x4fe>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014a0:	f896 9028 	ldrb.w	r9, [r6, #40]	; 0x28
 80014a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80014ac:	fa11 f383 	uxtah	r3, r1, r3
 80014b0:	f200 4e02 	addw	lr, r0, #1026	; 0x402
    if (ep->xfer_len > TxByteNbre)
 80014b4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80014b8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014bc:	f833 300e 	ldrh.w	r3, [r3, lr]
    if (ep->xfer_len > TxByteNbre)
 80014c0:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 80014c8:	459c      	cmp	ip, r3
 80014ca:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80014ce:	f200 822f 	bhi.w	8001930 <HAL_PCD_IRQHandler+0x74c>
 80014d2:	2300      	movs	r3, #0
 80014d4:	640b      	str	r3, [r1, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014d6:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 82c7 	bne.w	8001a6e <HAL_PCD_IRQHandler+0x88a>
 80014e0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014e4:	fa1e fe83 	uxtah	lr, lr, r3
 80014e8:	f83e 3039 	ldrh.w	r3, [lr, r9, lsl #3]
 80014ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80014f0:	041b      	lsls	r3, r3, #16
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	f82e 3039 	strh.w	r3, [lr, r9, lsl #3]
 80014f8:	f83e 3039 	ldrh.w	r3, [lr, r9, lsl #3]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001502:	f82e 3039 	strh.w	r3, [lr, r9, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001506:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 836a 	bne.w	8001be4 <HAL_PCD_IRQHandler+0xa00>
 8001510:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001514:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001518:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800151c:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001520:	b292      	uxth	r2, r2
 8001522:	5a83      	ldrh	r3, [r0, r2]
 8001524:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	0c1b      	lsrs	r3, r3, #16
 800152c:	5283      	strh	r3, [r0, r2]
 800152e:	5a83      	ldrh	r3, [r0, r2]
 8001530:	b29b      	uxth	r3, r3
 8001532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001536:	5283      	strh	r3, [r0, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001538:	4620      	mov	r0, r4
 800153a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800153e:	f004 f8ad 	bl	800569c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001542:	047b      	lsls	r3, r7, #17
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001544:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001546:	f100 8122 	bmi.w	800178e <HAL_PCD_IRQHandler+0x5aa>
 800154a:	4602      	mov	r2, r0
 800154c:	e130      	b.n	80017b0 <HAL_PCD_IRQHandler+0x5cc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800154e:	f830 2029 	ldrh.w	r2, [r0, r9, lsl #2]
 8001552:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001556:	4013      	ands	r3, r2
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 800155c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001560:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 8001564:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001568:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800156c:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001570:	2b00      	cmp	r3, #0
 8001572:	f040 8083 	bne.w	800167c <HAL_PCD_IRQHandler+0x498>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001576:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800157a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800157e:	f200 4606 	addw	r6, r0, #1030	; 0x406
 8001582:	fa16 f383 	uxtah	r3, r6, r3
 8001586:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800158a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (count != 0U)
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 8243 	bne.w	8001a1a <HAL_PCD_IRQHandler+0x836>
 8001594:	461e      	mov	r6, r3
        ep->xfer_count += count;
 8001596:	eb08 0305 	add.w	r3, r8, r5
 800159a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800159e:	e9d3 215f 	ldrd	r2, r1, [r3, #380]	; 0x17c
        ep->xfer_count += count;
 80015a2:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80015a6:	4432      	add	r2, r6
        ep->xfer_count += count;
 80015a8:	4430      	add	r0, r6
 80015aa:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80015ae:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80015b2:	b121      	cbz	r1, 80015be <HAL_PCD_IRQHandler+0x3da>
 80015b4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80015b8:	42b3      	cmp	r3, r6
 80015ba:	f240 8236 	bls.w	8001a2a <HAL_PCD_IRQHandler+0x846>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80015be:	44a8      	add	r8, r5
 80015c0:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 80015c4:	4620      	mov	r0, r4
 80015c6:	f898 1168 	ldrb.w	r1, [r8, #360]	; 0x168
 80015ca:	f004 f85d 	bl	8005688 <HAL_PCD_DataOutStageCallback>
 80015ce:	6820      	ldr	r0, [r4, #0]
 80015d0:	4602      	mov	r2, r0
 80015d2:	e720      	b.n	8001416 <HAL_PCD_IRQHandler+0x232>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015d4:	8803      	ldrh	r3, [r0, #0]
        ep->xfer_buff += ep->xfer_count;
 80015d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015d8:	b29b      	uxth	r3, r3
 80015da:	ea03 030b 	and.w	r3, r3, fp
 80015de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015e4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80015e8:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 80015ec:	f240 4302 	movw	r3, #1026	; 0x402
 80015f0:	fa10 f085 	uxtah	r0, r0, r5
 80015f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80015f8:	5ac3      	ldrh	r3, [r0, r3]
 80015fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80015fe:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001600:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001602:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001604:	4620      	mov	r0, r4
 8001606:	f004 f849 	bl	800569c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800160a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800160e:	b393      	cbz	r3, 8001676 <HAL_PCD_IRQHandler+0x492>
 8001610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001612:	bb83      	cbnz	r3, 8001676 <HAL_PCD_IRQHandler+0x492>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001614:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8001618:	6820      	ldr	r0, [r4, #0]
 800161a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800161e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001622:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001626:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800162a:	041f      	lsls	r7, r3, #16
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800162c:	4602      	mov	r2, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800162e:	f53f aee4 	bmi.w	80013fa <HAL_PCD_IRQHandler+0x216>
 8001632:	4610      	mov	r0, r2
 8001634:	e5e1      	b.n	80011fa <HAL_PCD_IRQHandler+0x16>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001636:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800163a:	f894 5168 	ldrb.w	r5, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800163e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001642:	f240 4306 	movw	r3, #1030	; 0x406
 8001646:	fa10 f181 	uxtah	r1, r0, r1
 800164a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800164e:	5acb      	ldrh	r3, [r1, r3]
 8001650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001654:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001658:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800165c:	f002 fdce 	bl	80041fc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001660:	6822      	ldr	r2, [r4, #0]
 8001662:	8811      	ldrh	r1, [r2, #0]
 8001664:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001668:	400b      	ands	r3, r1
 800166a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001670:	4620      	mov	r0, r4
 8001672:	f004 f803 	bl	800567c <HAL_PCD_SetupStageCallback>
 8001676:	6820      	ldr	r0, [r4, #0]
 8001678:	4602      	mov	r2, r0
 800167a:	e6b9      	b.n	80013f0 <HAL_PCD_IRQHandler+0x20c>
          if (ep->type == EP_TYPE_BULK)
 800167c:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8001680:	2b02      	cmp	r3, #2
 8001682:	f000 8209 	beq.w	8001a98 <HAL_PCD_IRQHandler+0x8b4>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001686:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800168a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800168e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	0c1b      	lsrs	r3, r3, #16
 800169a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80016a6:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 80016b0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016b4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80016b8:	f000 8195 	beq.w	80019e6 <HAL_PCD_IRQHandler+0x802>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016bc:	f200 4602 	addw	r6, r0, #1026	; 0x402
 80016c0:	fa16 f282 	uxtah	r2, r6, r2
 80016c4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80016c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f43f af61 	beq.w	8001594 <HAL_PCD_IRQHandler+0x3b0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80016d2:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80016d6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80016da:	461e      	mov	r6, r3
 80016dc:	f002 fd8e 	bl	80041fc <USB_ReadPMA>
 80016e0:	e759      	b.n	8001596 <HAL_PCD_IRQHandler+0x3b2>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016e2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016e6:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
 80016ea:	f200 4a06 	addw	sl, r0, #1030	; 0x406
 80016ee:	fa1a f383 	uxtah	r3, sl, r3
    if (ep->xfer_len >= TxByteNbre)
 80016f2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80016f6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016fa:	f833 303e 	ldrh.w	r3, [r3, lr, lsl #3]
    if (ep->xfer_len >= TxByteNbre)
 80016fe:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001702:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8001706:	459c      	cmp	ip, r3
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001708:	ea4f 09ce 	mov.w	r9, lr, lsl #3
    if (ep->xfer_len >= TxByteNbre)
 800170c:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8001710:	f080 80b3 	bcs.w	800187a <HAL_PCD_IRQHandler+0x696>
 8001714:	9b01      	ldr	r3, [sp, #4]
 8001716:	640b      	str	r3, [r1, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001718:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 8199 	bne.w	8001a54 <HAL_PCD_IRQHandler+0x870>
 8001722:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001726:	f209 4902 	addw	r9, r9, #1026	; 0x402
 800172a:	4481      	add	r9, r0
 800172c:	b292      	uxth	r2, r2
 800172e:	f839 3002 	ldrh.w	r3, [r9, r2]
 8001732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	0c1b      	lsrs	r3, r3, #16
 800173a:	f829 3002 	strh.w	r3, [r9, r2]
 800173e:	f839 3002 	ldrh.w	r3, [r9, r2]
 8001742:	b29b      	uxth	r3, r3
 8001744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001748:	f829 3002 	strh.w	r3, [r9, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800174c:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8001750:	2b00      	cmp	r3, #0
 8001752:	f040 8223 	bne.w	8001b9c <HAL_PCD_IRQHandler+0x9b8>
 8001756:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800175a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800175e:	fa1a f383 	uxtah	r3, sl, r3
 8001762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001766:	881a      	ldrh	r2, [r3, #0]
 8001768:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800176c:	0412      	lsls	r2, r2, #16
 800176e:	0c12      	lsrs	r2, r2, #16
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	b292      	uxth	r2, r2
 8001776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800177a:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800177c:	4620      	mov	r0, r4
 800177e:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001782:	f003 ff8b 	bl	800569c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001786:	047d      	lsls	r5, r7, #17
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001788:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800178a:	f53f aede 	bmi.w	800154a <HAL_PCD_IRQHandler+0x366>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800178e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8001792:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800179a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80017ae:	4602      	mov	r2, r0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80017b0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80017b4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017c2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80017c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ce:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 80017d2:	e60d      	b.n	80013f0 <HAL_PCD_IRQHandler+0x20c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017d4:	8802      	ldrh	r2, [r0, #0]
 80017d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017da:	4013      	ands	r3, r2
 80017dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e0:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017e2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80017e6:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 80017ea:	f240 4306 	movw	r3, #1030	; 0x406
 80017ee:	fa10 f282 	uxtah	r2, r0, r2
 80017f2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80017f6:	5ad3      	ldrh	r3, [r2, r3]
 80017f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017fc:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001800:	b193      	cbz	r3, 8001828 <HAL_PCD_IRQHandler+0x644>
 8001802:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001806:	b179      	cbz	r1, 8001828 <HAL_PCD_IRQHandler+0x644>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001808:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800180c:	f002 fcf6 	bl	80041fc <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001814:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8001818:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800181a:	4620      	mov	r0, r4
 800181c:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800181e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001822:	f003 ff31 	bl	8005688 <HAL_PCD_DataOutStageCallback>
 8001826:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001828:	8803      	ldrh	r3, [r0, #0]
 800182a:	0519      	lsls	r1, r3, #20
 800182c:	4602      	mov	r2, r0
 800182e:	f53f addf 	bmi.w	80013f0 <HAL_PCD_IRQHandler+0x20c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001832:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001836:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 800183a:	b289      	uxth	r1, r1
 800183c:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 811f 	bne.w	8001a84 <HAL_PCD_IRQHandler+0x8a0>
 8001846:	5a6b      	ldrh	r3, [r5, r1]
 8001848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	0c1b      	lsrs	r3, r3, #16
 8001850:	526b      	strh	r3, [r5, r1]
 8001852:	5a6b      	ldrh	r3, [r5, r1]
 8001854:	b29b      	uxth	r3, r3
 8001856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185a:	526b      	strh	r3, [r5, r1]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800185c:	8803      	ldrh	r3, [r0, #0]
 800185e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001866:	041b      	lsls	r3, r3, #16
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001876:	8003      	strh	r3, [r0, #0]
 8001878:	e5ba      	b.n	80013f0 <HAL_PCD_IRQHandler+0x20c>
      ep->xfer_len -= TxByteNbre;
 800187a:	ebac 0c03 	sub.w	ip, ip, r3
 800187e:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001882:	f1bc 0f00 	cmp.w	ip, #0
 8001886:	f43f af47 	beq.w	8001718 <HAL_PCD_IRQHandler+0x534>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800188a:	0479      	lsls	r1, r7, #17
 800188c:	d40d      	bmi.n	80018aa <HAL_PCD_IRQHandler+0x6c6>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800188e:	f830 102e 	ldrh.w	r1, [r0, lr, lsl #2]
 8001892:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001896:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800189a:	0409      	lsls	r1, r1, #16
 800189c:	0c09      	lsrs	r1, r1, #16
 800189e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80018a2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80018a6:	f820 102e 	strh.w	r1, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80018aa:	eb08 0705 	add.w	r7, r8, r5
 80018ae:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80018b2:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 80018b6:	2901      	cmp	r1, #1
 80018b8:	f47f af7a 	bne.w	80017b0 <HAL_PCD_IRQHandler+0x5cc>
        if (ep->xfer_len_db >= ep->maxpacket)
 80018bc:	e9d7 2c11 	ldrd	r2, ip, [r7, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80018c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80018c2:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80018c6:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 80018c8:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 80018ca:	45f4      	cmp	ip, lr
        ep->xfer_buff += TxByteNbre;
 80018cc:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80018ce:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80018d0:	f0c0 81a6 	bcc.w	8001c20 <HAL_PCD_IRQHandler+0xa3c>
          ep->xfer_len_db -= len;
 80018d4:	ebac 030e 	sub.w	r3, ip, lr
 80018d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018da:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018de:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	f040 818f 	bne.w	8001c06 <HAL_PCD_IRQHandler+0xa22>
 80018e8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80018ec:	f896 7028 	ldrb.w	r7, [r6, #40]	; 0x28
 80018f0:	fa1a f282 	uxtah	r2, sl, r2
 80018f4:	eb02 09c7 	add.w	r9, r2, r7, lsl #3
 80018f8:	f1be 0f00 	cmp.w	lr, #0
 80018fc:	f040 81f5 	bne.w	8001cea <HAL_PCD_IRQHandler+0xb06>
 8001900:	f8b9 7000 	ldrh.w	r7, [r9]
 8001904:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8001908:	043f      	lsls	r7, r7, #16
 800190a:	0c3f      	lsrs	r7, r7, #16
 800190c:	f8a9 7000 	strh.w	r7, [r9]
 8001910:	f8b9 7000 	ldrh.w	r7, [r9]
 8001914:	b2bf      	uxth	r7, r7
 8001916:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800191a:	f8a9 7000 	strh.w	r7, [r9]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800191e:	4445      	add	r5, r8
 8001920:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8001924:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 8001926:	f002 fc59 	bl	80041dc <USB_WritePMA>
 800192a:	6820      	ldr	r0, [r4, #0]
 800192c:	4602      	mov	r2, r0
 800192e:	e73f      	b.n	80017b0 <HAL_PCD_IRQHandler+0x5cc>
      ep->xfer_len -= TxByteNbre;
 8001930:	ebac 0c03 	sub.w	ip, ip, r3
 8001934:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001938:	f1bc 0f00 	cmp.w	ip, #0
 800193c:	f43f adcb 	beq.w	80014d6 <HAL_PCD_IRQHandler+0x2f2>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001940:	047f      	lsls	r7, r7, #17
 8001942:	d50d      	bpl.n	8001960 <HAL_PCD_IRQHandler+0x77c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001944:	f830 1029 	ldrh.w	r1, [r0, r9, lsl #2]
 8001948:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800194c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001950:	0409      	lsls	r1, r1, #16
 8001952:	0c09      	lsrs	r1, r1, #16
 8001954:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001958:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800195c:	f820 1029 	strh.w	r1, [r0, r9, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001960:	eb08 0705 	add.w	r7, r8, r5
 8001964:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8001968:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800196c:	2901      	cmp	r1, #1
 800196e:	f47f af1f 	bne.w	80017b0 <HAL_PCD_IRQHandler+0x5cc>
        if (ep->xfer_len_db >= ep->maxpacket)
 8001972:	e9d7 2c11 	ldrd	r2, ip, [r7, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001978:	f8d7 9038 	ldr.w	r9, [r7, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800197c:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 800197e:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8001980:	45cc      	cmp	ip, r9
        ep->xfer_buff += TxByteNbre;
 8001982:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001984:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001986:	f0c0 8126 	bcc.w	8001bd6 <HAL_PCD_IRQHandler+0x9f2>
          ep->xfer_len_db -= len;
 800198a:	ebac 0309 	sub.w	r3, ip, r9
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001990:	fa1f f389 	uxth.w	r3, r9
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001994:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 8001998:	2a00      	cmp	r2, #0
 800199a:	f040 810f 	bne.w	8001bbc <HAL_PCD_IRQHandler+0x9d8>
 800199e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80019a2:	f896 7028 	ldrb.w	r7, [r6, #40]	; 0x28
 80019a6:	fa1e f282 	uxtah	r2, lr, r2
 80019aa:	eb02 0ec7 	add.w	lr, r2, r7, lsl #3
 80019ae:	f1b9 0f00 	cmp.w	r9, #0
 80019b2:	f040 8179 	bne.w	8001ca8 <HAL_PCD_IRQHandler+0xac4>
 80019b6:	f8be 7000 	ldrh.w	r7, [lr]
 80019ba:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	0c3f      	lsrs	r7, r7, #16
 80019c2:	f8ae 7000 	strh.w	r7, [lr]
 80019c6:	f8be 7000 	ldrh.w	r7, [lr]
 80019ca:	b2bf      	uxth	r7, r7
 80019cc:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80019d0:	f8ae 7000 	strh.w	r7, [lr]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80019d4:	4445      	add	r5, r8
 80019d6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80019da:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 80019dc:	f002 fbfe 	bl	80041dc <USB_WritePMA>
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	4602      	mov	r2, r0
 80019e4:	e6e4      	b.n	80017b0 <HAL_PCD_IRQHandler+0x5cc>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019e6:	f200 4606 	addw	r6, r0, #1030	; 0x406
 80019ea:	fa16 f282 	uxtah	r2, r6, r2
 80019ee:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80019f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f43f adcc 	beq.w	8001594 <HAL_PCD_IRQHandler+0x3b0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019fc:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001a00:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001a04:	461e      	mov	r6, r3
 8001a06:	f002 fbf9 	bl	80041fc <USB_ReadPMA>
 8001a0a:	e5c4      	b.n	8001596 <HAL_PCD_IRQHandler+0x3b2>
      hpcd->LPM_State = LPM_L0;
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a12:	4620      	mov	r0, r4
 8001a14:	f000 fafe 	bl	8002014 <HAL_PCDEx_LPM_Callback>
 8001a18:	e474      	b.n	8001304 <HAL_PCD_IRQHandler+0x120>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a1a:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001a1e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001a22:	461e      	mov	r6, r3
 8001a24:	f002 fbea 	bl	80041fc <USB_ReadPMA>
 8001a28:	e5b5      	b.n	8001596 <HAL_PCD_IRQHandler+0x3b2>
        ep = &hpcd->OUT_ep[epindex];
 8001a2a:	2128      	movs	r1, #40	; 0x28
 8001a2c:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001a30:	6820      	ldr	r0, [r4, #0]
 8001a32:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001a36:	f001 fe3f 	bl	80036b8 <USB_EPStartXfer>
 8001a3a:	6820      	ldr	r0, [r4, #0]
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	e4ea      	b.n	8001416 <HAL_PCD_IRQHandler+0x232>
 8001a40:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a44:	4620      	mov	r0, r4
 8001a46:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001a4a:	f003 fe27 	bl	800569c <HAL_PCD_DataInStageCallback>
 8001a4e:	6820      	ldr	r0, [r4, #0]
 8001a50:	4602      	mov	r2, r0
 8001a52:	e4cd      	b.n	80013f0 <HAL_PCD_IRQHandler+0x20c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	f47f ae91 	bne.w	800177c <HAL_PCD_IRQHandler+0x598>
 8001a5a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a5e:	f209 4902 	addw	r9, r9, #1026	; 0x402
 8001a62:	4481      	add	r9, r0
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2200      	movs	r2, #0
 8001a68:	f829 2003 	strh.w	r2, [r9, r3]
 8001a6c:	e66e      	b.n	800174c <HAL_PCD_IRQHandler+0x568>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f47f ad62 	bne.w	8001538 <HAL_PCD_IRQHandler+0x354>
 8001a74:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a78:	fa1e fe83 	uxtah	lr, lr, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f82e 3039 	strh.w	r3, [lr, r9, lsl #3]
 8001a82:	e540      	b.n	8001506 <HAL_PCD_IRQHandler+0x322>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a84:	2b3e      	cmp	r3, #62	; 0x3e
 8001a86:	d848      	bhi.n	8001b1a <HAL_PCD_IRQHandler+0x936>
 8001a88:	085e      	lsrs	r6, r3, #1
 8001a8a:	07db      	lsls	r3, r3, #31
 8001a8c:	bf48      	it	mi
 8001a8e:	3601      	addmi	r6, #1
 8001a90:	02b6      	lsls	r6, r6, #10
 8001a92:	b2b6      	uxth	r6, r6
 8001a94:	526e      	strh	r6, [r5, r1]
 8001a96:	e6e1      	b.n	800185c <HAL_PCD_IRQHandler+0x678>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a98:	f417 4e80 	ands.w	lr, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a9c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001aa0:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 8001aa4:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001aa8:	d042      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x94c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aaa:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8001aae:	fa16 f383 	uxtah	r3, r6, r3
 8001ab2:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8001aba:	459c      	cmp	ip, r3
 8001abc:	461e      	mov	r6, r3
 8001abe:	f0c0 80ca 	bcc.w	8001c56 <HAL_PCD_IRQHandler+0xa72>
      ep->xfer_len -= count;
 8001ac2:	ebac 0c03 	sub.w	ip, ip, r3
 8001ac6:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001aca:	f1bc 0f00 	cmp.w	ip, #0
 8001ace:	f000 80c6 	beq.w	8001c5e <HAL_PCD_IRQHandler+0xa7a>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ad2:	0679      	lsls	r1, r7, #25
 8001ad4:	d513      	bpl.n	8001afe <HAL_PCD_IRQHandler+0x91a>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ad6:	eb08 0205 	add.w	r2, r8, r5
 8001ada:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001ade:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8001ae2:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8001ae6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001aea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aee:	0412      	lsls	r2, r2, #16
 8001af0:	0c12      	lsrs	r2, r2, #16
 8001af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001afa:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f43f ad48 	beq.w	8001594 <HAL_PCD_IRQHandler+0x3b0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b04:	eb08 0105 	add.w	r1, r8, r5
 8001b08:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001b0c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001b10:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001b14:	f002 fb72 	bl	80041fc <USB_ReadPMA>
 8001b18:	e53d      	b.n	8001596 <HAL_PCD_IRQHandler+0x3b2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b1a:	095e      	lsrs	r6, r3, #5
 8001b1c:	06df      	lsls	r7, r3, #27
 8001b1e:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_PCD_IRQHandler+0xb5c>)
 8001b20:	bf08      	it	eq
 8001b22:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8001b26:	ea43 2686 	orr.w	r6, r3, r6, lsl #10
 8001b2a:	b2b6      	uxth	r6, r6
 8001b2c:	526e      	strh	r6, [r5, r1]
 8001b2e:	e695      	b.n	800185c <HAL_PCD_IRQHandler+0x678>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b30:	f200 4606 	addw	r6, r0, #1030	; 0x406
 8001b34:	fa16 f383 	uxtah	r3, r6, r3
 8001b38:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8001b40:	459c      	cmp	ip, r3
 8001b42:	461e      	mov	r6, r3
 8001b44:	d373      	bcc.n	8001c2e <HAL_PCD_IRQHandler+0xa4a>
      ep->xfer_len -= count;
 8001b46:	ebac 0c03 	sub.w	ip, ip, r3
 8001b4a:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001b4e:	f1bc 0f00 	cmp.w	ip, #0
 8001b52:	d06e      	beq.n	8001c32 <HAL_PCD_IRQHandler+0xa4e>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001b54:	067a      	lsls	r2, r7, #25
 8001b56:	d413      	bmi.n	8001b80 <HAL_PCD_IRQHandler+0x99c>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b58:	eb08 0205 	add.w	r2, r8, r5
 8001b5c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001b60:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8001b64:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8001b68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001b6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b70:	0412      	lsls	r2, r2, #16
 8001b72:	0c12      	lsrs	r2, r2, #16
 8001b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b78:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001b7c:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f43f ad07 	beq.w	8001594 <HAL_PCD_IRQHandler+0x3b0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b86:	eb08 0105 	add.w	r1, r8, r5
 8001b8a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001b8e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001b92:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001b96:	f002 fb31 	bl	80041fc <USB_ReadPMA>
 8001b9a:	e4fc      	b.n	8001596 <HAL_PCD_IRQHandler+0x3b2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f47f aded 	bne.w	800177c <HAL_PCD_IRQHandler+0x598>
 8001ba2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ba6:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8001baa:	fa1a f383 	uxtah	r3, sl, r3
 8001bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	e5e1      	b.n	800177c <HAL_PCD_IRQHandler+0x598>
 8001bb8:	fa1f f38c 	uxth.w	r3, ip
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bbc:	2a01      	cmp	r2, #1
 8001bbe:	f47f af09 	bne.w	80019d4 <HAL_PCD_IRQHandler+0x7f0>
 8001bc2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001bc6:	f896 7028 	ldrb.w	r7, [r6, #40]	; 0x28
 8001bca:	fa1e f282 	uxtah	r2, lr, r2
 8001bce:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8001bd2:	8013      	strh	r3, [r2, #0]
 8001bd4:	e6fe      	b.n	80019d4 <HAL_PCD_IRQHandler+0x7f0>
        else if (ep->xfer_len_db == 0U)
 8001bd6:	f1bc 0f00 	cmp.w	ip, #0
 8001bda:	d152      	bne.n	8001c82 <HAL_PCD_IRQHandler+0xa9e>
          ep->xfer_fill_db = 0U;
 8001bdc:	f887 c04c 	strb.w	ip, [r7, #76]	; 0x4c
 8001be0:	4699      	mov	r9, r3
 8001be2:	e6d7      	b.n	8001994 <HAL_PCD_IRQHandler+0x7b0>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	f47f aca7 	bne.w	8001538 <HAL_PCD_IRQHandler+0x354>
 8001bea:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001bee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001bf2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001bf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5299      	strh	r1, [r3, r2]
 8001c00:	e49a      	b.n	8001538 <HAL_PCD_IRQHandler+0x354>
 8001c02:	fa1f f38c 	uxth.w	r3, ip
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c06:	2a01      	cmp	r2, #1
 8001c08:	f47f ae89 	bne.w	800191e <HAL_PCD_IRQHandler+0x73a>
 8001c0c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c10:	f896 7028 	ldrb.w	r7, [r6, #40]	; 0x28
 8001c14:	fa1a f282 	uxtah	r2, sl, r2
 8001c18:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8001c1c:	8013      	strh	r3, [r2, #0]
 8001c1e:	e67e      	b.n	800191e <HAL_PCD_IRQHandler+0x73a>
        else if (ep->xfer_len_db == 0U)
 8001c20:	f1bc 0f00 	cmp.w	ip, #0
 8001c24:	d14e      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0xae0>
          ep->xfer_fill_db = 0U;
 8001c26:	f887 c04c 	strb.w	ip, [r7, #76]	; 0x4c
 8001c2a:	469e      	mov	lr, r3
 8001c2c:	e657      	b.n	80018de <HAL_PCD_IRQHandler+0x6fa>
 8001c2e:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c32:	b211      	sxth	r1, r2
 8001c34:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8001c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c40:	0412      	lsls	r2, r2, #16
 8001c42:	0c12      	lsrs	r2, r2, #16
 8001c44:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c50:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8001c54:	e77e      	b.n	8001b54 <HAL_PCD_IRQHandler+0x970>
 8001c56:	f04f 0c00 	mov.w	ip, #0
 8001c5a:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c5e:	b211      	sxth	r1, r2
 8001c60:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8001c64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c6c:	0412      	lsls	r2, r2, #16
 8001c6e:	0c12      	lsrs	r2, r2, #16
 8001c70:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c7c:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8001c80:	e727      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x8ee>
          ep->xfer_fill_db = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c8a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	d192      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x9d4>
 8001c92:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c96:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001c9a:	fa1e f282 	uxtah	r2, lr, r2
 8001c9e:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8001ca2:	46e1      	mov	r9, ip
 8001ca4:	fa1f f38c 	uxth.w	r3, ip
 8001ca8:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
 8001cac:	d82b      	bhi.n	8001d06 <HAL_PCD_IRQHandler+0xb22>
 8001cae:	ea4f 0759 	mov.w	r7, r9, lsr #1
 8001cb2:	f019 0f01 	tst.w	r9, #1
 8001cb6:	bf18      	it	ne
 8001cb8:	3701      	addne	r7, #1
 8001cba:	02bf      	lsls	r7, r7, #10
 8001cbc:	b2bf      	uxth	r7, r7
 8001cbe:	f8ae 7000 	strh.w	r7, [lr]
 8001cc2:	e687      	b.n	80019d4 <HAL_PCD_IRQHandler+0x7f0>
          ep->xfer_len_db = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001cc8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ccc:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 8001cd0:	2a00      	cmp	r2, #0
 8001cd2:	d196      	bne.n	8001c02 <HAL_PCD_IRQHandler+0xa1e>
 8001cd4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001cd8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001cdc:	fa1a f282 	uxtah	r2, sl, r2
 8001ce0:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
 8001ce4:	46e6      	mov	lr, ip
 8001ce6:	fa1f f38c 	uxth.w	r3, ip
 8001cea:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 8001cee:	d818      	bhi.n	8001d22 <HAL_PCD_IRQHandler+0xb3e>
 8001cf0:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8001cf4:	f01e 0f01 	tst.w	lr, #1
 8001cf8:	bf18      	it	ne
 8001cfa:	3701      	addne	r7, #1
 8001cfc:	02bf      	lsls	r7, r7, #10
 8001cfe:	b2bf      	uxth	r7, r7
 8001d00:	f8a9 7000 	strh.w	r7, [r9]
 8001d04:	e60b      	b.n	800191e <HAL_PCD_IRQHandler+0x73a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d06:	ea4f 1759 	mov.w	r7, r9, lsr #5
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_PCD_IRQHandler+0xb5c>)
 8001d0c:	f019 0f1f 	tst.w	r9, #31
 8001d10:	bf08      	it	eq
 8001d12:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001d16:	ea42 2787 	orr.w	r7, r2, r7, lsl #10
 8001d1a:	b2bf      	uxth	r7, r7
 8001d1c:	f8ae 7000 	strh.w	r7, [lr]
 8001d20:	e658      	b.n	80019d4 <HAL_PCD_IRQHandler+0x7f0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d22:	ea4f 175e 	mov.w	r7, lr, lsr #5
 8001d26:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <HAL_PCD_IRQHandler+0xb5c>)
 8001d28:	f01e 0f1f 	tst.w	lr, #31
 8001d2c:	bf08      	it	eq
 8001d2e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001d32:	ea42 2787 	orr.w	r7, r2, r7, lsl #10
 8001d36:	b2bf      	uxth	r7, r7
 8001d38:	f8a9 7000 	strh.w	r7, [r9]
 8001d3c:	e5ef      	b.n	800191e <HAL_PCD_IRQHandler+0x73a>
 8001d3e:	bf00      	nop
 8001d40:	ffff8000 	.word	0xffff8000
 8001d44:	ffff8f0f 	.word	0xffff8f0f

08001d48 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001d48:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8001d4c:	2a01      	cmp	r2, #1
 8001d4e:	d00d      	beq.n	8001d6c <HAL_PCD_SetAddress+0x24>
{
 8001d50:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001d52:	2201      	movs	r2, #1
 8001d54:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8001d56:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8001d5a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d5e:	6800      	ldr	r0, [r0, #0]
 8001d60:	f002 fa26 	bl	80041b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001d6a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001d6c:	2002      	movs	r0, #2
}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_PCD_EP_Open>:
{
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8001d76:	0609      	lsls	r1, r1, #24
{
 8001d78:	4606      	mov	r6, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001d7a:	d423      	bmi.n	8001dc4 <HAL_PCD_EP_Open+0x54>
    ep->is_in = 0U;
 8001d7c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001d80:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	2428      	movs	r4, #40	; 0x28
    ep->is_in = 0U;
 8001d86:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d88:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 8001d8c:	f881 0169 	strb.w	r0, [r1, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	f504 71b4 	add.w	r1, r4, #360	; 0x168
  if (ep->is_in != 0U)
 8001d94:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d96:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8001d98:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8001d9a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001d9c:	b100      	cbz	r0, 8001da0 <HAL_PCD_EP_Open+0x30>
    ep->tx_fifo_num = ep->num;
 8001d9e:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001da0:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001da2:	bf04      	itt	eq
 8001da4:	2300      	moveq	r3, #0
 8001da6:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001da8:	f896 32a8 	ldrb.w	r3, [r6, #680]	; 0x2a8
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d011      	beq.n	8001dd4 <HAL_PCD_EP_Open+0x64>
 8001db0:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001db2:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 8001db4:	f886 32a8 	strb.w	r3, [r6, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001db8:	f001 f9fe 	bl	80031b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f886 02a8 	strb.w	r0, [r6, #680]	; 0x2a8
}
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc4:	1c6c      	adds	r4, r5, #1
 8001dc6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001dca:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
    ep->is_in = 1U;
 8001dce:	2001      	movs	r0, #1
 8001dd0:	7048      	strb	r0, [r1, #1]
 8001dd2:	e7df      	b.n	8001d94 <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 8001dd4:	2002      	movs	r0, #2
}
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}

08001dd8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001dd8:	060a      	lsls	r2, r1, #24
{
 8001dda:	b510      	push	{r4, lr}
 8001ddc:	f001 0307 	and.w	r3, r1, #7
 8001de0:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001de2:	d41a      	bmi.n	8001e1a <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de4:	2128      	movs	r1, #40	; 0x28
 8001de6:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8001dea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001dee:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001df6:	2000      	movs	r0, #0
 8001df8:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dfc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001dfe:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d015      	beq.n	8001e32 <HAL_PCD_EP_Close+0x5a>
 8001e06:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e08:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001e0a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e0e:	f001 fb5b 	bl	80034c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001e18:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001e20:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001e24:	2201      	movs	r2, #1
 8001e26:	704a      	strb	r2, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e28:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001e2a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d1e9      	bne.n	8001e06 <HAL_PCD_EP_Close+0x2e>
 8001e32:	2002      	movs	r0, #2
}
 8001e34:	bd10      	pop	{r4, pc}
 8001e36:	bf00      	nop

08001e38 <HAL_PCD_EP_Receive>:
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8001e3e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8001e42:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	2528      	movs	r5, #40	; 0x28
 8001e48:	fb05 0601 	mla	r6, r5, r1, r0
  ep->xfer_count = 0U;
 8001e4c:	2500      	movs	r5, #0
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4e:	6800      	ldr	r0, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e50:	f884 1168 	strb.w	r1, [r4, #360]	; 0x168
  ep->xfer_buff = pBuf;
 8001e54:	f8c4 217c 	str.w	r2, [r4, #380]	; 0x17c
  ep->xfer_len = len;
 8001e58:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e5c:	f506 71b4 	add.w	r1, r6, #360	; 0x168
  ep->xfer_count = 0U;
 8001e60:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8001e64:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e68:	f001 fc26 	bl	80036b8 <USB_EPStartXfer>
}
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}

08001e70 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e70:	f001 0107 	and.w	r1, r1, #7
 8001e74:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001e78:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8001e7c:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <HAL_PCD_EP_Transmit>:
{
 8001e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e86:	f001 0407 	and.w	r4, r1, #7
  ep->xfer_buff = pBuf;
 8001e8a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8001e8e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
  ep->xfer_count = 0U;
 8001e92:	2700      	movs	r7, #0
  ep->xfer_buff = pBuf;
 8001e94:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8001e96:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	18a1      	adds	r1, r4, r2
 8001e9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e9e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_len = len;
 8001ea2:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_len_db = len;
 8001ea4:	64ab      	str	r3, [r5, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 8001ea6:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
  ep->xfer_count = 0U;
 8001eaa:	646f      	str	r7, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8001eac:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb0:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eb4:	6800      	ldr	r0, [r0, #0]
 8001eb6:	f001 fbff 	bl	80036b8 <USB_EPStartXfer>
}
 8001eba:	4638      	mov	r0, r7
 8001ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ebe:	bf00      	nop

08001ec0 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ec0:	6842      	ldr	r2, [r0, #4]
{
 8001ec2:	b538      	push	{r3, r4, r5, lr}
 8001ec4:	f001 0307 	and.w	r3, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d82e      	bhi.n	8001f2a <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001ecc:	060a      	lsls	r2, r1, #24
 8001ece:	4604      	mov	r4, r0
 8001ed0:	d41b      	bmi.n	8001f0a <HAL_PCD_EP_SetStall+0x4a>
    ep->is_in = 0U;
 8001ed2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8001ed6:	2528      	movs	r5, #40	; 0x28
    ep->is_in = 0U;
 8001ed8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8001edc:	fb05 4101 	mla	r1, r5, r1, r4
 8001ee0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 8001eea:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eec:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 1U;
 8001eee:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd);
 8001ef0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d016      	beq.n	8001f26 <HAL_PCD_EP_SetStall+0x66>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ef8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001efa:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001efe:	f002 f8d7 	bl	80040b0 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001f08:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0a:	1c59      	adds	r1, r3, #1
 8001f0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001f10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001f14:	2201      	movs	r2, #1
 8001f16:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 8001f18:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 1U;
 8001f1c:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd);
 8001f1e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d1e8      	bne.n	8001ef8 <HAL_PCD_EP_SetStall+0x38>
 8001f26:	2002      	movs	r0, #2
}
 8001f28:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f2a:	2001      	movs	r0, #1
}
 8001f2c:	bd38      	pop	{r3, r4, r5, pc}
 8001f2e:	bf00      	nop

08001f30 <HAL_PCD_EP_ClrStall>:
{
 8001f30:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f32:	6843      	ldr	r3, [r0, #4]
 8001f34:	f001 020f 	and.w	r2, r1, #15
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d831      	bhi.n	8001fa0 <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 8001f3c:	060a      	lsls	r2, r1, #24
 8001f3e:	4604      	mov	r4, r0
 8001f40:	f001 0307 	and.w	r3, r1, #7
 8001f44:	d41c      	bmi.n	8001f80 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	2128      	movs	r1, #40	; 0x28
 8001f48:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8001f4c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001f50:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f54:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001f58:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8001f5a:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8001f5c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f60:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8001f62:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001f64:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d017      	beq.n	8001f9c <HAL_PCD_EP_ClrStall+0x6c>
 8001f6c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f6e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001f70:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f74:	f002 f8c4 	bl	8004100 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f78:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8001f7c:	4628      	mov	r0, r5
}
 8001f7e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f80:	1c59      	adds	r1, r3, #1
 8001f82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001f86:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001f8a:	2201      	movs	r2, #1
  ep->is_stall = 0U;
 8001f8c:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8001f8e:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f90:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8001f92:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001f94:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d1e7      	bne.n	8001f6c <HAL_PCD_EP_ClrStall+0x3c>
 8001f9c:	2002      	movs	r0, #2
}
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001fa0:	2001      	movs	r0, #1
}
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}

08001fa4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001fa4:	b430      	push	{r4, r5}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001fa6:	060c      	lsls	r4, r1, #24
 8001fa8:	d50c      	bpl.n	8001fc4 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001faa:	f001 0507 	and.w	r5, r1, #7
 8001fae:	1c6c      	adds	r4, r5, #1
 8001fb0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001fb4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001fb8:	b962      	cbnz	r2, 8001fd4 <HAL_PCDEx_PMAConfig+0x30>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001fba:	7322      	strb	r2, [r4, #12]
 8001fbc:	80e3      	strh	r3, [r4, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	bc30      	pop	{r4, r5}
 8001fc2:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8001fc4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001fc8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8001fcc:	f504 74b4 	add.w	r4, r4, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 8001fd0:	2a00      	cmp	r2, #0
 8001fd2:	d0f2      	beq.n	8001fba <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	7322      	strb	r2, [r4, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001fd8:	60a3      	str	r3, [r4, #8]
}
 8001fda:	2000      	movs	r0, #0
 8001fdc:	bc30      	pop	{r4, r5}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001fe0:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8001fe2:	2100      	movs	r1, #0
{
 8001fe4:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8001fe6:	f880 12e0 	strb.w	r1, [r0, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001fea:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 8001fee:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 8001ff4:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ff8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001ffc:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8002000:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002004:	b29b      	uxth	r3, r3
 8002006:	f043 0302 	orr.w	r3, r3, #2
}
 800200a:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800200c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop

08002014 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002018:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 800201a:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800201c:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800201e:	b968      	cbnz	r0, 800203c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002028:	d014      	beq.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800202a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800202e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002032:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8002036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800203a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002040:	d02f      	beq.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800204c:	2000      	movs	r0, #0
}
 800204e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002052:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002054:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800205a:	482d      	ldr	r0, [pc, #180]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800205c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002060:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002064:	6811      	ldr	r1, [r2, #0]
 8002066:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800206a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800206e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002070:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002072:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002074:	2332      	movs	r3, #50	; 0x32
 8002076:	fb03 f304 	mul.w	r3, r3, r4
 800207a:	fba0 0303 	umull	r0, r3, r0, r3
 800207e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002080:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002082:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002086:	d506      	bpl.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002088:	e000      	b.n	800208c <HAL_PWREx_ControlVoltageScaling+0x74>
 800208a:	b123      	cbz	r3, 8002096 <HAL_PWREx_ControlVoltageScaling+0x7e>
 800208c:	6951      	ldr	r1, [r2, #20]
 800208e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8002090:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002094:	d4f9      	bmi.n	800208a <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	055c      	lsls	r4, r3, #21
 800209c:	d5d6      	bpl.n	800204c <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 800209e:	2003      	movs	r0, #3
 80020a0:	e7c9      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020aa:	d009      	beq.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020ac:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 80020b0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80020b8:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80020be:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80020c6:	4812      	ldr	r0, [pc, #72]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80020cc:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d0:	6811      	ldr	r1, [r2, #0]
 80020d2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80020d6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80020da:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020dc:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020de:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020e0:	2332      	movs	r3, #50	; 0x32
 80020e2:	fb03 f304 	mul.w	r3, r3, r4
 80020e6:	fba0 0303 	umull	r0, r3, r0, r3
 80020ea:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ec:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ee:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f2:	d5d0      	bpl.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80020f4:	e001      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0xe2>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0cd      	beq.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80020fa:	6951      	ldr	r1, [r2, #20]
 80020fc:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80020fe:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002102:	d5c8      	bpl.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002104:	e7f7      	b.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0xde>
 8002106:	bf00      	nop
 8002108:	40007000 	.word	0x40007000
 800210c:	20000000 	.word	0x20000000
 8002110:	431bde83 	.word	0x431bde83

08002114 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002114:	4a02      	ldr	r2, [pc, #8]	; (8002120 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002116:	6893      	ldr	r3, [r2, #8]
 8002118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211c:	6093      	str	r3, [r2, #8]
}
 800211e:	4770      	bx	lr
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	2800      	cmp	r0, #0
 8002126:	f000 81c3 	beq.w	80024b0 <HAL_RCC_OscConfig+0x38c>
{
 800212a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	6803      	ldr	r3, [r0, #0]
 8002130:	07d9      	lsls	r1, r3, #31
{
 8002132:	b082      	sub	sp, #8
 8002134:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002136:	d52d      	bpl.n	8002194 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002138:	49b5      	ldr	r1, [pc, #724]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 800213a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002142:	2a0c      	cmp	r2, #12
 8002144:	f000 810a 	beq.w	800235c <HAL_RCC_OscConfig+0x238>
 8002148:	2a08      	cmp	r2, #8
 800214a:	f000 810c 	beq.w	8002366 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	6863      	ldr	r3, [r4, #4]
 8002150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002154:	f000 8133 	beq.w	80023be <HAL_RCC_OscConfig+0x29a>
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	f000 819b 	beq.w	8002496 <HAL_RCC_OscConfig+0x372>
 8002160:	4dab      	ldr	r5, [pc, #684]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 8002162:	682a      	ldr	r2, [r5, #0]
 8002164:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002168:	602a      	str	r2, [r5, #0]
 800216a:	682a      	ldr	r2, [r5, #0]
 800216c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002170:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 8128 	bne.w	80023c8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe fe30 	bl	8000ddc <HAL_GetTick>
 800217c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217e:	e005      	b.n	800218c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe fe2c 	bl	8000ddc <HAL_GetTick>
 8002184:	1b80      	subs	r0, r0, r6
 8002186:	2864      	cmp	r0, #100	; 0x64
 8002188:	f200 813b 	bhi.w	8002402 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	039f      	lsls	r7, r3, #14
 8002190:	d4f6      	bmi.n	8002180 <HAL_RCC_OscConfig+0x5c>
 8002192:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002194:	079e      	lsls	r6, r3, #30
 8002196:	d528      	bpl.n	80021ea <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002198:	4a9d      	ldr	r2, [pc, #628]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 800219a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	f000 80ec 	beq.w	8002380 <HAL_RCC_OscConfig+0x25c>
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	f000 80ee 	beq.w	800238a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ae:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b0:	4d97      	ldr	r5, [pc, #604]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8116 	beq.w	80023e4 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021be:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fe0c 	bl	8000ddc <HAL_GetTick>
 80021c4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c6:	e005      	b.n	80021d4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c8:	f7fe fe08 	bl	8000ddc <HAL_GetTick>
 80021cc:	1b80      	subs	r0, r0, r6
 80021ce:	2802      	cmp	r0, #2
 80021d0:	f200 8117 	bhi.w	8002402 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	0558      	lsls	r0, r3, #21
 80021d8:	d5f6      	bpl.n	80021c8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	686b      	ldr	r3, [r5, #4]
 80021dc:	6922      	ldr	r2, [r4, #16]
 80021de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021e6:	606b      	str	r3, [r5, #4]
 80021e8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	071a      	lsls	r2, r3, #28
 80021ec:	d519      	bpl.n	8002222 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ee:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f0:	4d87      	ldr	r5, [pc, #540]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 809e 	beq.w	8002334 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80021f8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7fe fdea 	bl	8000ddc <HAL_GetTick>
 8002208:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800220a:	e005      	b.n	8002218 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220c:	f7fe fde6 	bl	8000ddc <HAL_GetTick>
 8002210:	1b80      	subs	r0, r0, r6
 8002212:	2802      	cmp	r0, #2
 8002214:	f200 80f5 	bhi.w	8002402 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002218:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800221c:	079f      	lsls	r7, r3, #30
 800221e:	d5f5      	bpl.n	800220c <HAL_RCC_OscConfig+0xe8>
 8002220:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002222:	0759      	lsls	r1, r3, #29
 8002224:	d541      	bpl.n	80022aa <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002226:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 8002228:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800222a:	00d2      	lsls	r2, r2, #3
 800222c:	f100 80ed 	bmi.w	800240a <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002232:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002236:	659a      	str	r2, [r3, #88]	; 0x58
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002242:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002244:	4e73      	ldr	r6, [pc, #460]	; (8002414 <HAL_RCC_OscConfig+0x2f0>)
 8002246:	6833      	ldr	r3, [r6, #0]
 8002248:	05df      	lsls	r7, r3, #23
 800224a:	f140 8113 	bpl.w	8002474 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224e:	68a3      	ldr	r3, [r4, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	f000 80e3 	beq.w	800241c <HAL_RCC_OscConfig+0x2f8>
 8002256:	2b05      	cmp	r3, #5
 8002258:	f000 8169 	beq.w	800252e <HAL_RCC_OscConfig+0x40a>
 800225c:	4e6c      	ldr	r6, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 800225e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800226a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 80d7 	bne.w	800242a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7fe fdae 	bl	8000ddc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002284:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002286:	e005      	b.n	8002294 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe fda8 	bl	8000ddc <HAL_GetTick>
 800228c:	1bc0      	subs	r0, r0, r7
 800228e:	4540      	cmp	r0, r8
 8002290:	f200 80b7 	bhi.w	8002402 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002294:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002298:	079a      	lsls	r2, r3, #30
 800229a:	d4f5      	bmi.n	8002288 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800229c:	b125      	cbz	r5, 80022a8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4a5c      	ldr	r2, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 80022a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6593      	str	r3, [r2, #88]	; 0x58
 80022a8:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022aa:	069b      	lsls	r3, r3, #26
 80022ac:	d518      	bpl.n	80022e0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022ae:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022b0:	4d57      	ldr	r5, [pc, #348]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80ca 	beq.w	800244c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80022b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fd8a 	bl	8000ddc <HAL_GetTick>
 80022c8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022cc:	f7fe fd86 	bl	8000ddc <HAL_GetTick>
 80022d0:	1b80      	subs	r0, r0, r6
 80022d2:	2802      	cmp	r0, #2
 80022d4:	f200 8095 	bhi.w	8002402 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022d8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80022dc:	079f      	lsls	r7, r3, #30
 80022de:	d5f5      	bpl.n	80022cc <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e0:	69e0      	ldr	r0, [r4, #28]
 80022e2:	b318      	cbz	r0, 800232c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e4:	4d4a      	ldr	r5, [pc, #296]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 80022e6:	68ab      	ldr	r3, [r5, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	f000 812c 	beq.w	800254a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022f4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022fc:	f000 80da 	beq.w	80024b4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002300:	68eb      	ldr	r3, [r5, #12]
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002308:	68eb      	ldr	r3, [r5, #12]
 800230a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fd62 	bl	8000ddc <HAL_GetTick>
 8002318:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231a:	e004      	b.n	8002326 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fd5e 	bl	8000ddc <HAL_GetTick>
 8002320:	1b00      	subs	r0, r0, r4
 8002322:	2802      	cmp	r0, #2
 8002324:	d86d      	bhi.n	8002402 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002326:	682b      	ldr	r3, [r5, #0]
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	d4f7      	bmi.n	800231c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800232c:	2000      	movs	r0, #0
}
 800232e:	b002      	add	sp, #8
 8002330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002334:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002340:	f7fe fd4c 	bl	8000ddc <HAL_GetTick>
 8002344:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002346:	e004      	b.n	8002352 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe fd48 	bl	8000ddc <HAL_GetTick>
 800234c:	1b80      	subs	r0, r0, r6
 800234e:	2802      	cmp	r0, #2
 8002350:	d857      	bhi.n	8002402 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002352:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002356:	0798      	lsls	r0, r3, #30
 8002358:	d4f6      	bmi.n	8002348 <HAL_RCC_OscConfig+0x224>
 800235a:	e761      	b.n	8002220 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800235c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002360:	2903      	cmp	r1, #3
 8002362:	f47f aef4 	bne.w	800214e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	0392      	lsls	r2, r2, #14
 800236c:	f57f af12 	bpl.w	8002194 <HAL_RCC_OscConfig+0x70>
 8002370:	6862      	ldr	r2, [r4, #4]
 8002372:	2a00      	cmp	r2, #0
 8002374:	f47f af0e 	bne.w	8002194 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
}
 800237a:	b002      	add	sp, #8
 800237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002380:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002384:	2a02      	cmp	r2, #2
 8002386:	f47f af12 	bne.w	80021ae <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	055d      	lsls	r5, r3, #21
 8002390:	d502      	bpl.n	8002398 <HAL_RCC_OscConfig+0x274>
 8002392:	68e3      	ldr	r3, [r4, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ef      	beq.n	8002378 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 800239a:	6920      	ldr	r0, [r4, #16]
 800239c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800239e:	491e      	ldr	r1, [pc, #120]	; (8002418 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023a4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80023a8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023aa:	6808      	ldr	r0, [r1, #0]
 80023ac:	f7fe fcd4 	bl	8000d58 <HAL_InitTick>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d1e1      	bne.n	8002378 <HAL_RCC_OscConfig+0x254>
 80023b4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	071a      	lsls	r2, r3, #28
 80023b8:	f57f af33 	bpl.w	8002222 <HAL_RCC_OscConfig+0xfe>
 80023bc:	e717      	b.n	80021ee <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023be:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023c8:	f7fe fd08 	bl	8000ddc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023cc:	4e10      	ldr	r6, [pc, #64]	; (8002410 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 80023ce:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d0:	e004      	b.n	80023dc <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d2:	f7fe fd03 	bl	8000ddc <HAL_GetTick>
 80023d6:	1b40      	subs	r0, r0, r5
 80023d8:	2864      	cmp	r0, #100	; 0x64
 80023da:	d812      	bhi.n	8002402 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023dc:	6833      	ldr	r3, [r6, #0]
 80023de:	039b      	lsls	r3, r3, #14
 80023e0:	d5f7      	bpl.n	80023d2 <HAL_RCC_OscConfig+0x2ae>
 80023e2:	e6d6      	b.n	8002192 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023ec:	f7fe fcf6 	bl	8000ddc <HAL_GetTick>
 80023f0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	0559      	lsls	r1, r3, #21
 80023f6:	d5dd      	bpl.n	80023b4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe fcf0 	bl	8000ddc <HAL_GetTick>
 80023fc:	1b80      	subs	r0, r0, r6
 80023fe:	2802      	cmp	r0, #2
 8002400:	d9f7      	bls.n	80023f2 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8002402:	2003      	movs	r0, #3
}
 8002404:	b002      	add	sp, #8
 8002406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800240a:	2500      	movs	r5, #0
 800240c:	e71a      	b.n	8002244 <HAL_RCC_OscConfig+0x120>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
 8002418:	20000008 	.word	0x20000008
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	4a65      	ldr	r2, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x490>)
 800241e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800242a:	f7fe fcd7 	bl	8000ddc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242e:	4f61      	ldr	r7, [pc, #388]	; (80025b4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8002430:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002436:	e004      	b.n	8002442 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe fcd0 	bl	8000ddc <HAL_GetTick>
 800243c:	1b80      	subs	r0, r0, r6
 800243e:	4540      	cmp	r0, r8
 8002440:	d8df      	bhi.n	8002402 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002446:	0799      	lsls	r1, r3, #30
 8002448:	d5f6      	bpl.n	8002438 <HAL_RCC_OscConfig+0x314>
 800244a:	e727      	b.n	800229c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800244c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002458:	f7fe fcc0 	bl	8000ddc <HAL_GetTick>
 800245c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800245e:	e004      	b.n	800246a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002460:	f7fe fcbc 	bl	8000ddc <HAL_GetTick>
 8002464:	1b80      	subs	r0, r0, r6
 8002466:	2802      	cmp	r0, #2
 8002468:	d8cb      	bhi.n	8002402 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800246a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800246e:	0798      	lsls	r0, r3, #30
 8002470:	d4f6      	bmi.n	8002460 <HAL_RCC_OscConfig+0x33c>
 8002472:	e735      	b.n	80022e0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002474:	6833      	ldr	r3, [r6, #0]
 8002476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800247c:	f7fe fcae 	bl	8000ddc <HAL_GetTick>
 8002480:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002482:	6833      	ldr	r3, [r6, #0]
 8002484:	05d8      	lsls	r0, r3, #23
 8002486:	f53f aee2 	bmi.w	800224e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7fe fca7 	bl	8000ddc <HAL_GetTick>
 800248e:	1bc0      	subs	r0, r0, r7
 8002490:	2802      	cmp	r0, #2
 8002492:	d9f6      	bls.n	8002482 <HAL_RCC_OscConfig+0x35e>
 8002494:	e7b5      	b.n	8002402 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800249a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024ac:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ae:	e78b      	b.n	80023c8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
}
 80024b2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80024b4:	f7fe fc92 	bl	8000ddc <HAL_GetTick>
 80024b8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ba:	e004      	b.n	80024c6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fc8e 	bl	8000ddc <HAL_GetTick>
 80024c0:	1b80      	subs	r0, r0, r6
 80024c2:	2802      	cmp	r0, #2
 80024c4:	d89d      	bhi.n	8002402 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c6:	682b      	ldr	r3, [r5, #0]
 80024c8:	0199      	lsls	r1, r3, #6
 80024ca:	d4f7      	bmi.n	80024bc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024cc:	68e9      	ldr	r1, [r5, #12]
 80024ce:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <HAL_RCC_OscConfig+0x494>)
 80024d0:	6a22      	ldr	r2, [r4, #32]
 80024d2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80024d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024d8:	400b      	ands	r3, r1
 80024da:	4313      	orrs	r3, r2
 80024dc:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80024e0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80024e4:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80024e8:	3801      	subs	r0, #1
 80024ea:	0849      	lsrs	r1, r1, #1
 80024ec:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80024f0:	3901      	subs	r1, #1
 80024f2:	0852      	lsrs	r2, r2, #1
 80024f4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80024f8:	3a01      	subs	r2, #1
 80024fa:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80024fe:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002500:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	4e2c      	ldr	r6, [pc, #176]	; (80025b4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8002504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002508:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800250a:	68eb      	ldr	r3, [r5, #12]
 800250c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002510:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002512:	f7fe fc63 	bl	8000ddc <HAL_GetTick>
 8002516:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002518:	e005      	b.n	8002526 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fc5f 	bl	8000ddc <HAL_GetTick>
 800251e:	1b00      	subs	r0, r0, r4
 8002520:	2802      	cmp	r0, #2
 8002522:	f63f af6e 	bhi.w	8002402 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	6833      	ldr	r3, [r6, #0]
 8002528:	019a      	lsls	r2, r3, #6
 800252a:	d5f6      	bpl.n	800251a <HAL_RCC_OscConfig+0x3f6>
 800252c:	e6fe      	b.n	800232c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_RCC_OscConfig+0x490>)
 8002530:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002534:	f042 0204 	orr.w	r2, r2, #4
 8002538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800253c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002548:	e76f      	b.n	800242a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254a:	2801      	cmp	r0, #1
 800254c:	f43f aeef 	beq.w	800232e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8002550:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	6a22      	ldr	r2, [r4, #32]
 8002554:	f003 0103 	and.w	r1, r3, #3
 8002558:	4291      	cmp	r1, r2
 800255a:	f47f af0d 	bne.w	8002378 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002564:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800256a:	f47f af05 	bne.w	8002378 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800256e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002574:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002578:	f47f aefe 	bne.w	8002378 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800257e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002582:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002586:	f47f aef7 	bne.w	8002378 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800258a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800258c:	0852      	lsrs	r2, r2, #1
 800258e:	3a01      	subs	r2, #1
 8002590:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002594:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002598:	f47f aeee 	bne.w	8002378 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800259c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800259e:	0852      	lsrs	r2, r2, #1
 80025a0:	3a01      	subs	r2, #1
 80025a2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80025aa:	bf14      	ite	ne
 80025ac:	2001      	movne	r0, #1
 80025ae:	2000      	moveq	r0, #0
 80025b0:	e6bd      	b.n	800232e <HAL_RCC_OscConfig+0x20a>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	019f800c 	.word	0x019f800c

080025bc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_RCC_GetSysClockFreq+0x54>)
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	f002 020c 	and.w	r2, r2, #12
 80025c4:	2a04      	cmp	r2, #4
 80025c6:	d021      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	f002 020c 	and.w	r2, r2, #12
 80025ce:	2a08      	cmp	r2, #8
 80025d0:	d01c      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	f002 020c 	and.w	r2, r2, #12
 80025d8:	2a0c      	cmp	r2, #12
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80025dc:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80025de:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025e0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e2:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e4:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e6:	f3c0 1003 	ubfx	r0, r0, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ea:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ee:	1c42      	adds	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f0:	4808      	ldr	r0, [pc, #32]	; (8002614 <HAL_RCC_GetSysClockFreq+0x58>)
 80025f2:	fbb0 f0f2 	udiv	r0, r0, r2
 80025f6:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetSysClockFreq+0x54>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002602:	3301      	adds	r3, #1
 8002604:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002606:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800260a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800260c:	4801      	ldr	r0, [pc, #4]	; (8002614 <HAL_RCC_GetSysClockFreq+0x58>)
 800260e:	4770      	bx	lr
 8002610:	40021000 	.word	0x40021000
 8002614:	00f42400 	.word	0x00f42400

08002618 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002618:	2800      	cmp	r0, #0
 800261a:	f000 80e9 	beq.w	80027f0 <HAL_RCC_ClockConfig+0x1d8>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261e:	4a7c      	ldr	r2, [pc, #496]	; (8002810 <HAL_RCC_ClockConfig+0x1f8>)
{
 8002620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	428b      	cmp	r3, r1
 800262c:	460d      	mov	r5, r1
 800262e:	4604      	mov	r4, r0
 8002630:	d20c      	bcs.n	800264c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	6813      	ldr	r3, [r2, #0]
 8002634:	f023 030f 	bic.w	r3, r3, #15
 8002638:	430b      	orrs	r3, r1
 800263a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263c:	6813      	ldr	r3, [r2, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	428b      	cmp	r3, r1
 8002644:	d002      	beq.n	800264c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002646:	2001      	movs	r0, #1
}
 8002648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	07de      	lsls	r6, r3, #31
 8002650:	d563      	bpl.n	800271a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002652:	6862      	ldr	r2, [r4, #4]
 8002654:	2a03      	cmp	r2, #3
 8002656:	f000 809a 	beq.w	800278e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265a:	4b6e      	ldr	r3, [pc, #440]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002660:	f000 8091 	beq.w	8002786 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002664:	055b      	lsls	r3, r3, #21
 8002666:	d5ee      	bpl.n	8002646 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002668:	f7ff ffa8 	bl	80025bc <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_ClockConfig+0x200>)
 800266e:	4298      	cmp	r0, r3
 8002670:	f200 80c0 	bhi.w	80027f4 <HAL_RCC_ClockConfig+0x1dc>
 8002674:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002676:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4e66      	ldr	r6, [pc, #408]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 800267c:	68b3      	ldr	r3, [r6, #8]
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	431a      	orrs	r2, r3
 8002684:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8002686:	f7fe fba9 	bl	8000ddc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800268e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002690:	e004      	b.n	800269c <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002692:	f7fe fba3 	bl	8000ddc <HAL_GetTick>
 8002696:	1bc0      	subs	r0, r0, r7
 8002698:	4540      	cmp	r0, r8
 800269a:	d871      	bhi.n	8002780 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269c:	68b3      	ldr	r3, [r6, #8]
 800269e:	6862      	ldr	r2, [r4, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026a8:	d1f3      	bne.n	8002692 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	079f      	lsls	r7, r3, #30
 80026ae:	d436      	bmi.n	800271e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80026b0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80026b4:	d103      	bne.n	80026be <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026b6:	68b3      	ldr	r3, [r6, #8]
 80026b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026bc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026be:	4e54      	ldr	r6, [pc, #336]	; (8002810 <HAL_RCC_ClockConfig+0x1f8>)
 80026c0:	6833      	ldr	r3, [r6, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	42ab      	cmp	r3, r5
 80026c8:	d846      	bhi.n	8002758 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	075a      	lsls	r2, r3, #29
 80026ce:	d506      	bpl.n	80026de <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4950      	ldr	r1, [pc, #320]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 80026d2:	68e0      	ldr	r0, [r4, #12]
 80026d4:	688a      	ldr	r2, [r1, #8]
 80026d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026da:	4302      	orrs	r2, r0
 80026dc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026de:	071b      	lsls	r3, r3, #28
 80026e0:	d507      	bpl.n	80026f2 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 80026e4:	6921      	ldr	r1, [r4, #16]
 80026e6:	6893      	ldr	r3, [r2, #8]
 80026e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026f0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f2:	f7ff ff63 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 80026f6:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 80026f8:	4c48      	ldr	r4, [pc, #288]	; (800281c <HAL_RCC_ClockConfig+0x204>)
 80026fa:	6892      	ldr	r2, [r2, #8]
 80026fc:	4948      	ldr	r1, [pc, #288]	; (8002820 <HAL_RCC_ClockConfig+0x208>)
 80026fe:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002702:	4603      	mov	r3, r0
 8002704:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8002706:	4847      	ldr	r0, [pc, #284]	; (8002824 <HAL_RCC_ClockConfig+0x20c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002708:	f002 021f 	and.w	r2, r2, #31
 800270c:	40d3      	lsrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8002710:	6800      	ldr	r0, [r0, #0]
}
 8002712:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8002716:	f7fe bb1f 	b.w	8000d58 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271a:	0798      	lsls	r0, r3, #30
 800271c:	d5cf      	bpl.n	80026be <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271e:	0758      	lsls	r0, r3, #29
 8002720:	d504      	bpl.n	800272c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002722:	493c      	ldr	r1, [pc, #240]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 8002724:	688a      	ldr	r2, [r1, #8]
 8002726:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800272a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	0719      	lsls	r1, r3, #28
 800272e:	d506      	bpl.n	800273e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002730:	4a38      	ldr	r2, [pc, #224]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 8002732:	6893      	ldr	r3, [r2, #8]
 8002734:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002738:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800273c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273e:	4a35      	ldr	r2, [pc, #212]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 8002740:	68a1      	ldr	r1, [r4, #8]
 8002742:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4e32      	ldr	r6, [pc, #200]	; (8002810 <HAL_RCC_ClockConfig+0x1f8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274a:	430b      	orrs	r3, r1
 800274c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274e:	6833      	ldr	r3, [r6, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	42ab      	cmp	r3, r5
 8002756:	d9b8      	bls.n	80026ca <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002758:	6833      	ldr	r3, [r6, #0]
 800275a:	f023 030f 	bic.w	r3, r3, #15
 800275e:	432b      	orrs	r3, r5
 8002760:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002762:	f7fe fb3b 	bl	8000ddc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002766:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800276a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276c:	6833      	ldr	r3, [r6, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	42ab      	cmp	r3, r5
 8002774:	d0a9      	beq.n	80026ca <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002776:	f7fe fb31 	bl	8000ddc <HAL_GetTick>
 800277a:	1bc0      	subs	r0, r0, r7
 800277c:	4540      	cmp	r0, r8
 800277e:	d9f5      	bls.n	800276c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8002780:	2003      	movs	r0, #3
}
 8002782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	039a      	lsls	r2, r3, #14
 8002788:	f53f af6e 	bmi.w	8002668 <HAL_RCC_ClockConfig+0x50>
 800278c:	e75b      	b.n	8002646 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	4821      	ldr	r0, [pc, #132]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	0189      	lsls	r1, r1, #6
 8002794:	f57f af57 	bpl.w	8002646 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002798:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800279a:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800279c:	68c0      	ldr	r0, [r0, #12]
      if(pllfreq > 80000000U)
 800279e:	4f1e      	ldr	r7, [pc, #120]	; (8002818 <HAL_RCC_ClockConfig+0x200>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a0:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80027a4:	1c4e      	adds	r6, r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027a6:	4920      	ldr	r1, [pc, #128]	; (8002828 <HAL_RCC_ClockConfig+0x210>)
 80027a8:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ac:	4e19      	ldr	r6, [pc, #100]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ae:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80027b2:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b6:	68f0      	ldr	r0, [r6, #12]
 80027b8:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80027bc:	3001      	adds	r0, #1
 80027be:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80027c0:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80027c4:	42b9      	cmp	r1, r7
 80027c6:	d920      	bls.n	800280a <HAL_RCC_ClockConfig+0x1f2>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027c8:	68b1      	ldr	r1, [r6, #8]
 80027ca:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x1c4>
 80027d0:	f013 0902 	ands.w	r9, r3, #2
 80027d4:	f43f af51 	beq.w	800267a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027d8:	68a3      	ldr	r3, [r4, #8]
 80027da:	b9b3      	cbnz	r3, 800280a <HAL_RCC_ClockConfig+0x1f2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027dc:	490d      	ldr	r1, [pc, #52]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 80027de:	688b      	ldr	r3, [r1, #8]
 80027e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e8:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027ea:	f04f 0980 	mov.w	r9, #128	; 0x80
 80027ee:	e744      	b.n	800267a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 80027f0:	2001      	movs	r0, #1
}
 80027f2:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 80027f6:	6893      	ldr	r3, [r2, #8]
 80027f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002800:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002802:	6862      	ldr	r2, [r4, #4]
 8002804:	f04f 0980 	mov.w	r9, #128	; 0x80
 8002808:	e737      	b.n	800267a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800280a:	f04f 0900 	mov.w	r9, #0
 800280e:	e734      	b.n	800267a <HAL_RCC_ClockConfig+0x62>
 8002810:	40022000 	.word	0x40022000
 8002814:	40021000 	.word	0x40021000
 8002818:	04c4b400 	.word	0x04c4b400
 800281c:	0800681c 	.word	0x0800681c
 8002820:	20000000 	.word	0x20000000
 8002824:	20000008 	.word	0x20000008
 8002828:	00f42400 	.word	0x00f42400

0800282c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002830:	6803      	ldr	r3, [r0, #0]
{
 8002832:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002834:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8002838:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800283a:	d056      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283c:	4bb6      	ldr	r3, [pc, #728]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800283e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002840:	00d5      	lsls	r5, r2, #3
 8002842:	f140 813e 	bpl.w	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002848:	4db4      	ldr	r5, [pc, #720]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800284a:	682b      	ldr	r3, [r5, #0]
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002852:	f7fe fac3 	bl	8000ddc <HAL_GetTick>
 8002856:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002858:	e005      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe fabf 	bl	8000ddc <HAL_GetTick>
 800285e:	1b83      	subs	r3, r0, r6
 8002860:	2b02      	cmp	r3, #2
 8002862:	f200 8139 	bhi.w	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002866:	682b      	ldr	r3, [r5, #0]
 8002868:	05d8      	lsls	r0, r3, #23
 800286a:	d5f6      	bpl.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800286c:	4daa      	ldr	r5, [pc, #680]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800286e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002872:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002876:	d027      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002878:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800287a:	429a      	cmp	r2, r3
 800287c:	d025      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800287e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002882:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800288e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002892:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800289a:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800289c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80028a0:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028a4:	f140 8148 	bpl.w	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fa98 	bl	8000ddc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80028b0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b2:	e005      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe fa92 	bl	8000ddc <HAL_GetTick>
 80028b8:	1b80      	subs	r0, r0, r6
 80028ba:	4540      	cmp	r0, r8
 80028bc:	f200 810c 	bhi.w	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80028c4:	079b      	lsls	r3, r3, #30
 80028c6:	d5f5      	bpl.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80028c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ca:	4993      	ldr	r1, [pc, #588]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80028cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028da:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028dc:	b127      	cbz	r7, 80028e8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4a8e      	ldr	r2, [pc, #568]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80028e0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ea:	07dd      	lsls	r5, r3, #31
 80028ec:	d508      	bpl.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ee:	498a      	ldr	r1, [pc, #552]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80028f0:	6865      	ldr	r5, [r4, #4]
 80028f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028f6:	f022 0203 	bic.w	r2, r2, #3
 80028fa:	432a      	orrs	r2, r5
 80028fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002900:	0799      	lsls	r1, r3, #30
 8002902:	d508      	bpl.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002904:	4984      	ldr	r1, [pc, #528]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002906:	68a5      	ldr	r5, [r4, #8]
 8002908:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800290c:	f022 020c 	bic.w	r2, r2, #12
 8002910:	432a      	orrs	r2, r5
 8002912:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002916:	075a      	lsls	r2, r3, #29
 8002918:	d508      	bpl.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800291a:	497f      	ldr	r1, [pc, #508]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800291c:	68e5      	ldr	r5, [r4, #12]
 800291e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002922:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002926:	432a      	orrs	r2, r5
 8002928:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800292c:	071f      	lsls	r7, r3, #28
 800292e:	d508      	bpl.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002930:	4979      	ldr	r1, [pc, #484]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002932:	6925      	ldr	r5, [r4, #16]
 8002934:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002938:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800293c:	432a      	orrs	r2, r5
 800293e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002942:	06de      	lsls	r6, r3, #27
 8002944:	d508      	bpl.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002946:	4974      	ldr	r1, [pc, #464]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002948:	6965      	ldr	r5, [r4, #20]
 800294a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800294e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002952:	432a      	orrs	r2, r5
 8002954:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002958:	069d      	lsls	r5, r3, #26
 800295a:	d508      	bpl.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800295c:	496e      	ldr	r1, [pc, #440]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800295e:	69a5      	ldr	r5, [r4, #24]
 8002960:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002964:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002968:	432a      	orrs	r2, r5
 800296a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296e:	0659      	lsls	r1, r3, #25
 8002970:	d508      	bpl.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	4969      	ldr	r1, [pc, #420]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002974:	69e5      	ldr	r5, [r4, #28]
 8002976:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800297a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800297e:	432a      	orrs	r2, r5
 8002980:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002984:	061a      	lsls	r2, r3, #24
 8002986:	d508      	bpl.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002988:	4963      	ldr	r1, [pc, #396]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800298a:	6a25      	ldr	r5, [r4, #32]
 800298c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002990:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002994:	432a      	orrs	r2, r5
 8002996:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299a:	05df      	lsls	r7, r3, #23
 800299c:	d508      	bpl.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800299e:	495e      	ldr	r1, [pc, #376]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80029a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80029aa:	432a      	orrs	r2, r5
 80029ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029b0:	039e      	lsls	r6, r3, #14
 80029b2:	d508      	bpl.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029b4:	4958      	ldr	r1, [pc, #352]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029b6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80029b8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80029bc:	f022 0203 	bic.w	r2, r2, #3
 80029c0:	432a      	orrs	r2, r5
 80029c2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c6:	059d      	lsls	r5, r3, #22
 80029c8:	d508      	bpl.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ca:	4953      	ldr	r1, [pc, #332]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80029ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029d2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80029d6:	432a      	orrs	r2, r5
 80029d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029dc:	0559      	lsls	r1, r3, #21
 80029de:	d50b      	bpl.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80029e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80029ec:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029ee:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029f6:	d071      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029f8:	051a      	lsls	r2, r3, #20
 80029fa:	d50b      	bpl.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029fc:	4946      	ldr	r1, [pc, #280]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029fe:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002a00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a04:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002a08:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a0a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a12:	d068      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a14:	04df      	lsls	r7, r3, #19
 8002a16:	d50b      	bpl.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a18:	493f      	ldr	r1, [pc, #252]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a1a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002a1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a24:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a26:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a2e:	d05f      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a30:	049e      	lsls	r6, r3, #18
 8002a32:	d50b      	bpl.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a34:	4938      	ldr	r1, [pc, #224]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a36:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002a38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a3c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002a40:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a42:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a4a:	d056      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a4c:	045d      	lsls	r5, r3, #17
 8002a4e:	d50b      	bpl.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a50:	4931      	ldr	r1, [pc, #196]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a52:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002a54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a58:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002a5c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a5e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a66:	d04d      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a68:	0419      	lsls	r1, r3, #16
 8002a6a:	d50b      	bpl.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a6c:	492a      	ldr	r1, [pc, #168]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a6e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002a70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a78:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a7a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a82:	d044      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a84:	03da      	lsls	r2, r3, #15
 8002a86:	d50b      	bpl.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a88:	4923      	ldr	r1, [pc, #140]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a8a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002a8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a90:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002a94:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a96:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a9e:	d03f      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002aa0:	035b      	lsls	r3, r3, #13
 8002aa2:	d50b      	bpl.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002aa6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002aa8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002aac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002ab0:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ab2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ab6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002aba:	d036      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8002abc:	b002      	add	sp, #8
 8002abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ac4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ad4:	2701      	movs	r7, #1
 8002ad6:	e6b7      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8002ad8:	2003      	movs	r0, #3
 8002ada:	e6ff      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	68ca      	ldr	r2, [r1, #12]
 8002ade:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ae2:	60ca      	str	r2, [r1, #12]
 8002ae4:	e788      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae6:	68ca      	ldr	r2, [r1, #12]
 8002ae8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002aec:	60ca      	str	r2, [r1, #12]
 8002aee:	e791      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	68ca      	ldr	r2, [r1, #12]
 8002af2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002af6:	60ca      	str	r2, [r1, #12]
 8002af8:	e79a      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002afa:	68ca      	ldr	r2, [r1, #12]
 8002afc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b00:	60ca      	str	r2, [r1, #12]
 8002b02:	e7a3      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b04:	68ca      	ldr	r2, [r1, #12]
 8002b06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b0a:	60ca      	str	r2, [r1, #12]
 8002b0c:	e7ac      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b0e:	68ca      	ldr	r2, [r1, #12]
 8002b10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b14:	60ca      	str	r2, [r1, #12]
 8002b16:	e7b5      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b20:	68ca      	ldr	r2, [r1, #12]
 8002b22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b26:	60ca      	str	r2, [r1, #12]
 8002b28:	e7ba      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b2a:	68d3      	ldr	r3, [r2, #12]
 8002b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b30:	60d3      	str	r3, [r2, #12]
}
 8002b32:	b002      	add	sp, #8
 8002b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b38:	4613      	mov	r3, r2
 8002b3a:	e6c6      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x9e>

08002b3c <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	460c      	mov	r4, r1
 8002b42:	4617      	mov	r7, r2
 8002b44:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b46:	f7fe f949 	bl	8000ddc <HAL_GetTick>
 8002b4a:	4427      	add	r7, r4
 8002b4c:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 8002b4e:	f7fe f945 	bl	8000ddc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b52:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002b5e:	0d1b      	lsrs	r3, r3, #20
 8002b60:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8002b64:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b66:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b68:	682a      	ldr	r2, [r5, #0]
 8002b6a:	1c61      	adds	r1, r4, #1
 8002b6c:	6893      	ldr	r3, [r2, #8]
 8002b6e:	d10d      	bne.n	8002b8c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 8002b70:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8002b74:	d007      	beq.n	8002b86 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002b76:	7b13      	ldrb	r3, [r2, #12]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002b7c:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b7e:	6893      	ldr	r3, [r2, #8]
 8002b80:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8002b84:	d1f7      	bne.n	8002b76 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8002b86:	2000      	movs	r0, #0
}
 8002b88:	b003      	add	sp, #12
 8002b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8002b8c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8002b90:	d0f9      	beq.n	8002b86 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002b92:	7b13      	ldrb	r3, [r2, #12]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8002b98:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b9a:	f7fe f91f 	bl	8000ddc <HAL_GetTick>
 8002b9e:	1bc0      	subs	r0, r0, r7
 8002ba0:	42b0      	cmp	r0, r6
 8002ba2:	d208      	bcs.n	8002bb6 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8002ba4:	9a01      	ldr	r2, [sp, #4]
      count--;
 8002ba6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002ba8:	2a00      	cmp	r2, #0
      count--;
 8002baa:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8002bae:	bf08      	it	eq
 8002bb0:	2600      	moveq	r6, #0
      count--;
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	e7d8      	b.n	8002b68 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb6:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bba:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bbc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bc4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc6:	d014      	beq.n	8002bf2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bc8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002bca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002bce:	d007      	beq.n	8002be0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 8002bd0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8002bd2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8002bd4:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002bd8:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002bdc:	2003      	movs	r0, #3
 8002bde:	e7d3      	b.n	8002b88 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e7ee      	b.n	8002bd0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf2:	68aa      	ldr	r2, [r5, #8]
 8002bf4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002bf8:	d002      	beq.n	8002c00 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bfa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002bfe:	d1e3      	bne.n	8002bc8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e7de      	b.n	8002bc8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	eb01 0802 	add.w	r8, r1, r2
 8002c1a:	460d      	mov	r5, r1
 8002c1c:	4616      	mov	r6, r2
 8002c1e:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c20:	f7fe f8dc 	bl	8000ddc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c24:	4f46      	ldr	r7, [pc, #280]	; (8002d40 <SPI_EndRxTxTransaction+0x130>)
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c26:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 8002c2a:	f7fe f8d7 	bl	8000ddc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002c38:	0d1b      	lsrs	r3, r3, #20
 8002c3a:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8002c3e:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c40:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c42:	1c68      	adds	r0, r5, #1
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	d11f      	bne.n	8002c88 <SPI_EndRxTxTransaction+0x78>
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8002c4e:	d1fb      	bne.n	8002c48 <SPI_EndRxTxTransaction+0x38>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c50:	f7fe f8c4 	bl	8000ddc <HAL_GetTick>
 8002c54:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 8002c58:	f7fe f8c0 	bl	8000ddc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002c62:	fb08 f303 	mul.w	r3, r8, r3
 8002c66:	9301      	str	r3, [sp, #4]
  tmp_tickstart = HAL_GetTick();
 8002c68:	4607      	mov	r7, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c6a:	1c69      	adds	r1, r5, #1
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	d11f      	bne.n	8002cb0 <SPI_EndRxTxTransaction+0xa0>
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	0612      	lsls	r2, r2, #24
 8002c74:	d4fc      	bmi.n	8002c70 <SPI_EndRxTxTransaction+0x60>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c76:	4632      	mov	r2, r6
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff ff5e 	bl	8002b3c <SPI_WaitFifoStateUntilTimeout.constprop.1>
 8002c80:	bb40      	cbnz	r0, 8002cd4 <SPI_EndRxTxTransaction+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002c82:	b002      	add	sp, #8
 8002c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8002c8e:	d0df      	beq.n	8002c50 <SPI_EndRxTxTransaction+0x40>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c90:	f7fe f8a4 	bl	8000ddc <HAL_GetTick>
 8002c94:	eba0 000a 	sub.w	r0, r0, sl
 8002c98:	4548      	cmp	r0, r9
 8002c9a:	d221      	bcs.n	8002ce0 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8002c9c:	9a00      	ldr	r2, [sp, #0]
      count--;
 8002c9e:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 8002ca0:	2a00      	cmp	r2, #0
      count--;
 8002ca2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8002ca6:	bf08      	it	eq
 8002ca8:	f04f 0900 	moveq.w	r9, #0
      count--;
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	e7c8      	b.n	8002c42 <SPI_EndRxTxTransaction+0x32>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	061b      	lsls	r3, r3, #24
 8002cb4:	d5df      	bpl.n	8002c76 <SPI_EndRxTxTransaction+0x66>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cb6:	f7fe f891 	bl	8000ddc <HAL_GetTick>
 8002cba:	1bc3      	subs	r3, r0, r7
 8002cbc:	4543      	cmp	r3, r8
 8002cbe:	d20f      	bcs.n	8002ce0 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8002cc0:	9a01      	ldr	r2, [sp, #4]
      count--;
 8002cc2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002cc4:	2a00      	cmp	r2, #0
      count--;
 8002cc6:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8002cca:	bf08      	it	eq
 8002ccc:	f04f 0800 	moveq.w	r8, #0
      count--;
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	e7ca      	b.n	8002c6a <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
 8002cda:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cdc:	2003      	movs	r0, #3
 8002cde:	e7d0      	b.n	8002c82 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce0:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ce4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf0:	d019      	beq.n	8002d26 <SPI_EndRxTxTransaction+0x116>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cf2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002cf4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002cf8:	d107      	bne.n	8002d0a <SPI_EndRxTxTransaction+0xfa>
          SPI_RESET_CRC(hspi);
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d08:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d10:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8002d12:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d14:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8002d18:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1a:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8002d1c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8002d20:	b002      	add	sp, #8
 8002d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d26:	68a2      	ldr	r2, [r4, #8]
 8002d28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002d2c:	d002      	beq.n	8002d34 <SPI_EndRxTxTransaction+0x124>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d2e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002d32:	d1de      	bne.n	8002cf2 <SPI_EndRxTxTransaction+0xe2>
          __HAL_SPI_DISABLE(hspi);
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e7d9      	b.n	8002cf2 <SPI_EndRxTxTransaction+0xe2>
 8002d3e:	bf00      	nop
 8002d40:	20000000 	.word	0x20000000

08002d44 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d07f      	beq.n	8002e48 <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d48:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8002d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d50:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d52:	f1bc 0f00 	cmp.w	ip, #0
 8002d56:	d05c      	beq.n	8002e12 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d58:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d5e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d62:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d64:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d68:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d05e      	beq.n	8002e2c <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 8002d6e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d70:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d72:	2302      	movs	r3, #2
 8002d74:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002d78:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d7a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d82:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d84:	d94c      	bls.n	8002e20 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d86:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8002d8a:	d15f      	bne.n	8002e4c <HAL_SPI_Init+0x108>
 8002d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d8e:	2700      	movs	r7, #0
 8002d90:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d94:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8002d98:	6925      	ldr	r5, [r4, #16]
 8002d9a:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8002d9e:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8002da2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002da6:	4333      	orrs	r3, r6
 8002da8:	f005 0502 	and.w	r5, r5, #2
 8002dac:	432b      	orrs	r3, r5
 8002dae:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002db0:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db4:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002db8:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dba:	432b      	orrs	r3, r5
 8002dbc:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dc0:	f002 0208 	and.w	r2, r2, #8
 8002dc4:	ea42 0208 	orr.w	r2, r2, r8
 8002dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dcc:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dd0:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd4:	ea43 030e 	orr.w	r3, r3, lr
 8002dd8:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ddc:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de0:	4333      	orrs	r3, r6
 8002de2:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002de6:	f00c 0c10 	and.w	ip, ip, #16
 8002dea:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dee:	432b      	orrs	r3, r5
 8002df0:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002df2:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002df8:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dfa:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dfc:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8002e02:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e04:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e06:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e08:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 8002e0c:	4610      	mov	r0, r2
}
 8002e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e12:	6843      	ldr	r3, [r0, #4]
 8002e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e18:	d0a1      	beq.n	8002d5e <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e1a:	f8c0 c01c 	str.w	ip, [r0, #28]
 8002e1e:	e79e      	b.n	8002d5e <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e20:	d00c      	beq.n	8002e3c <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e22:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e26:	2000      	movs	r0, #0
 8002e28:	62a0      	str	r0, [r4, #40]	; 0x28
 8002e2a:	e7b3      	b.n	8002d94 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 8002e2c:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002e30:	4620      	mov	r0, r4
 8002e32:	f7fd feb3 	bl	8000b9c <HAL_SPI_MspInit>
 8002e36:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8002e3a:	e798      	b.n	8002d6e <HAL_SPI_Init+0x2a>
 8002e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e3e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8002e42:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8002e46:	e7a5      	b.n	8002d94 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8002e48:	2001      	movs	r0, #1
}
 8002e4a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e4c:	2700      	movs	r7, #0
 8002e4e:	e7ea      	b.n	8002e26 <HAL_SPI_Init+0xe2>

08002e50 <HAL_SPI_TransmitReceive>:
{
 8002e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e54:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002e56:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8002e5a:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8002e5c:	2801      	cmp	r0, #1
 8002e5e:	f000 809d 	beq.w	8002f9c <HAL_SPI_TransmitReceive+0x14c>
 8002e62:	4698      	mov	r8, r3
 8002e64:	2301      	movs	r3, #1
 8002e66:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002e6a:	468a      	mov	sl, r1
 8002e6c:	4691      	mov	r9, r2
 8002e6e:	f7fd ffb5 	bl	8000ddc <HAL_GetTick>
  tmp_state           = hspi->State;
 8002e72:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8002e76:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e78:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 8002e7a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8002e7c:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e7e:	d010      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x52>
 8002e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e84:	d008      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8002e86:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002e88:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8002e8a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8002e8c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e90:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e98:	68a2      	ldr	r2, [r4, #8]
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	d1f3      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x36>
 8002e9e:	2904      	cmp	r1, #4
 8002ea0:	d1f1      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ea2:	f1ba 0f00 	cmp.w	sl, #0
 8002ea6:	d07c      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x152>
 8002ea8:	f1b9 0f00 	cmp.w	r9, #0
 8002eac:	d079      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x152>
 8002eae:	f1b8 0f00 	cmp.w	r8, #0
 8002eb2:	d076      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002eb4:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eb8:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ebc:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ebe:	bf1c      	itt	ne
 8002ec0:	2205      	movne	r2, #5
 8002ec2:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ec6:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 8002ec8:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ecc:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ece:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ed2:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed4:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002ed6:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8002eda:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ede:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ee2:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ee6:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 8002ee8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002eec:	d85b      	bhi.n	8002fa6 <HAL_SPI_TransmitReceive+0x156>
 8002eee:	f1b8 0f01 	cmp.w	r8, #1
 8002ef2:	f240 80ea 	bls.w	80030ca <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ef6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002efa:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	0649      	lsls	r1, r1, #25
 8002f00:	f140 80ea 	bpl.w	80030d8 <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f04:	b96b      	cbnz	r3, 8002f22 <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 8002f06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	f240 8120 	bls.w	8003150 <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f10:	4651      	mov	r1, sl
 8002f12:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002f16:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8002f18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f1c:	3b02      	subs	r3, #2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002f22:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b92b      	cbnz	r3, 8002f36 <HAL_SPI_TransmitReceive+0xe6>
 8002f2a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8084 	beq.w	800303e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	6893      	ldr	r3, [r2, #8]
 8002f3a:	0799      	lsls	r1, r3, #30
 8002f3c:	d505      	bpl.n	8002f4a <HAL_SPI_TransmitReceive+0xfa>
 8002f3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	b113      	cbz	r3, 8002f4a <HAL_SPI_TransmitReceive+0xfa>
 8002f44:	2f00      	cmp	r7, #0
 8002f46:	f040 80e1 	bne.w	800310c <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f4a:	6893      	ldr	r3, [r2, #8]
 8002f4c:	f013 0301 	ands.w	r3, r3, #1
 8002f50:	d01b      	beq.n	8002f8a <HAL_SPI_TransmitReceive+0x13a>
 8002f52:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002f56:	b289      	uxth	r1, r1
 8002f58:	b1b9      	cbz	r1, 8002f8a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 8002f5a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002f5e:	b289      	uxth	r1, r1
 8002f60:	2901      	cmp	r1, #1
 8002f62:	f240 80c5 	bls.w	80030f0 <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f66:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f68:	68d1      	ldr	r1, [r2, #12]
 8002f6a:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 8002f6e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f72:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f74:	3902      	subs	r1, #2
 8002f76:	b289      	uxth	r1, r1
 8002f78:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f7c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002f80:	b289      	uxth	r1, r1
 8002f82:	2901      	cmp	r1, #1
 8002f84:	f240 80d1 	bls.w	800312a <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 8002f88:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f8a:	f7fd ff27 	bl	8000ddc <HAL_GetTick>
 8002f8e:	1b40      	subs	r0, r0, r5
 8002f90:	42b0      	cmp	r0, r6
 8002f92:	d3c7      	bcc.n	8002f24 <HAL_SPI_TransmitReceive+0xd4>
 8002f94:	1c73      	adds	r3, r6, #1
 8002f96:	d0c5      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 8002f98:	2003      	movs	r0, #3
 8002f9a:	e775      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8002f9c:	2002      	movs	r0, #2
}
 8002f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e770      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fa6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002faa:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fac:	6811      	ldr	r1, [r2, #0]
 8002fae:	0648      	lsls	r0, r1, #25
 8002fb0:	d403      	bmi.n	8002fba <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8002fb2:	6811      	ldr	r1, [r2, #0]
 8002fb4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002fb8:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 8081 	bne.w	80030c2 <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc0:	4651      	mov	r1, sl
 8002fc2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002fc6:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8002fc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fca:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002fd2:	1c72      	adds	r2, r6, #1
{
 8002fd4:	f04f 0701 	mov.w	r7, #1
 8002fd8:	d028      	beq.n	800302c <HAL_SPI_TransmitReceive+0x1dc>
 8002fda:	e06d      	b.n	80030b8 <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	6893      	ldr	r3, [r2, #8]
 8002fe0:	079b      	lsls	r3, r3, #30
 8002fe2:	d50d      	bpl.n	8003000 <HAL_SPI_TransmitReceive+0x1b0>
 8002fe4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	b153      	cbz	r3, 8003000 <HAL_SPI_TransmitReceive+0x1b0>
 8002fea:	b14f      	cbz	r7, 8003000 <HAL_SPI_TransmitReceive+0x1b0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002fee:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002ff2:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8002ff4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff6:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002ffe:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003000:	6893      	ldr	r3, [r2, #8]
 8003002:	f013 0301 	ands.w	r3, r3, #1
 8003006:	d00f      	beq.n	8003028 <HAL_SPI_TransmitReceive+0x1d8>
 8003008:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800300c:	b289      	uxth	r1, r1
 800300e:	b159      	cbz	r1, 8003028 <HAL_SPI_TransmitReceive+0x1d8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003010:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003012:	68d2      	ldr	r2, [r2, #12]
 8003014:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8003018:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800301c:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800301e:	3a01      	subs	r2, #1
 8003020:	b292      	uxth	r2, r2
        txallowed = 1U;
 8003022:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8003024:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003028:	f7fd fed8 	bl	8000ddc <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800302c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1d3      	bne.n	8002fdc <HAL_SPI_TransmitReceive+0x18c>
 8003034:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ce      	bne.n	8002fdc <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800303e:	462a      	mov	r2, r5
 8003040:	4631      	mov	r1, r6
 8003042:	4620      	mov	r0, r4
 8003044:	f7ff fde4 	bl	8002c10 <SPI_EndRxTxTransaction>
 8003048:	2800      	cmp	r0, #0
 800304a:	f43f af1d 	beq.w	8002e88 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800304e:	2320      	movs	r3, #32
 8003050:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003052:	2001      	movs	r0, #1
 8003054:	e718      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003056:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ee      	beq.n	800303e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	6893      	ldr	r3, [r2, #8]
 8003064:	0798      	lsls	r0, r3, #30
 8003066:	d50d      	bpl.n	8003084 <HAL_SPI_TransmitReceive+0x234>
 8003068:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	b153      	cbz	r3, 8003084 <HAL_SPI_TransmitReceive+0x234>
 800306e:	b14f      	cbz	r7, 8003084 <HAL_SPI_TransmitReceive+0x234>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003070:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003072:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003076:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8003078:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800307a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800307c:	3b01      	subs	r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003082:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003084:	6893      	ldr	r3, [r2, #8]
 8003086:	f013 0301 	ands.w	r3, r3, #1
 800308a:	d00f      	beq.n	80030ac <HAL_SPI_TransmitReceive+0x25c>
 800308c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003090:	b289      	uxth	r1, r1
 8003092:	b159      	cbz	r1, 80030ac <HAL_SPI_TransmitReceive+0x25c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003094:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003096:	68d2      	ldr	r2, [r2, #12]
 8003098:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800309c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a0:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80030a2:	3a01      	subs	r2, #1
 80030a4:	b292      	uxth	r2, r2
        txallowed = 1U;
 80030a6:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80030a8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030ac:	f7fd fe96 	bl	8000ddc <HAL_GetTick>
 80030b0:	1b40      	subs	r0, r0, r5
 80030b2:	42b0      	cmp	r0, r6
 80030b4:	f4bf af70 	bcs.w	8002f98 <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1cf      	bne.n	8003060 <HAL_SPI_TransmitReceive+0x210>
 80030c0:	e7c9      	b.n	8003056 <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c2:	f1b8 0f01 	cmp.w	r8, #1
 80030c6:	d184      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x182>
 80030c8:	e77a      	b.n	8002fc0 <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ca:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80030ce:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	0649      	lsls	r1, r1, #25
 80030d4:	f53f af17 	bmi.w	8002f06 <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 80030d8:	6811      	ldr	r1, [r2, #0]
 80030da:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80030de:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f43f af10 	beq.w	8002f06 <HAL_SPI_TransmitReceive+0xb6>
 80030e6:	f1b8 0f01 	cmp.w	r8, #1
 80030ea:	f47f af1a 	bne.w	8002f22 <HAL_SPI_TransmitReceive+0xd2>
 80030ee:	e70a      	b.n	8002f06 <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80030f2:	7b12      	ldrb	r2, [r2, #12]
 80030f4:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 80030f6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 80030fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80030fc:	3a01      	subs	r2, #1
 80030fe:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 8003100:	3101      	adds	r1, #1
        txallowed = 1U;
 8003102:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 8003104:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8003108:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800310a:	e73e      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 800310c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d910      	bls.n	8003136 <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003114:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003116:	f831 3b02 	ldrh.w	r3, [r1], #2
 800311a:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800311c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800311e:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003120:	3b02      	subs	r3, #2
 8003122:	b29b      	uxth	r3, r3
 8003124:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003126:	2700      	movs	r7, #0
 8003128:	e70f      	b.n	8002f4a <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800312a:	6851      	ldr	r1, [r2, #4]
 800312c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 8003130:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003132:	6051      	str	r1, [r2, #4]
 8003134:	e729      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800313c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800313e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003140:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 8003142:	3b01      	subs	r3, #1
 8003144:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8003146:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8003148:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800314a:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 800314c:	2700      	movs	r7, #0
 800314e:	e6fc      	b.n	8002f4a <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003150:	f89a 3000 	ldrb.w	r3, [sl]
 8003154:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8003156:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8003158:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800315a:	3b01      	subs	r3, #1
 800315c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800315e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8003160:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8003162:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003164:	e6dd      	b.n	8002f22 <HAL_SPI_TransmitReceive+0xd2>
 8003166:	bf00      	nop

08003168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003168:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800316a:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 800316e:	2000      	movs	r0, #0
 8003170:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8003174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop

0800317c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800317c:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8003180:	f244 037f 	movw	r3, #16511	; 0x407f
 8003184:	4013      	ands	r3, r2
 8003186:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800318a:	2000      	movs	r0, #0
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop

08003190 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003190:	b084      	sub	sp, #16
 8003192:	b430      	push	{r4, r5}
 8003194:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003196:	2501      	movs	r5, #1
 8003198:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800319c:	2000      	movs	r0, #0
{
 800319e:	ad03      	add	r5, sp, #12
  USBx->CNTR = 0U;
 80031a0:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
{
 80031a4:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80031a8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031ac:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80031b0:	bc30      	pop	{r4, r5}
 80031b2:	b004      	add	sp, #16
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop

080031b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031b8:	b4f0      	push	{r4, r5, r6, r7}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80031ba:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80031bc:	78ca      	ldrb	r2, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80031be:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80031c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	0c1b      	lsrs	r3, r3, #16
  switch (ep->type)
 80031ce:	2a03      	cmp	r2, #3
 80031d0:	f200 8173 	bhi.w	80034ba <USB_ActivateEndpoint+0x302>
 80031d4:	e8df f002 	tbb	[pc, r2]
 80031d8:	0204464a 	.word	0x0204464a
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80031dc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80031e0:	2200      	movs	r2, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80031e2:	f248 0480 	movw	r4, #32896	; 0x8080
 80031e6:	4323      	orrs	r3, r4
 80031e8:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80031ec:	780f      	ldrb	r7, [r1, #0]
 80031ee:	4db4      	ldr	r5, [pc, #720]	; (80034c0 <USB_ActivateEndpoint+0x308>)
 80031f0:	b23e      	sxth	r6, r7
 80031f2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	402b      	ands	r3, r5
 80031fa:	433b      	orrs	r3, r7
 80031fc:	4323      	orrs	r3, r4
 80031fe:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8003202:	7b0b      	ldrb	r3, [r1, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d134      	bne.n	8003272 <USB_ActivateEndpoint+0xba>
  {
    if (ep->is_in != 0U)
 8003208:	784b      	ldrb	r3, [r1, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80e5 	beq.w	80033da <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003210:	780b      	ldrb	r3, [r1, #0]
 8003212:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003216:	88cc      	ldrh	r4, [r1, #6]
 8003218:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800321c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003220:	b2b6      	uxth	r6, r6
 8003222:	0864      	lsrs	r4, r4, #1
 8003224:	0064      	lsls	r4, r4, #1
 8003226:	539c      	strh	r4, [r3, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003228:	780c      	ldrb	r4, [r1, #0]
 800322a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800322e:	065f      	lsls	r7, r3, #25
 8003230:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 8003234:	f100 8128 	bmi.w	8003488 <USB_ActivateEndpoint+0x2d0>

      if (ep->type != EP_TYPE_ISOC)
 8003238:	78cb      	ldrb	r3, [r1, #3]
 800323a:	2b01      	cmp	r3, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800323c:	8833      	ldrh	r3, [r6, #0]
 800323e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003246:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800324a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800324e:	bf18      	it	ne
 8003250:	f083 0320 	eorne.w	r3, r3, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325c:	8033      	strh	r3, [r6, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800325e:	4610      	mov	r0, r2
 8003260:	bcf0      	pop	{r4, r5, r6, r7}
 8003262:	4770      	bx	lr
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8003268:	2200      	movs	r2, #0
      break;
 800326a:	e7ba      	b.n	80031e2 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_CONTROL;
 800326c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      break;
 8003270:	e7b7      	b.n	80031e2 <USB_ActivateEndpoint+0x2a>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003272:	780c      	ldrb	r4, [r1, #0]
 8003274:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003278:	b29b      	uxth	r3, r3
 800327a:	402b      	ands	r3, r5
 800327c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003284:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003288:	780c      	ldrb	r4, [r1, #0]
 800328a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800328e:	890e      	ldrh	r6, [r1, #8]
 8003290:	2308      	movs	r3, #8
 8003292:	fb13 0404 	smlabb	r4, r3, r4, r0
 8003296:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800329a:	b2bf      	uxth	r7, r7
 800329c:	0876      	lsrs	r6, r6, #1
 800329e:	0076      	lsls	r6, r6, #1
 80032a0:	53e6      	strh	r6, [r4, r7]
 80032a2:	780f      	ldrb	r7, [r1, #0]
 80032a4:	894c      	ldrh	r4, [r1, #10]
 80032a6:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80032aa:	fb13 0307 	smlabb	r3, r3, r7, r0
 80032ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032b2:	0864      	lsrs	r4, r4, #1
 80032b4:	b2b6      	uxth	r6, r6
 80032b6:	0064      	lsls	r4, r4, #1
 80032b8:	539c      	strh	r4, [r3, r6]
    if (ep->is_in == 0U)
 80032ba:	784b      	ldrb	r3, [r1, #1]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d141      	bne.n	8003344 <USB_ActivateEndpoint+0x18c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032c0:	780c      	ldrb	r4, [r1, #0]
 80032c2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80032c6:	045f      	lsls	r7, r3, #17
 80032c8:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 80032cc:	d50c      	bpl.n	80032e8 <USB_ActivateEndpoint+0x130>
 80032ce:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	401d      	ands	r5, r3
 80032d6:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 80032da:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80032de:	f820 5024 	strh.w	r5, [r0, r4, lsl #2]
 80032e2:	780e      	ldrb	r6, [r1, #0]
 80032e4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032e8:	8833      	ldrh	r3, [r6, #0]
 80032ea:	065b      	lsls	r3, r3, #25
 80032ec:	d50e      	bpl.n	800330c <USB_ActivateEndpoint+0x154>
 80032ee:	8833      	ldrh	r3, [r6, #0]
 80032f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	0c1b      	lsrs	r3, r3, #16
 80032fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003304:	8033      	strh	r3, [r6, #0]
 8003306:	780e      	ldrb	r6, [r1, #0]
 8003308:	eb00 0686 	add.w	r6, r0, r6, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800330c:	8833      	ldrh	r3, [r6, #0]
 800330e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	f248 0480 	movw	r4, #32896	; 0x8080
 800331e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003322:	4323      	orrs	r3, r4
 8003324:	8033      	strh	r3, [r6, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003326:	7809      	ldrb	r1, [r1, #0]
 8003328:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800332c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	0c1b      	lsrs	r3, r3, #16
 8003338:	4323      	orrs	r3, r4
 800333a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 800333e:	bcf0      	pop	{r4, r5, r6, r7}
 8003340:	4610      	mov	r0, r2
 8003342:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003344:	780e      	ldrb	r6, [r1, #0]
 8003346:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800334a:	045f      	lsls	r7, r3, #17
 800334c:	eb00 0486 	add.w	r4, r0, r6, lsl #2
 8003350:	d50c      	bpl.n	800336c <USB_ActivateEndpoint+0x1b4>
 8003352:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8003356:	b29b      	uxth	r3, r3
 8003358:	401d      	ands	r5, r3
 800335a:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 800335e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003362:	f820 5026 	strh.w	r5, [r0, r6, lsl #2]
 8003366:	780c      	ldrb	r4, [r1, #0]
 8003368:	eb00 0484 	add.w	r4, r0, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800336c:	8823      	ldrh	r3, [r4, #0]
 800336e:	065b      	lsls	r3, r3, #25
 8003370:	d50e      	bpl.n	8003390 <USB_ActivateEndpoint+0x1d8>
 8003372:	8823      	ldrh	r3, [r4, #0]
 8003374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003384:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003388:	8023      	strh	r3, [r4, #0]
 800338a:	780c      	ldrb	r4, [r1, #0]
 800338c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
      if (ep->type != EP_TYPE_ISOC)
 8003390:	78cb      	ldrb	r3, [r1, #3]
 8003392:	2b01      	cmp	r3, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003394:	8823      	ldrh	r3, [r4, #0]
 8003396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800339e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80033a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80033a6:	bf18      	it	ne
 80033a8:	f083 0320 	eorne.w	r3, r3, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b4:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033b6:	7809      	ldrb	r1, [r1, #0]
 80033b8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80033bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d0:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 80033d4:	bcf0      	pop	{r4, r5, r6, r7}
 80033d6:	4610      	mov	r0, r2
 80033d8:	4770      	bx	lr
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033da:	780c      	ldrb	r4, [r1, #0]
 80033dc:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80033e0:	88cd      	ldrh	r5, [r1, #6]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80033e2:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033e4:	2308      	movs	r3, #8
 80033e6:	fb13 0404 	smlabb	r4, r3, r4, r0
 80033ea:	f204 4404 	addw	r4, r4, #1028	; 0x404
 80033ee:	086d      	lsrs	r5, r5, #1
 80033f0:	b2bf      	uxth	r7, r7
 80033f2:	006d      	lsls	r5, r5, #1
 80033f4:	53e5      	strh	r5, [r4, r7]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80033f6:	780d      	ldrb	r5, [r1, #0]
 80033f8:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80033fc:	fb13 0305 	smlabb	r3, r3, r5, r0
 8003400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003404:	b2a4      	uxth	r4, r4
 8003406:	b38e      	cbz	r6, 800346c <USB_ActivateEndpoint+0x2b4>
 8003408:	2e3e      	cmp	r6, #62	; 0x3e
 800340a:	d84b      	bhi.n	80034a4 <USB_ActivateEndpoint+0x2ec>
 800340c:	0875      	lsrs	r5, r6, #1
 800340e:	07f6      	lsls	r6, r6, #31
 8003410:	bf48      	it	mi
 8003412:	3501      	addmi	r5, #1
 8003414:	02ad      	lsls	r5, r5, #10
 8003416:	b2ad      	uxth	r5, r5
 8003418:	531d      	strh	r5, [r3, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800341a:	780d      	ldrb	r5, [r1, #0]
 800341c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8003420:	045b      	lsls	r3, r3, #17
 8003422:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 8003426:	d510      	bpl.n	800344a <USB_ActivateEndpoint+0x292>
 8003428:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800342c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003440:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
 8003444:	780c      	ldrb	r4, [r1, #0]
 8003446:	eb00 0484 	add.w	r4, r0, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800344a:	8823      	ldrh	r3, [r4, #0]
 800344c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	0c1b      	lsrs	r3, r3, #16
 8003458:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800345c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003464:	8023      	strh	r3, [r4, #0]
}
 8003466:	4610      	mov	r0, r2
 8003468:	bcf0      	pop	{r4, r5, r6, r7}
 800346a:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800346c:	5b1d      	ldrh	r5, [r3, r4]
 800346e:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8003472:	042d      	lsls	r5, r5, #16
 8003474:	0c2d      	lsrs	r5, r5, #16
 8003476:	531d      	strh	r5, [r3, r4]
 8003478:	5b1d      	ldrh	r5, [r3, r4]
 800347a:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800347e:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8003482:	b2ad      	uxth	r5, r5
 8003484:	531d      	strh	r5, [r3, r4]
 8003486:	e7c8      	b.n	800341a <USB_ActivateEndpoint+0x262>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003488:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800348c:	b29b      	uxth	r3, r3
 800348e:	401d      	ands	r5, r3
 8003490:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8003494:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8003498:	f820 5024 	strh.w	r5, [r0, r4, lsl #2]
 800349c:	780e      	ldrb	r6, [r1, #0]
 800349e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80034a2:	e6c9      	b.n	8003238 <USB_ActivateEndpoint+0x80>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80034a4:	0977      	lsrs	r7, r6, #5
 80034a6:	06f5      	lsls	r5, r6, #27
 80034a8:	4d06      	ldr	r5, [pc, #24]	; (80034c4 <USB_ActivateEndpoint+0x30c>)
 80034aa:	bf08      	it	eq
 80034ac:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80034b0:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80034b4:	b2ad      	uxth	r5, r5
 80034b6:	531d      	strh	r5, [r3, r4]
 80034b8:	e7af      	b.n	800341a <USB_ActivateEndpoint+0x262>
      ret = HAL_ERROR;
 80034ba:	2201      	movs	r2, #1
 80034bc:	e691      	b.n	80031e2 <USB_ActivateEndpoint+0x2a>
 80034be:	bf00      	nop
 80034c0:	ffff8f8f 	.word	0xffff8f8f
 80034c4:	ffff8000 	.word	0xffff8000

080034c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034c8:	b410      	push	{r4}
  if (ep->doublebuffer == 0U)
 80034ca:	7b0b      	ldrb	r3, [r1, #12]
 80034cc:	b9db      	cbnz	r3, 8003506 <USB_DeactivateEndpoint+0x3e>
  {
    if (ep->is_in != 0U)
 80034ce:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034d0:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in != 0U)
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80c1 	beq.w	800365a <USB_DeactivateEndpoint+0x192>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034d8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80034dc:	065b      	lsls	r3, r3, #25
 80034de:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80034e2:	f100 80d7 	bmi.w	8003694 <USB_DeactivateEndpoint+0x1cc>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034e6:	8813      	ldrh	r3, [r2, #0]
 80034e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80034fc:	2000      	movs	r0, #0
 80034fe:	f85d 4b04 	ldr.w	r4, [sp], #4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003502:	8013      	strh	r3, [r2, #0]
}
 8003504:	4770      	bx	lr
    if (ep->is_in == 0U)
 8003506:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003508:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in == 0U)
 800350a:	2b00      	cmp	r3, #0
 800350c:	d152      	bne.n	80035b4 <USB_DeactivateEndpoint+0xec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800350e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003512:	045b      	lsls	r3, r3, #17
 8003514:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8003518:	d510      	bpl.n	800353c <USB_DeactivateEndpoint+0x74>
 800351a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800351e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800352e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003532:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8003536:	780a      	ldrb	r2, [r1, #0]
 8003538:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800353c:	8813      	ldrh	r3, [r2, #0]
 800353e:	065c      	lsls	r4, r3, #25
 8003540:	d50e      	bpl.n	8003560 <USB_DeactivateEndpoint+0x98>
 8003542:	8813      	ldrh	r3, [r2, #0]
 8003544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003558:	8013      	strh	r3, [r2, #0]
 800355a:	780a      	ldrb	r2, [r1, #0]
 800355c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_TX_DTOG(USBx, ep->num);
 8003560:	8813      	ldrh	r3, [r2, #0]
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003576:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003578:	780c      	ldrb	r4, [r1, #0]
 800357a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800357e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	f248 0280 	movw	r2, #32896	; 0x8080
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	4313      	orrs	r3, r2
 8003590:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003594:	7809      	ldrb	r1, [r1, #0]
}
 8003596:	f85d 4b04 	ldr.w	r4, [sp], #4
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800359a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 80035b0:	2000      	movs	r0, #0
 80035b2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035b4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80035b8:	045b      	lsls	r3, r3, #17
 80035ba:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80035be:	d510      	bpl.n	80035e2 <USB_DeactivateEndpoint+0x11a>
 80035c0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80035c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80035dc:	780a      	ldrb	r2, [r1, #0]
 80035de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035e2:	8813      	ldrh	r3, [r2, #0]
 80035e4:	065b      	lsls	r3, r3, #25
 80035e6:	d50e      	bpl.n	8003606 <USB_DeactivateEndpoint+0x13e>
 80035e8:	8813      	ldrh	r3, [r2, #0]
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035fe:	8013      	strh	r3, [r2, #0]
 8003600:	780a      	ldrb	r2, [r1, #0]
 8003602:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_RX_DTOG(USBx, ep->num);
 8003606:	8813      	ldrh	r3, [r2, #0]
 8003608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800361e:	780c      	ldrb	r4, [r1, #0]
 8003620:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	f248 0280 	movw	r2, #32896	; 0x8080
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	4313      	orrs	r3, r2
 8003636:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800363a:	7809      	ldrb	r1, [r1, #0]
}
 800363c:	f85d 4b04 	ldr.w	r4, [sp], #4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003640:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	0c1b      	lsrs	r3, r3, #16
 8003650:	4313      	orrs	r3, r2
 8003652:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 8003656:	2000      	movs	r0, #0
 8003658:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800365a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800365e:	045b      	lsls	r3, r3, #17
 8003660:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8003664:	d510      	bpl.n	8003688 <USB_DeactivateEndpoint+0x1c0>
 8003666:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8003682:	780a      	ldrb	r2, [r1, #0]
 8003684:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003688:	8813      	ldrh	r3, [r2, #0]
 800368a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	e72d      	b.n	80034f0 <USB_DeactivateEndpoint+0x28>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003694:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	0c1b      	lsrs	r3, r3, #16
 80036a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036ac:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80036b0:	780a      	ldrb	r2, [r1, #0]
 80036b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80036b6:	e716      	b.n	80034e6 <USB_DeactivateEndpoint+0x1e>

080036b8 <USB_EPStartXfer>:
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036b8:	784b      	ldrb	r3, [r1, #1]
 80036ba:	2b01      	cmp	r3, #1
{
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80036be:	d06f      	beq.n	80037a0 <USB_EPStartXfer+0xe8>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80036c0:	7b0a      	ldrb	r2, [r1, #12]
 80036c2:	2a00      	cmp	r2, #0
 80036c4:	d03c      	beq.n	8003740 <USB_EPStartXfer+0x88>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80036c6:	78ca      	ldrb	r2, [r1, #3]
 80036c8:	2a02      	cmp	r2, #2
 80036ca:	f000 8126 	beq.w	800391a <USB_EPStartXfer+0x262>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80036ce:	2a01      	cmp	r2, #1
 80036d0:	f040 8121 	bne.w	8003916 <USB_EPStartXfer+0x25e>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80036d4:	698a      	ldr	r2, [r1, #24]
 80036d6:	690c      	ldr	r4, [r1, #16]
 80036d8:	42a2      	cmp	r2, r4
        {
          len = ep->maxpacket;
          ep->xfer_len -= len;
 80036da:	bf8a      	itet	hi
 80036dc:	1b15      	subhi	r5, r2, r4
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 80036de:	2500      	movls	r5, #0
 80036e0:	4622      	movhi	r2, r4
 80036e2:	618d      	str	r5, [r1, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80036e4:	bb43      	cbnz	r3, 8003738 <USB_EPStartXfer+0x80>
 80036e6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80036ea:	780b      	ldrb	r3, [r1, #0]
 80036ec:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80036f0:	fa15 f484 	uxtah	r4, r5, r4
 80036f4:	2608      	movs	r6, #8
 80036f6:	fb16 4303 	smlabb	r3, r6, r3, r4
 80036fa:	2a00      	cmp	r2, #0
 80036fc:	f000 82a5 	beq.w	8003c4a <USB_EPStartXfer+0x592>
 8003700:	2a3e      	cmp	r2, #62	; 0x3e
 8003702:	f200 8394 	bhi.w	8003e2e <USB_EPStartXfer+0x776>
 8003706:	0854      	lsrs	r4, r2, #1
 8003708:	f012 0601 	ands.w	r6, r2, #1
 800370c:	4625      	mov	r5, r4
 800370e:	bf18      	it	ne
 8003710:	1c65      	addne	r5, r4, #1
 8003712:	02ad      	lsls	r5, r5, #10
 8003714:	b2ad      	uxth	r5, r5
 8003716:	801d      	strh	r5, [r3, #0]
 8003718:	784d      	ldrb	r5, [r1, #1]
 800371a:	2d00      	cmp	r5, #0
 800371c:	f000 8375 	beq.w	8003e0a <USB_EPStartXfer+0x752>
 8003720:	2d01      	cmp	r5, #1
 8003722:	d109      	bne.n	8003738 <USB_EPStartXfer+0x80>
 8003724:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003728:	780c      	ldrb	r4, [r1, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003730:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003734:	b292      	uxth	r2, r2
 8003736:	52c2      	strh	r2, [r0, r3]
 8003738:	780a      	ldrb	r2, [r1, #0]
 800373a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800373e:	e01f      	b.n	8003780 <USB_EPStartXfer+0xc8>
      if (ep->xfer_len > ep->maxpacket)
 8003740:	698c      	ldr	r4, [r1, #24]
 8003742:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003744:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 8003746:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 8003748:	bf84      	itt	hi
 800374a:	1ae2      	subhi	r2, r4, r3
 800374c:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800374e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003752:	618a      	str	r2, [r1, #24]
 8003754:	f200 4206 	addw	r2, r0, #1030	; 0x406
 8003758:	fa12 f383 	uxtah	r3, r2, r3
 800375c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003760:	2c00      	cmp	r4, #0
 8003762:	f000 80c7 	beq.w	80038f4 <USB_EPStartXfer+0x23c>
 8003766:	2c3e      	cmp	r4, #62	; 0x3e
 8003768:	f200 8122 	bhi.w	80039b0 <USB_EPStartXfer+0x2f8>
 800376c:	0862      	lsrs	r2, r4, #1
 800376e:	07e7      	lsls	r7, r4, #31
 8003770:	bf48      	it	mi
 8003772:	3201      	addmi	r2, #1
 8003774:	0292      	lsls	r2, r2, #10
 8003776:	b292      	uxth	r2, r2
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	780a      	ldrb	r2, [r1, #0]
 800377c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003780:	8813      	ldrh	r3, [r2, #0]
 8003782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800379c:	2000      	movs	r0, #0
}
 800379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 80037a0:	690e      	ldr	r6, [r1, #16]
 80037a2:	698a      	ldr	r2, [r1, #24]
    if (ep->doublebuffer == 0U)
 80037a4:	7b0b      	ldrb	r3, [r1, #12]
 80037a6:	42b2      	cmp	r2, r6
 80037a8:	bf28      	it	cs
 80037aa:	4632      	movcs	r2, r6
 80037ac:	bb7b      	cbnz	r3, 800380e <USB_EPStartXfer+0x156>
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80037ae:	b296      	uxth	r6, r2
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037b0:	88cb      	ldrh	r3, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037b2:	694d      	ldr	r5, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80037b4:	3601      	adds	r6, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037b6:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80037ba:	0876      	lsrs	r6, r6, #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037bc:	b297      	uxth	r7, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037be:	441c      	add	r4, r3
  for (i = n; i != 0U; i--)
 80037c0:	d008      	beq.n	80037d4 <USB_EPStartXfer+0x11c>
  uint8_t *pBuf = pbUsrBuf;
 80037c2:	462b      	mov	r3, r5
 80037c4:	1ae4      	subs	r4, r4, r3
 80037c6:	eb05 0546 	add.w	r5, r5, r6, lsl #1
  {
    temp1 = *pBuf;
 80037ca:	881a      	ldrh	r2, [r3, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 80037cc:	531a      	strh	r2, [r3, r4]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80037ce:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 80037d0:	42ab      	cmp	r3, r5
 80037d2:	d1fa      	bne.n	80037ca <USB_EPStartXfer+0x112>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80037d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80037d8:	780a      	ldrb	r2, [r1, #0]
 80037da:	f200 4402 	addw	r4, r0, #1026	; 0x402
 80037de:	fa14 f383 	uxtah	r3, r4, r3
 80037e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037e6:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80037e8:	780a      	ldrb	r2, [r1, #0]
 80037ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003806:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  return HAL_OK;
 800380a:	2000      	movs	r0, #0
}
 800380c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 800380e:	78cb      	ldrb	r3, [r1, #3]
 8003810:	2b02      	cmp	r3, #2
 8003812:	f000 80db 	beq.w	80039cc <USB_EPStartXfer+0x314>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003816:	780d      	ldrb	r5, [r1, #0]
        ep->xfer_len_db -= len;
 8003818:	6a0c      	ldr	r4, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800381a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800381e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800382e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003832:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003836:	780f      	ldrb	r7, [r1, #0]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003838:	784d      	ldrb	r5, [r1, #1]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800383a:	b23b      	sxth	r3, r7
        ep->xfer_len_db -= len;
 800383c:	1aa4      	subs	r4, r4, r2
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800383e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
        ep->xfer_len_db -= len;
 8003842:	620c      	str	r4, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003844:	065b      	lsls	r3, r3, #25
 8003846:	f140 8123 	bpl.w	8003a90 <USB_EPStartXfer+0x3d8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800384a:	2d00      	cmp	r5, #0
 800384c:	f000 81a3 	beq.w	8003b96 <USB_EPStartXfer+0x4de>
 8003850:	2d01      	cmp	r5, #1
 8003852:	d109      	bne.n	8003868 <USB_EPStartXfer+0x1b0>
 8003854:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003858:	f200 4506 	addw	r5, r0, #1030	; 0x406
 800385c:	fa15 f383 	uxtah	r3, r5, r3
 8003860:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003864:	b295      	uxth	r5, r2
 8003866:	801d      	strh	r5, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003868:	fa1f fc82 	uxth.w	ip, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800386c:	894f      	ldrh	r7, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800386e:	694d      	ldr	r5, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003870:	f10c 0c01 	add.w	ip, ip, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003874:	f500 6380 	add.w	r3, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8003878:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800387c:	443b      	add	r3, r7
  for (i = n; i != 0U; i--)
 800387e:	d008      	beq.n	8003892 <USB_EPStartXfer+0x1da>
 8003880:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8003884:	462f      	mov	r7, r5
    temp1 = *pBuf;
 8003886:	f837 eb02 	ldrh.w	lr, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800388a:	f823 eb02 	strh.w	lr, [r3], #2
  for (i = n; i != 0U; i--)
 800388e:	459c      	cmp	ip, r3
 8003890:	d1f9      	bne.n	8003886 <USB_EPStartXfer+0x1ce>
          if (ep->xfer_len_db > ep->maxpacket)
 8003892:	42a6      	cmp	r6, r4
            ep->xfer_len_db -= len;
 8003894:	bf38      	it	cc
 8003896:	1aa3      	subcc	r3, r4, r2
          ep->xfer_buff += len;
 8003898:	4415      	add	r5, r2
            ep->xfer_len_db = 0U;
 800389a:	bf2c      	ite	cs
 800389c:	2300      	movcs	r3, #0
 800389e:	4614      	movcc	r4, r2
          ep->xfer_buff += len;
 80038a0:	614d      	str	r5, [r1, #20]
            ep->xfer_len_db -= len;
 80038a2:	620b      	str	r3, [r1, #32]
          if (len > 0U)
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	d09f      	beq.n	80037e8 <USB_EPStartXfer+0x130>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038a8:	784b      	ldrb	r3, [r1, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 826c 	bne.w	8003d88 <USB_EPStartXfer+0x6d0>
 80038b0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80038b4:	780a      	ldrb	r2, [r1, #0]
 80038b6:	f200 4602 	addw	r6, r0, #1026	; 0x402
 80038ba:	fa16 f383 	uxtah	r3, r6, r3
 80038be:	2c3e      	cmp	r4, #62	; 0x3e
 80038c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038c4:	f200 8362 	bhi.w	8003f8c <USB_EPStartXfer+0x8d4>
 80038c8:	0862      	lsrs	r2, r4, #1
 80038ca:	07e6      	lsls	r6, r4, #31
 80038cc:	bf48      	it	mi
 80038ce:	3201      	addmi	r2, #1
 80038d0:	0292      	lsls	r2, r2, #10
 80038d2:	b292      	uxth	r2, r2
 80038d4:	801a      	strh	r2, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80038d6:	890a      	ldrh	r2, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80038d8:	3401      	adds	r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80038da:	f500 6380 	add.w	r3, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80038de:	0864      	lsrs	r4, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80038e0:	4413      	add	r3, r2
  for (i = n; i != 0U; i--)
 80038e2:	eb05 0444 	add.w	r4, r5, r4, lsl #1
    temp1 = *pBuf;
 80038e6:	f835 2b02 	ldrh.w	r2, [r5], #2
    *pdwVal = (uint16_t)temp2;
 80038ea:	f823 2b02 	strh.w	r2, [r3], #2
  for (i = n; i != 0U; i--)
 80038ee:	42ac      	cmp	r4, r5
 80038f0:	d1f9      	bne.n	80038e6 <USB_EPStartXfer+0x22e>
 80038f2:	e779      	b.n	80037e8 <USB_EPStartXfer+0x130>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80038f4:	881a      	ldrh	r2, [r3, #0]
 80038f6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80038fa:	0412      	lsls	r2, r2, #16
 80038fc:	0c12      	lsrs	r2, r2, #16
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003906:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800390a:	b292      	uxth	r2, r2
 800390c:	801a      	strh	r2, [r3, #0]
 800390e:	780a      	ldrb	r2, [r1, #0]
 8003910:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003914:	e734      	b.n	8003780 <USB_EPStartXfer+0xc8>
        return HAL_ERROR;
 8003916:	2001      	movs	r0, #1
}
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800391a:	bb2b      	cbnz	r3, 8003968 <USB_EPStartXfer+0x2b0>
 800391c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003920:	780d      	ldrb	r5, [r1, #0]
 8003922:	690c      	ldr	r4, [r1, #16]
 8003924:	f200 4202 	addw	r2, r0, #1026	; 0x402
 8003928:	fa12 f383 	uxtah	r3, r2, r3
 800392c:	2208      	movs	r2, #8
 800392e:	fb12 3305 	smlabb	r3, r2, r5, r3
 8003932:	2c00      	cmp	r4, #0
 8003934:	f000 8149 	beq.w	8003bca <USB_EPStartXfer+0x512>
 8003938:	2c3e      	cmp	r4, #62	; 0x3e
 800393a:	f200 81b1 	bhi.w	8003ca0 <USB_EPStartXfer+0x5e8>
 800393e:	0862      	lsrs	r2, r4, #1
 8003940:	07e5      	lsls	r5, r4, #31
 8003942:	bf48      	it	mi
 8003944:	3201      	addmi	r2, #1
 8003946:	0292      	lsls	r2, r2, #10
 8003948:	b292      	uxth	r2, r2
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	784b      	ldrb	r3, [r1, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 81b4 	bne.w	8003cbc <USB_EPStartXfer+0x604>
 8003954:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003958:	780c      	ldrb	r4, [r1, #0]
 800395a:	f200 4506 	addw	r5, r0, #1030	; 0x406
 800395e:	fa15 f383 	uxtah	r3, r5, r3
 8003962:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003966:	801a      	strh	r2, [r3, #0]
        if (ep->xfer_count != 0U)
 8003968:	69cb      	ldr	r3, [r1, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f43f aee4 	beq.w	8003738 <USB_EPStartXfer+0x80>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003970:	780c      	ldrb	r4, [r1, #0]
 8003972:	f830 5024 	ldrh.w	r5, [r0, r4, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003976:	f244 0340 	movw	r3, #16448	; 0x4040
 800397a:	ea03 0605 	and.w	r6, r3, r5
 800397e:	43ab      	bics	r3, r5
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003980:	eb00 0284 	add.w	r2, r0, r4, lsl #2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003984:	d002      	beq.n	800398c <USB_EPStartXfer+0x2d4>
 8003986:	2e00      	cmp	r6, #0
 8003988:	f47f aefa 	bne.w	8003780 <USB_EPStartXfer+0xc8>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800398c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039a4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80039a8:	780a      	ldrb	r2, [r1, #0]
 80039aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80039ae:	e6e7      	b.n	8003780 <USB_EPStartXfer+0xc8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80039b0:	0965      	lsrs	r5, r4, #5
 80039b2:	4aba      	ldr	r2, [pc, #744]	; (8003c9c <USB_EPStartXfer+0x5e4>)
 80039b4:	06e6      	lsls	r6, r4, #27
 80039b6:	bf08      	it	eq
 80039b8:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80039bc:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80039c0:	b292      	uxth	r2, r2
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	780a      	ldrb	r2, [r1, #0]
 80039c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80039ca:	e6d9      	b.n	8003780 <USB_EPStartXfer+0xc8>
        if (ep->xfer_len_db > ep->maxpacket)
 80039cc:	6a0b      	ldr	r3, [r1, #32]
 80039ce:	429e      	cmp	r6, r3
 80039d0:	f080 80b3 	bcs.w	8003b3a <USB_EPStartXfer+0x482>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80039d4:	780d      	ldrb	r5, [r1, #0]
 80039d6:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 80039da:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80039de:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80039e2:	0424      	lsls	r4, r4, #16
 80039e4:	0c24      	lsrs	r4, r4, #16
 80039e6:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80039ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80039ee:	f820 4025 	strh.w	r4, [r0, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039f2:	780d      	ldrb	r5, [r1, #0]
 80039f4:	b22f      	sxth	r7, r5
          ep->xfer_len_db -= len;
 80039f6:	1a9c      	subs	r4, r3, r2
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039f8:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
          ep->xfer_len_db -= len;
 80039fc:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039fe:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a02:	784b      	ldrb	r3, [r1, #1]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a04:	f000 8169 	beq.w	8003cda <USB_EPStartXfer+0x622>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f040 8253 	bne.w	8003eb4 <USB_EPStartXfer+0x7fc>
 8003a0e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a12:	f200 4706 	addw	r7, r0, #1030	; 0x406
 8003a16:	fa17 f383 	uxtah	r3, r7, r3
 8003a1a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	f040 82f6 	bne.w	8004010 <USB_EPStartXfer+0x958>
 8003a24:	881f      	ldrh	r7, [r3, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a26:	694d      	ldr	r5, [r1, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a28:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8003a2c:	043f      	lsls	r7, r7, #16
 8003a2e:	0c3f      	lsrs	r7, r7, #16
 8003a30:	801f      	strh	r7, [r3, #0]
 8003a32:	881f      	ldrh	r7, [r3, #0]
 8003a34:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8003a38:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8003a3c:	b2bf      	uxth	r7, r7
 8003a3e:	801f      	strh	r7, [r3, #0]
            if (ep->xfer_len_db > ep->maxpacket)
 8003a40:	42a6      	cmp	r6, r4
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a42:	784b      	ldrb	r3, [r1, #1]
              ep->xfer_len_db -= len;
 8003a44:	bf38      	it	cc
 8003a46:	1aa6      	subcc	r6, r4, r2
            ep->xfer_buff += len;
 8003a48:	4415      	add	r5, r2
              ep->xfer_len_db = 0U;
 8003a4a:	bf28      	it	cs
 8003a4c:	2600      	movcs	r6, #0
            ep->xfer_buff += len;
 8003a4e:	614d      	str	r5, [r1, #20]
              ep->xfer_len_db -= len;
 8003a50:	bf38      	it	cc
 8003a52:	4614      	movcc	r4, r2
 8003a54:	620e      	str	r6, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 820d 	bne.w	8003e76 <USB_EPStartXfer+0x7be>
 8003a5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a60:	780a      	ldrb	r2, [r1, #0]
 8003a62:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8003a66:	fa16 f383 	uxtah	r3, r6, r3
 8003a6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a6e:	2c00      	cmp	r4, #0
 8003a70:	f040 82df 	bne.w	8004032 <USB_EPStartXfer+0x97a>
 8003a74:	881a      	ldrh	r2, [r3, #0]
 8003a76:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003a7a:	0412      	lsls	r2, r2, #16
 8003a7c:	0c12      	lsrs	r2, r2, #16
 8003a7e:	801a      	strh	r2, [r3, #0]
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003a86:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003a8a:	b292      	uxth	r2, r2
 8003a8c:	801a      	strh	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 8003a8e:	e6ab      	b.n	80037e8 <USB_EPStartXfer+0x130>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a90:	2d00      	cmp	r5, #0
 8003a92:	f000 80bf 	beq.w	8003c14 <USB_EPStartXfer+0x55c>
 8003a96:	2d01      	cmp	r5, #1
 8003a98:	d109      	bne.n	8003aae <USB_EPStartXfer+0x3f6>
 8003a9a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a9e:	f200 4502 	addw	r5, r0, #1026	; 0x402
 8003aa2:	fa15 f383 	uxtah	r3, r5, r3
 8003aa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003aaa:	b295      	uxth	r5, r2
 8003aac:	801d      	strh	r5, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003aae:	890d      	ldrh	r5, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ab0:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ab4:	b297      	uxth	r7, r2
 8003ab6:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ab8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8003abc:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003abe:	4405      	add	r5, r0
  for (i = n; i != 0U; i--)
 8003ac0:	d008      	beq.n	8003ad4 <USB_EPStartXfer+0x41c>
 8003ac2:	eb0c 0747 	add.w	r7, ip, r7, lsl #1
            ep->xfer_len_db = 0U;
 8003ac6:	4663      	mov	r3, ip
    temp1 = *pBuf;
 8003ac8:	f833 eb02 	ldrh.w	lr, [r3], #2
    *pdwVal = (uint16_t)temp2;
 8003acc:	f825 eb02 	strh.w	lr, [r5], #2
  for (i = n; i != 0U; i--)
 8003ad0:	429f      	cmp	r7, r3
 8003ad2:	d1f9      	bne.n	8003ac8 <USB_EPStartXfer+0x410>
          if (ep->xfer_len_db > ep->maxpacket)
 8003ad4:	42a6      	cmp	r6, r4
            ep->xfer_len_db -= len;
 8003ad6:	bf38      	it	cc
 8003ad8:	1aa3      	subcc	r3, r4, r2
          ep->xfer_buff += len;
 8003ada:	eb0c 0502 	add.w	r5, ip, r2
            ep->xfer_len_db = 0U;
 8003ade:	bf2c      	ite	cs
 8003ae0:	2300      	movcs	r3, #0
 8003ae2:	4614      	movcc	r4, r2
          ep->xfer_buff += len;
 8003ae4:	614d      	str	r5, [r1, #20]
            ep->xfer_len_db -= len;
 8003ae6:	620b      	str	r3, [r1, #32]
          if (len > 0U)
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	f43f ae7d 	beq.w	80037e8 <USB_EPStartXfer+0x130>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003aee:	784b      	ldrb	r3, [r1, #1]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f040 8174 	bne.w	8003dde <USB_EPStartXfer+0x726>
 8003af6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003afa:	780a      	ldrb	r2, [r1, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b06:	2c3e      	cmp	r4, #62	; 0x3e
 8003b08:	4403      	add	r3, r0
 8003b0a:	f200 824a 	bhi.w	8003fa2 <USB_EPStartXfer+0x8ea>
 8003b0e:	0862      	lsrs	r2, r4, #1
 8003b10:	07e6      	lsls	r6, r4, #31
 8003b12:	bf48      	it	mi
 8003b14:	3201      	addmi	r2, #1
 8003b16:	0292      	lsls	r2, r2, #10
 8003b18:	b292      	uxth	r2, r2
 8003b1a:	801a      	strh	r2, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b1c:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003b1e:	1c63      	adds	r3, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003b24:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b26:	4402      	add	r2, r0
  for (i = n; i != 0U; i--)
 8003b28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    temp1 = *pBuf;
 8003b2c:	f835 4b02 	ldrh.w	r4, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8003b30:	f822 4b02 	strh.w	r4, [r2], #2
  for (i = n; i != 0U; i--)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d1f9      	bne.n	8003b2c <USB_EPStartXfer+0x474>
 8003b38:	e656      	b.n	80037e8 <USB_EPStartXfer+0x130>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003b3a:	780a      	ldrb	r2, [r1, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b3c:	694d      	ldr	r5, [r1, #20]
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003b3e:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8003b42:	f424 44e2 	bic.w	r4, r4, #28928	; 0x7100
 8003b46:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8003b4a:	0424      	lsls	r4, r4, #16
 8003b4c:	0c24      	lsrs	r4, r4, #16
 8003b4e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003b52:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003b56:	f820 4022 	strh.w	r4, [r0, r2, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003b5a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b5e:	780c      	ldrb	r4, [r1, #0]
 8003b60:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8003b64:	fa16 f282 	uxtah	r2, r6, r2
 8003b68:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8003b6c:	b29c      	uxth	r4, r3
 8003b6e:	8014      	strh	r4, [r2, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b70:	890a      	ldrh	r2, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003b72:	4623      	mov	r3, r4
 8003b74:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b76:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8003b7a:	4414      	add	r4, r2
  for (i = n; i != 0U; i--)
 8003b7c:	085a      	lsrs	r2, r3, #1
 8003b7e:	f43f ae33 	beq.w	80037e8 <USB_EPStartXfer+0x130>
  uint8_t *pBuf = pbUsrBuf;
 8003b82:	462b      	mov	r3, r5
 8003b84:	1ae4      	subs	r4, r4, r3
 8003b86:	eb05 0542 	add.w	r5, r5, r2, lsl #1
    temp1 = *pBuf;
 8003b8a:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 8003b8c:	531a      	strh	r2, [r3, r4]
    pBuf++;
 8003b8e:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 8003b90:	429d      	cmp	r5, r3
 8003b92:	d1fa      	bne.n	8003b8a <USB_EPStartXfer+0x4d2>
 8003b94:	e628      	b.n	80037e8 <USB_EPStartXfer+0x130>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b96:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003b9a:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8003b9e:	fa15 f383 	uxtah	r3, r5, r3
 8003ba2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	f040 8105 	bne.w	8003db6 <USB_EPStartXfer+0x6fe>
 8003bac:	881f      	ldrh	r7, [r3, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bae:	694d      	ldr	r5, [r1, #20]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003bb0:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8003bb4:	043f      	lsls	r7, r7, #16
 8003bb6:	0c3f      	lsrs	r7, r7, #16
 8003bb8:	801f      	strh	r7, [r3, #0]
 8003bba:	881f      	ldrh	r7, [r3, #0]
 8003bbc:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8003bc0:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8003bc4:	b2bf      	uxth	r7, r7
 8003bc6:	801f      	strh	r7, [r3, #0]
  for (i = n; i != 0U; i--)
 8003bc8:	e663      	b.n	8003892 <USB_EPStartXfer+0x1da>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003bca:	881d      	ldrh	r5, [r3, #0]
 8003bcc:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8003bd0:	042d      	lsls	r5, r5, #16
 8003bd2:	0c2d      	lsrs	r5, r5, #16
 8003bd4:	801d      	strh	r5, [r3, #0]
 8003bd6:	881d      	ldrh	r5, [r3, #0]
 8003bd8:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8003bdc:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8003be0:	b2ad      	uxth	r5, r5
 8003be2:	801d      	strh	r5, [r3, #0]
 8003be4:	784b      	ldrb	r3, [r1, #1]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d168      	bne.n	8003cbc <USB_EPStartXfer+0x604>
 8003bea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003bee:	780c      	ldrb	r4, [r1, #0]
 8003bf0:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8003bf4:	fa15 f383 	uxtah	r3, r5, r3
 8003bf8:	fb12 3304 	smlabb	r3, r2, r4, r3
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003c02:	0412      	lsls	r2, r2, #16
 8003c04:	0c12      	lsrs	r2, r2, #16
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	b292      	uxth	r2, r2
 8003c0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	e6a9      	b.n	8003968 <USB_EPStartXfer+0x2b0>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003c18:	f200 4502 	addw	r5, r0, #1026	; 0x402
 8003c1c:	fa15 f383 	uxtah	r3, r5, r3
 8003c20:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c24:	2a00      	cmp	r2, #0
 8003c26:	f040 809c 	bne.w	8003d62 <USB_EPStartXfer+0x6aa>
 8003c2a:	881d      	ldrh	r5, [r3, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c2c:	f8d1 c014 	ldr.w	ip, [r1, #20]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c30:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8003c34:	042d      	lsls	r5, r5, #16
 8003c36:	0c2d      	lsrs	r5, r5, #16
 8003c38:	801d      	strh	r5, [r3, #0]
 8003c3a:	881d      	ldrh	r5, [r3, #0]
 8003c3c:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8003c40:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8003c44:	b2ad      	uxth	r5, r5
 8003c46:	801d      	strh	r5, [r3, #0]
  for (i = n; i != 0U; i--)
 8003c48:	e744      	b.n	8003ad4 <USB_EPStartXfer+0x41c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003c4a:	881c      	ldrh	r4, [r3, #0]
 8003c4c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8003c50:	0424      	lsls	r4, r4, #16
 8003c52:	0c24      	lsrs	r4, r4, #16
 8003c54:	801c      	strh	r4, [r3, #0]
 8003c56:	881c      	ldrh	r4, [r3, #0]
 8003c58:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003c5c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003c60:	b2a4      	uxth	r4, r4
 8003c62:	801c      	strh	r4, [r3, #0]
 8003c64:	784d      	ldrb	r5, [r1, #1]
 8003c66:	2d00      	cmp	r5, #0
 8003c68:	f47f ad5a 	bne.w	8003720 <USB_EPStartXfer+0x68>
 8003c6c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003c70:	780a      	ldrb	r2, [r1, #0]
 8003c72:	f200 4406 	addw	r4, r0, #1030	; 0x406
 8003c76:	fa14 f383 	uxtah	r3, r4, r3
 8003c7a:	fb16 3302 	smlabb	r3, r6, r2, r3
 8003c7e:	881a      	ldrh	r2, [r3, #0]
 8003c80:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003c84:	0412      	lsls	r2, r2, #16
 8003c86:	0c12      	lsrs	r2, r2, #16
 8003c88:	801a      	strh	r2, [r3, #0]
 8003c8a:	881a      	ldrh	r2, [r3, #0]
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c92:	801a      	strh	r2, [r3, #0]
 8003c94:	780a      	ldrb	r2, [r1, #0]
 8003c96:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003c9a:	e571      	b.n	8003780 <USB_EPStartXfer+0xc8>
 8003c9c:	ffff8000 	.word	0xffff8000
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003ca0:	0965      	lsrs	r5, r4, #5
 8003ca2:	06e2      	lsls	r2, r4, #27
 8003ca4:	4ab8      	ldr	r2, [pc, #736]	; (8003f88 <USB_EPStartXfer+0x8d0>)
 8003ca6:	bf08      	it	eq
 8003ca8:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8003cac:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	801a      	strh	r2, [r3, #0]
 8003cb4:	784b      	ldrb	r3, [r1, #1]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f43f ae4c 	beq.w	8003954 <USB_EPStartXfer+0x29c>
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f47f ae53 	bne.w	8003968 <USB_EPStartXfer+0x2b0>
 8003cc2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003cc6:	780a      	ldrb	r2, [r1, #0]
 8003cc8:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8003ccc:	fa15 f383 	uxtah	r3, r5, r3
 8003cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cd4:	b2a4      	uxth	r4, r4
 8003cd6:	801c      	strh	r4, [r3, #0]
 8003cd8:	e646      	b.n	8003968 <USB_EPStartXfer+0x2b0>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8128 	bne.w	8003f30 <USB_EPStartXfer+0x878>
 8003ce0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003ce4:	f200 4702 	addw	r7, r0, #1026	; 0x402
 8003ce8:	fa17 f383 	uxtah	r3, r7, r3
 8003cec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	f040 817c 	bne.w	8003fee <USB_EPStartXfer+0x936>
 8003cf6:	881f      	ldrh	r7, [r3, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cf8:	694d      	ldr	r5, [r1, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cfa:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8003cfe:	043f      	lsls	r7, r7, #16
 8003d00:	0c3f      	lsrs	r7, r7, #16
 8003d02:	801f      	strh	r7, [r3, #0]
 8003d04:	881f      	ldrh	r7, [r3, #0]
 8003d06:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8003d0a:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8003d0e:	b2bf      	uxth	r7, r7
 8003d10:	801f      	strh	r7, [r3, #0]
            if (ep->xfer_len_db > ep->maxpacket)
 8003d12:	42a6      	cmp	r6, r4
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d14:	784b      	ldrb	r3, [r1, #1]
              ep->xfer_len_db -= len;
 8003d16:	bf38      	it	cc
 8003d18:	1aa6      	subcc	r6, r4, r2
            ep->xfer_buff += len;
 8003d1a:	4415      	add	r5, r2
              ep->xfer_len_db = 0U;
 8003d1c:	bf28      	it	cs
 8003d1e:	2600      	movcs	r6, #0
            ep->xfer_buff += len;
 8003d20:	614d      	str	r5, [r1, #20]
              ep->xfer_len_db -= len;
 8003d22:	bf38      	it	cc
 8003d24:	4614      	movcc	r4, r2
 8003d26:	620e      	str	r6, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 80e3 	bne.w	8003ef4 <USB_EPStartXfer+0x83c>
 8003d2e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003d32:	780a      	ldrb	r2, [r1, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d3e:	18c2      	adds	r2, r0, r3
 8003d40:	2c00      	cmp	r4, #0
 8003d42:	f040 8144 	bne.w	8003fce <USB_EPStartXfer+0x916>
 8003d46:	5ac2      	ldrh	r2, [r0, r3]
 8003d48:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003d4c:	0412      	lsls	r2, r2, #16
 8003d4e:	0c12      	lsrs	r2, r2, #16
 8003d50:	52c2      	strh	r2, [r0, r3]
 8003d52:	5ac2      	ldrh	r2, [r0, r3]
 8003d54:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003d58:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	52c2      	strh	r2, [r0, r3]
  for (i = n; i != 0U; i--)
 8003d60:	e542      	b.n	80037e8 <USB_EPStartXfer+0x130>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d62:	2a3e      	cmp	r2, #62	; 0x3e
 8003d64:	f200 8104 	bhi.w	8003f70 <USB_EPStartXfer+0x8b8>
 8003d68:	0855      	lsrs	r5, r2, #1
 8003d6a:	07d7      	lsls	r7, r2, #31
 8003d6c:	bf48      	it	mi
 8003d6e:	3501      	addmi	r5, #1
 8003d70:	02ad      	lsls	r5, r5, #10
 8003d72:	b2ad      	uxth	r5, r5
 8003d74:	801d      	strh	r5, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003d76:	890b      	ldrh	r3, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d78:	f8d1 c014 	ldr.w	ip, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003d7c:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003d80:	1c57      	adds	r7, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003d82:	441d      	add	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003d84:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8003d86:	e69c      	b.n	8003ac2 <USB_EPStartXfer+0x40a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10a      	bne.n	8003da2 <USB_EPStartXfer+0x6ea>
 8003d8c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003d90:	780a      	ldrb	r2, [r1, #0]
 8003d92:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8003d96:	fa16 f383 	uxtah	r3, r6, r3
 8003d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d9e:	b2a2      	uxth	r2, r4
 8003da0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003da2:	b2a2      	uxth	r2, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003da4:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003da6:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003da8:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 8003dac:	4423      	add	r3, r4
  for (i = n; i != 0U; i--)
 8003dae:	0854      	lsrs	r4, r2, #1
 8003db0:	f47f ad97 	bne.w	80038e2 <USB_EPStartXfer+0x22a>
 8003db4:	e518      	b.n	80037e8 <USB_EPStartXfer+0x130>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003db6:	2a3e      	cmp	r2, #62	; 0x3e
 8003db8:	f200 80fe 	bhi.w	8003fb8 <USB_EPStartXfer+0x900>
 8003dbc:	0855      	lsrs	r5, r2, #1
 8003dbe:	07d7      	lsls	r7, r2, #31
 8003dc0:	bf48      	it	mi
 8003dc2:	3501      	addmi	r5, #1
 8003dc4:	02ad      	lsls	r5, r5, #10
 8003dc6:	b2ad      	uxth	r5, r5
 8003dc8:	801d      	strh	r5, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dca:	894f      	ldrh	r7, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dcc:	694d      	ldr	r5, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dce:	f500 6380 	add.w	r3, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003dd2:	f102 0c01 	add.w	ip, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dd6:	443b      	add	r3, r7
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003dd8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for (i = n; i != 0U; i--)
 8003ddc:	e550      	b.n	8003880 <USB_EPStartXfer+0x1c8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d109      	bne.n	8003df6 <USB_EPStartXfer+0x73e>
 8003de2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003de6:	780a      	ldrb	r2, [r1, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003df2:	b2a2      	uxth	r2, r4
 8003df4:	52c2      	strh	r2, [r0, r3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003df6:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003df8:	b2a3      	uxth	r3, r4
 8003dfa:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8003e00:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e02:	4402      	add	r2, r0
  for (i = n; i != 0U; i--)
 8003e04:	f47f ae90 	bne.w	8003b28 <USB_EPStartXfer+0x470>
 8003e08:	e4ee      	b.n	80037e8 <USB_EPStartXfer+0x130>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003e0a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003e0e:	780b      	ldrb	r3, [r1, #0]
 8003e10:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8003e14:	fa15 f282 	uxtah	r2, r5, r2
 8003e18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003e1c:	b106      	cbz	r6, 8003e20 <USB_EPStartXfer+0x768>
 8003e1e:	3401      	adds	r4, #1
 8003e20:	02a4      	lsls	r4, r4, #10
 8003e22:	b2a3      	uxth	r3, r4
 8003e24:	8013      	strh	r3, [r2, #0]
 8003e26:	780a      	ldrb	r2, [r1, #0]
 8003e28:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003e2c:	e4a8      	b.n	8003780 <USB_EPStartXfer+0xc8>
 8003e2e:	0954      	lsrs	r4, r2, #5
 8003e30:	4d55      	ldr	r5, [pc, #340]	; (8003f88 <USB_EPStartXfer+0x8d0>)
 8003e32:	f012 061f 	ands.w	r6, r2, #31
 8003e36:	4627      	mov	r7, r4
 8003e38:	bf08      	it	eq
 8003e3a:	f104 37ff 	addeq.w	r7, r4, #4294967295
 8003e3e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8003e42:	b2ad      	uxth	r5, r5
 8003e44:	801d      	strh	r5, [r3, #0]
 8003e46:	784d      	ldrb	r5, [r1, #1]
 8003e48:	2d00      	cmp	r5, #0
 8003e4a:	f47f ac69 	bne.w	8003720 <USB_EPStartXfer+0x68>
 8003e4e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003e52:	780a      	ldrb	r2, [r1, #0]
 8003e54:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8003e58:	fa15 f383 	uxtah	r3, r5, r3
 8003e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e60:	b906      	cbnz	r6, 8003e64 <USB_EPStartXfer+0x7ac>
 8003e62:	3c01      	subs	r4, #1
 8003e64:	4a48      	ldr	r2, [pc, #288]	; (8003f88 <USB_EPStartXfer+0x8d0>)
 8003e66:	ea42 2484 	orr.w	r4, r2, r4, lsl #10
 8003e6a:	b2a2      	uxth	r2, r4
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	780a      	ldrb	r2, [r1, #0]
 8003e70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003e74:	e484      	b.n	8003780 <USB_EPStartXfer+0xc8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10a      	bne.n	8003e90 <USB_EPStartXfer+0x7d8>
 8003e7a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003e7e:	780a      	ldrb	r2, [r1, #0]
 8003e80:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8003e84:	fa16 f383 	uxtah	r3, r6, r3
 8003e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e8c:	b2a2      	uxth	r2, r4
 8003e8e:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e90:	b2a2      	uxth	r2, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e92:	890b      	ldrh	r3, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e94:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e96:	f500 6480 	add.w	r4, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8003e9a:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e9c:	4423      	add	r3, r4
  for (i = n; i != 0U; i--)
 8003e9e:	f43f aca3 	beq.w	80037e8 <USB_EPStartXfer+0x130>
 8003ea2:	eb05 0442 	add.w	r4, r5, r2, lsl #1
    temp1 = *pBuf;
 8003ea6:	f835 2b02 	ldrh.w	r2, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8003eaa:	f823 2b02 	strh.w	r2, [r3], #2
  for (i = n; i != 0U; i--)
 8003eae:	42ac      	cmp	r4, r5
 8003eb0:	d1f9      	bne.n	8003ea6 <USB_EPStartXfer+0x7ee>
 8003eb2:	e499      	b.n	80037e8 <USB_EPStartXfer+0x130>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d109      	bne.n	8003ecc <USB_EPStartXfer+0x814>
 8003eb8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003ebc:	f200 4706 	addw	r7, r0, #1030	; 0x406
 8003ec0:	fa17 f383 	uxtah	r3, r7, r3
 8003ec4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003ec8:	b293      	uxth	r3, r2
 8003eca:	802b      	strh	r3, [r5, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ecc:	b297      	uxth	r7, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ece:	894b      	ldrh	r3, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ed0:	694d      	ldr	r5, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ed2:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ed4:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8003ed8:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003eda:	4463      	add	r3, ip
  for (i = n; i != 0U; i--)
 8003edc:	f43f adb0 	beq.w	8003a40 <USB_EPStartXfer+0x388>
 8003ee0:	eb03 0c47 	add.w	ip, r3, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8003ee4:	462f      	mov	r7, r5
    temp1 = *pBuf;
 8003ee6:	f837 eb02 	ldrh.w	lr, [r7], #2
    *pdwVal = (uint16_t)temp2;
 8003eea:	f823 eb02 	strh.w	lr, [r3], #2
  for (i = n; i != 0U; i--)
 8003eee:	459c      	cmp	ip, r3
 8003ef0:	d1f9      	bne.n	8003ee6 <USB_EPStartXfer+0x82e>
 8003ef2:	e5a5      	b.n	8003a40 <USB_EPStartXfer+0x388>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d109      	bne.n	8003f0c <USB_EPStartXfer+0x854>
 8003ef8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003efc:	780a      	ldrb	r2, [r1, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f08:	b2a2      	uxth	r2, r4
 8003f0a:	52c2      	strh	r2, [r0, r3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f0c:	894b      	ldrh	r3, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003f0e:	b2a2      	uxth	r2, r4
 8003f10:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8003f16:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f18:	4403      	add	r3, r0
  for (i = n; i != 0U; i--)
 8003f1a:	f43f ac65 	beq.w	80037e8 <USB_EPStartXfer+0x130>
 8003f1e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    temp1 = *pBuf;
 8003f22:	f835 4b02 	ldrh.w	r4, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8003f26:	f823 4b02 	strh.w	r4, [r3], #2
  for (i = n; i != 0U; i--)
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d1f9      	bne.n	8003f22 <USB_EPStartXfer+0x86a>
 8003f2e:	e45b      	b.n	80037e8 <USB_EPStartXfer+0x130>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d109      	bne.n	8003f48 <USB_EPStartXfer+0x890>
 8003f34:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003f38:	f200 4702 	addw	r7, r0, #1026	; 0x402
 8003f3c:	fa17 f383 	uxtah	r3, r7, r3
 8003f40:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003f44:	b293      	uxth	r3, r2
 8003f46:	802b      	strh	r3, [r5, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f48:	890b      	ldrh	r3, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f4a:	694d      	ldr	r5, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003f4c:	b297      	uxth	r7, r2
 8003f4e:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8003f54:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f56:	4403      	add	r3, r0
  for (i = n; i != 0U; i--)
 8003f58:	f43f aedb 	beq.w	8003d12 <USB_EPStartXfer+0x65a>
 8003f5c:	eb03 0c47 	add.w	ip, r3, r7, lsl #1
              ep->xfer_len_db = 0U;
 8003f60:	462f      	mov	r7, r5
    temp1 = *pBuf;
 8003f62:	f837 eb02 	ldrh.w	lr, [r7], #2
    *pdwVal = (uint16_t)temp2;
 8003f66:	f823 eb02 	strh.w	lr, [r3], #2
  for (i = n; i != 0U; i--)
 8003f6a:	459c      	cmp	ip, r3
 8003f6c:	d1f9      	bne.n	8003f62 <USB_EPStartXfer+0x8aa>
 8003f6e:	e6d0      	b.n	8003d12 <USB_EPStartXfer+0x65a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f70:	0957      	lsrs	r7, r2, #5
 8003f72:	06d5      	lsls	r5, r2, #27
 8003f74:	4d04      	ldr	r5, [pc, #16]	; (8003f88 <USB_EPStartXfer+0x8d0>)
 8003f76:	bf08      	it	eq
 8003f78:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003f7c:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8003f80:	b2ad      	uxth	r5, r5
 8003f82:	801d      	strh	r5, [r3, #0]
 8003f84:	e593      	b.n	8003aae <USB_EPStartXfer+0x3f6>
 8003f86:	bf00      	nop
 8003f88:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f8c:	0966      	lsrs	r6, r4, #5
 8003f8e:	06e2      	lsls	r2, r4, #27
 8003f90:	4a46      	ldr	r2, [pc, #280]	; (80040ac <USB_EPStartXfer+0x9f4>)
 8003f92:	bf08      	it	eq
 8003f94:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003f98:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003f9c:	b292      	uxth	r2, r2
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	e6ff      	b.n	8003da2 <USB_EPStartXfer+0x6ea>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fa2:	0966      	lsrs	r6, r4, #5
 8003fa4:	06e2      	lsls	r2, r4, #27
 8003fa6:	4a41      	ldr	r2, [pc, #260]	; (80040ac <USB_EPStartXfer+0x9f4>)
 8003fa8:	bf08      	it	eq
 8003faa:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003fae:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003fb2:	b292      	uxth	r2, r2
 8003fb4:	801a      	strh	r2, [r3, #0]
 8003fb6:	e71e      	b.n	8003df6 <USB_EPStartXfer+0x73e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fb8:	0957      	lsrs	r7, r2, #5
 8003fba:	06d5      	lsls	r5, r2, #27
 8003fbc:	4d3b      	ldr	r5, [pc, #236]	; (80040ac <USB_EPStartXfer+0x9f4>)
 8003fbe:	bf08      	it	eq
 8003fc0:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003fc4:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8003fc8:	b2ad      	uxth	r5, r5
 8003fca:	801d      	strh	r5, [r3, #0]
 8003fcc:	e44c      	b.n	8003868 <USB_EPStartXfer+0x1b0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fce:	2c3e      	cmp	r4, #62	; 0x3e
 8003fd0:	d83f      	bhi.n	8004052 <USB_EPStartXfer+0x99a>
 8003fd2:	0863      	lsrs	r3, r4, #1
 8003fd4:	07e6      	lsls	r6, r4, #31
 8003fd6:	bf48      	it	mi
 8003fd8:	3301      	addmi	r3, #1
 8003fda:	029b      	lsls	r3, r3, #10
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	8013      	strh	r3, [r2, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fe0:	894b      	ldrh	r3, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003fe2:	1c62      	adds	r2, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003fe8:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fea:	4403      	add	r3, r0
  for (i = n; i != 0U; i--)
 8003fec:	e797      	b.n	8003f1e <USB_EPStartXfer+0x866>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fee:	2a3e      	cmp	r2, #62	; 0x3e
 8003ff0:	d845      	bhi.n	800407e <USB_EPStartXfer+0x9c6>
 8003ff2:	0855      	lsrs	r5, r2, #1
 8003ff4:	07d7      	lsls	r7, r2, #31
 8003ff6:	bf48      	it	mi
 8003ff8:	3501      	addmi	r5, #1
 8003ffa:	02ad      	lsls	r5, r5, #10
 8003ffc:	b2ad      	uxth	r5, r5
 8003ffe:	801d      	strh	r5, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004000:	890b      	ldrh	r3, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004002:	694d      	ldr	r5, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004004:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004008:	1c57      	adds	r7, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800400a:	4463      	add	r3, ip
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800400c:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 800400e:	e7a5      	b.n	8003f5c <USB_EPStartXfer+0x8a4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004010:	2a3e      	cmp	r2, #62	; 0x3e
 8004012:	d83f      	bhi.n	8004094 <USB_EPStartXfer+0x9dc>
 8004014:	0855      	lsrs	r5, r2, #1
 8004016:	07d7      	lsls	r7, r2, #31
 8004018:	bf48      	it	mi
 800401a:	3501      	addmi	r5, #1
 800401c:	02ad      	lsls	r5, r5, #10
 800401e:	b2ad      	uxth	r5, r5
 8004020:	801d      	strh	r5, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004022:	894b      	ldrh	r3, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004024:	694d      	ldr	r5, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004026:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800402a:	1c57      	adds	r7, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800402c:	4463      	add	r3, ip
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800402e:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8004030:	e756      	b.n	8003ee0 <USB_EPStartXfer+0x828>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004032:	2c3e      	cmp	r4, #62	; 0x3e
 8004034:	d818      	bhi.n	8004068 <USB_EPStartXfer+0x9b0>
 8004036:	0862      	lsrs	r2, r4, #1
 8004038:	07e6      	lsls	r6, r4, #31
 800403a:	bf48      	it	mi
 800403c:	3201      	addmi	r2, #1
 800403e:	0292      	lsls	r2, r2, #10
 8004040:	b292      	uxth	r2, r2
 8004042:	801a      	strh	r2, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004044:	890b      	ldrh	r3, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004046:	1c62      	adds	r2, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004048:	f500 6480 	add.w	r4, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800404c:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800404e:	4423      	add	r3, r4
  for (i = n; i != 0U; i--)
 8004050:	e727      	b.n	8003ea2 <USB_EPStartXfer+0x7ea>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004052:	0966      	lsrs	r6, r4, #5
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <USB_EPStartXfer+0x9f4>)
 8004056:	06e7      	lsls	r7, r4, #27
 8004058:	bf08      	it	eq
 800405a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800405e:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]
 8004066:	e751      	b.n	8003f0c <USB_EPStartXfer+0x854>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004068:	0966      	lsrs	r6, r4, #5
 800406a:	06e2      	lsls	r2, r4, #27
 800406c:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <USB_EPStartXfer+0x9f4>)
 800406e:	bf08      	it	eq
 8004070:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004074:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8004078:	b292      	uxth	r2, r2
 800407a:	801a      	strh	r2, [r3, #0]
 800407c:	e708      	b.n	8003e90 <USB_EPStartXfer+0x7d8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800407e:	0957      	lsrs	r7, r2, #5
 8004080:	06d5      	lsls	r5, r2, #27
 8004082:	4d0a      	ldr	r5, [pc, #40]	; (80040ac <USB_EPStartXfer+0x9f4>)
 8004084:	bf08      	it	eq
 8004086:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800408a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800408e:	b2ad      	uxth	r5, r5
 8004090:	801d      	strh	r5, [r3, #0]
 8004092:	e759      	b.n	8003f48 <USB_EPStartXfer+0x890>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004094:	0957      	lsrs	r7, r2, #5
 8004096:	06d5      	lsls	r5, r2, #27
 8004098:	4d04      	ldr	r5, [pc, #16]	; (80040ac <USB_EPStartXfer+0x9f4>)
 800409a:	bf08      	it	eq
 800409c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80040a0:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80040a4:	b2ad      	uxth	r5, r5
 80040a6:	801d      	strh	r5, [r3, #0]
 80040a8:	e710      	b.n	8003ecc <USB_EPStartXfer+0x814>
 80040aa:	bf00      	nop
 80040ac:	ffff8000 	.word	0xffff8000

080040b0 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 80040b0:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80040b2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80040b4:	b18b      	cbz	r3, 80040da <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80040b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	f083 0310 	eor.w	r3, r3, #16
 80040ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80040d6:	2000      	movs	r0, #0
 80040d8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80040da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80040fa:	2000      	movs	r0, #0
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop

08004100 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8004100:	7b0b      	ldrb	r3, [r1, #12]
 8004102:	bb43      	cbnz	r3, 8004156 <USB_EPClearStall+0x56>
    if (ep->is_in != 0U)
 8004104:	784b      	ldrb	r3, [r1, #1]
 8004106:	b343      	cbz	r3, 800415a <USB_EPClearStall+0x5a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004108:	780a      	ldrb	r2, [r1, #0]
 800410a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800410e:	065b      	lsls	r3, r3, #25
 8004110:	d50d      	bpl.n	800412e <USB_EPClearStall+0x2e>
 8004112:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800412a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800412e:	78cb      	ldrb	r3, [r1, #3]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d010      	beq.n	8004156 <USB_EPClearStall+0x56>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004134:	780a      	ldrb	r2, [r1, #0]
 8004136:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f083 0320 	eor.w	r3, r3, #32
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004152:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8004156:	2000      	movs	r0, #0
 8004158:	4770      	bx	lr
{
 800415a:	b410      	push	{r4}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800415c:	780c      	ldrb	r4, [r1, #0]
 800415e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004162:	045b      	lsls	r3, r3, #17
 8004164:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8004168:	d510      	bpl.n	800418c <USB_EPClearStall+0x8c>
 800416a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800417e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004182:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004186:	780a      	ldrb	r2, [r1, #0]
 8004188:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800418c:	8813      	ldrh	r3, [r2, #0]
}
 800418e:	f85d 4b04 	ldr.w	r4, [sp], #4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 80041aa:	2000      	movs	r0, #0
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041ac:	8013      	strh	r3, [r2, #0]
}
 80041ae:	4770      	bx	lr

080041b0 <USB_SetDevAddress>:
  if (address == 0U)
 80041b0:	b911      	cbnz	r1, 80041b8 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80041b8:	2000      	movs	r0, #0
 80041ba:	4770      	bx	lr

080041bc <USB_DevConnect>:
{
 80041bc:	4602      	mov	r2, r0
}
 80041be:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80041c0:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 80041c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 80041d2:	4770      	bx	lr

080041d4 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 80041d4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 80041d8:	b280      	uxth	r0, r0
 80041da:	4770      	bx	lr

080041dc <USB_WritePMA>:
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80041dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80041e0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80041e2:	4410      	add	r0, r2
  for (i = n; i != 0U; i--)
 80041e4:	085a      	lsrs	r2, r3, #1
 80041e6:	d008      	beq.n	80041fa <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 80041e8:	460b      	mov	r3, r1
 80041ea:	1ac0      	subs	r0, r0, r3
 80041ec:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80041f0:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 80041f2:	521a      	strh	r2, [r3, r0]
    pBuf++;
 80041f4:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 80041f6:	4299      	cmp	r1, r3
 80041f8:	d1fa      	bne.n	80041f0 <USB_WritePMA+0x14>
  }
}
 80041fa:	4770      	bx	lr

080041fc <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80041fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8004200:	ea5f 0c53 	movs.w	ip, r3, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004204:	4410      	add	r0, r2
  for (i = n; i != 0U; i--)
 8004206:	d01b      	beq.n	8004240 <USB_ReadPMA+0x44>
{
 8004208:	b4f0      	push	{r4, r5, r6, r7}
 800420a:	f06f 0701 	mvn.w	r7, #1
 800420e:	1a7f      	subs	r7, r7, r1
 8004210:	4407      	add	r7, r0
 8004212:	1c8a      	adds	r2, r1, #2
  for (i = n; i != 0U; i--)
 8004214:	4665      	mov	r5, ip
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004216:	5abc      	ldrh	r4, [r7, r2]
 8004218:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800421a:	0a26      	lsrs	r6, r4, #8
  for (i = n; i != 0U; i--)
 800421c:	3d01      	subs	r5, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800421e:	f802 4c02 	strb.w	r4, [r2, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004222:	f802 6c01 	strb.w	r6, [r2, #-1]
  for (i = n; i != 0U; i--)
 8004226:	f102 0202 	add.w	r2, r2, #2
 800422a:	d1f4      	bne.n	8004216 <USB_ReadPMA+0x1a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
  {
    temp = *pdwVal;
 800422c:	eb00 024c 	add.w	r2, r0, ip, lsl #1
 8004230:	eb01 014c 	add.w	r1, r1, ip, lsl #1
  if ((wNBytes % 2U) != 0U)
 8004234:	07d8      	lsls	r0, r3, #31
    temp = *pdwVal;
 8004236:	bf44      	itt	mi
 8004238:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800423a:	700b      	strbmi	r3, [r1, #0]
  }
}
 800423c:	bcf0      	pop	{r4, r5, r6, r7}
 800423e:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 8004240:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 8004242:	bf44      	itt	mi
 8004244:	8803      	ldrhmi	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004246:	700b      	strbmi	r3, [r1, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop

0800424c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800424c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800424e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004252:	b184      	cbz	r4, 8004276 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004254:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004258:	b15b      	cbz	r3, 8004272 <USBD_CDC_EP0_RxReady+0x26>
 800425a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800425e:	28ff      	cmp	r0, #255	; 0xff
 8004260:	d007      	beq.n	8004272 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004268:	4621      	mov	r1, r4
 800426a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800426c:	23ff      	movs	r3, #255	; 0xff
 800426e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004272:	2000      	movs	r0, #0
}
 8004274:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8004276:	2003      	movs	r0, #3
}
 8004278:	bd10      	pop	{r4, pc}
 800427a:	bf00      	nop

0800427c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800427c:	2343      	movs	r3, #67	; 0x43
 800427e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8004280:	4800      	ldr	r0, [pc, #0]	; (8004284 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004282:	4770      	bx	lr
 8004284:	20000044 	.word	0x20000044

08004288 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004288:	2343      	movs	r3, #67	; 0x43
 800428a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800428c:	4800      	ldr	r0, [pc, #0]	; (8004290 <USBD_CDC_GetHSCfgDesc+0x8>)
 800428e:	4770      	bx	lr
 8004290:	20000088 	.word	0x20000088

08004294 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004294:	2343      	movs	r3, #67	; 0x43
 8004296:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004298:	4800      	ldr	r0, [pc, #0]	; (800429c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800429a:	4770      	bx	lr
 800429c:	200000d8 	.word	0x200000d8

080042a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80042a0:	230a      	movs	r3, #10
 80042a2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80042a4:	4800      	ldr	r0, [pc, #0]	; (80042a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80042a6:	4770      	bx	lr
 80042a8:	200000cc 	.word	0x200000cc

080042ac <USBD_CDC_DataOut>:
{
 80042ac:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80042ae:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80042b2:	b175      	cbz	r5, 80042d2 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80042b4:	4604      	mov	r4, r0
 80042b6:	f001 fb05 	bl	80058c4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80042ba:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80042be:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80042c8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80042cc:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80042ce:	2000      	movs	r0, #0
}
 80042d0:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80042d2:	2003      	movs	r0, #3
}
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop

080042d8 <USBD_CDC_DataIn>:
{
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 80042da:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
 80042de:	b35e      	cbz	r6, 8004338 <USBD_CDC_DataIn+0x60>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80042e0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80042e4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80042e8:	4605      	mov	r5, r0
 80042ea:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80042ee:	460a      	mov	r2, r1
 80042f0:	b96b      	cbnz	r3, 800430e <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80042f2:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
 80042f6:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80042f8:	2400      	movs	r4, #0
 80042fa:	f8c6 4214 	str.w	r4, [r6, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80042fe:	b1cb      	cbz	r3, 8004334 <USBD_CDC_DataIn+0x5c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004300:	f8d6 0208 	ldr.w	r0, [r6, #520]	; 0x208
 8004304:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8004308:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800430a:	4620      	mov	r0, r4
}
 800430c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800430e:	f8d0 72c4 	ldr.w	r7, [r0, #708]	; 0x2c4
 8004312:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8004316:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8004318:	fbb3 f4f7 	udiv	r4, r3, r7
 800431c:	fb07 3414 	mls	r4, r7, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004320:	2c00      	cmp	r4, #0
 8004322:	d1e6      	bne.n	80042f2 <USBD_CDC_DataIn+0x1a>
    pdev->ep_in[epnum].total_length = 0U;
 8004324:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004328:	4623      	mov	r3, r4
 800432a:	4622      	mov	r2, r4
 800432c:	f001 faae 	bl	800588c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004330:	4620      	mov	r0, r4
}
 8004332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint8_t)USBD_OK;
 8004334:	4618      	mov	r0, r3
}
 8004336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8004338:	2003      	movs	r0, #3
}
 800433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800433c <USBD_CDC_Setup>:
{
 800433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004340:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
{
 8004344:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8004346:	2700      	movs	r7, #0
 8004348:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800434c:	f8ad 7006 	strh.w	r7, [sp, #6]
  if (hcdc == NULL)
 8004350:	f1b8 0f00 	cmp.w	r8, #0
 8004354:	d068      	beq.n	8004428 <USBD_CDC_Setup+0xec>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004356:	780b      	ldrb	r3, [r1, #0]
 8004358:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800435c:	4606      	mov	r6, r0
 800435e:	460c      	mov	r4, r1
 8004360:	d01f      	beq.n	80043a2 <USBD_CDC_Setup+0x66>
 8004362:	2d20      	cmp	r5, #32
 8004364:	d008      	beq.n	8004378 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 8004366:	4621      	mov	r1, r4
 8004368:	4630      	mov	r0, r6
 800436a:	f000 fd0f 	bl	8004d8c <USBD_CtlError>
          ret = USBD_FAIL;
 800436e:	2503      	movs	r5, #3
}
 8004370:	4628      	mov	r0, r5
 8004372:	b002      	add	sp, #8
 8004374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 8004378:	88cd      	ldrh	r5, [r1, #6]
 800437a:	b38d      	cbz	r5, 80043e0 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	d558      	bpl.n	8004432 <USBD_CDC_Setup+0xf6>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004380:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004384:	7848      	ldrb	r0, [r1, #1]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	462a      	mov	r2, r5
 800438a:	4641      	mov	r1, r8
 800438c:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800438e:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004390:	2a07      	cmp	r2, #7
 8004392:	4641      	mov	r1, r8
 8004394:	bf28      	it	cs
 8004396:	2207      	movcs	r2, #7
 8004398:	4630      	mov	r0, r6
  USBD_StatusTypeDef ret = USBD_OK;
 800439a:	463d      	mov	r5, r7
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800439c:	f000 fd28 	bl	8004df0 <USBD_CtlSendData>
 80043a0:	e7e6      	b.n	8004370 <USBD_CDC_Setup+0x34>
      switch (req->bRequest)
 80043a2:	784b      	ldrb	r3, [r1, #1]
 80043a4:	2b0b      	cmp	r3, #11
 80043a6:	d8de      	bhi.n	8004366 <USBD_CDC_Setup+0x2a>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <USBD_CDC_Setup+0x74>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	08004413 	.word	0x08004413
 80043b4:	08004371 	.word	0x08004371
 80043b8:	08004367 	.word	0x08004367
 80043bc:	08004367 	.word	0x08004367
 80043c0:	08004367 	.word	0x08004367
 80043c4:	08004367 	.word	0x08004367
 80043c8:	08004367 	.word	0x08004367
 80043cc:	08004367 	.word	0x08004367
 80043d0:	08004367 	.word	0x08004367
 80043d4:	08004367 	.word	0x08004367
 80043d8:	080043ff 	.word	0x080043ff
 80043dc:	080043f5 	.word	0x080043f5
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043e0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80043e4:	7848      	ldrb	r0, [r1, #1]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	462a      	mov	r2, r5
 80043ea:	4798      	blx	r3
}
 80043ec:	4628      	mov	r0, r5
 80043ee:	b002      	add	sp, #8
 80043f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d0b9      	beq.n	8004370 <USBD_CDC_Setup+0x34>
 80043fc:	e7b3      	b.n	8004366 <USBD_CDC_Setup+0x2a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004402:	2b03      	cmp	r3, #3
 8004404:	d1af      	bne.n	8004366 <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004406:	2201      	movs	r2, #1
 8004408:	f10d 0105 	add.w	r1, sp, #5
 800440c:	f000 fcf0 	bl	8004df0 <USBD_CtlSendData>
 8004410:	e7ae      	b.n	8004370 <USBD_CDC_Setup+0x34>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004412:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004416:	2a03      	cmp	r2, #3
 8004418:	d1a5      	bne.n	8004366 <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800441a:	2202      	movs	r2, #2
 800441c:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8004420:	461d      	mov	r5, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004422:	f000 fce5 	bl	8004df0 <USBD_CtlSendData>
 8004426:	e7a3      	b.n	8004370 <USBD_CDC_Setup+0x34>
    return (uint8_t)USBD_FAIL;
 8004428:	2503      	movs	r5, #3
}
 800442a:	4628      	mov	r0, r5
 800442c:	b002      	add	sp, #8
 800442e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 8004432:	784b      	ldrb	r3, [r1, #1]
 8004434:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004438:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800443c:	462a      	mov	r2, r5
 800443e:	4641      	mov	r1, r8
 8004440:	f000 fcec 	bl	8004e1c <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8004444:	463d      	mov	r5, r7
 8004446:	e793      	b.n	8004370 <USBD_CDC_Setup+0x34>

08004448 <USBD_CDC_DeInit>:
{
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800444c:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800444e:	2181      	movs	r1, #129	; 0x81
 8004450:	f001 f9d0 	bl	80057f4 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004454:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004456:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004458:	4620      	mov	r0, r4
 800445a:	f001 f9cb 	bl	80057f4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800445e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004462:	4620      	mov	r0, r4
 8004464:	2182      	movs	r1, #130	; 0x82
 8004466:	f001 f9c5 	bl	80057f4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800446a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800446e:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8004470:	b14b      	cbz	r3, 8004486 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004472:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800447a:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800447e:	f001 fa29 	bl	80058d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004482:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8004486:	2000      	movs	r0, #0
 8004488:	bd38      	pop	{r3, r4, r5, pc}
 800448a:	bf00      	nop

0800448c <USBD_CDC_Init>:
{
 800448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004490:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004492:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004496:	f001 fa19 	bl	80058cc <USBD_static_malloc>
  if (hcdc == NULL)
 800449a:	4605      	mov	r5, r0
 800449c:	2800      	cmp	r0, #0
 800449e:	d04a      	beq.n	8004536 <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044a0:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 80044a2:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044a6:	b393      	cbz	r3, 800450e <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044ac:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044ae:	2202      	movs	r2, #2
 80044b0:	4620      	mov	r0, r4
 80044b2:	f001 f98f 	bl	80057d4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044b6:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044b8:	4631      	mov	r1, r6
 80044ba:	2340      	movs	r3, #64	; 0x40
 80044bc:	2202      	movs	r2, #2
 80044be:	4620      	mov	r0, r4
 80044c0:	f001 f988 	bl	80057d4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80044c4:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044c6:	2203      	movs	r2, #3
 80044c8:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044ca:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80044ce:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044d2:	4620      	mov	r0, r4
 80044d4:	2308      	movs	r3, #8
 80044d6:	f001 f97d 	bl	80057d4 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044da:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044de:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044e2:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044e4:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 80044e8:	2700      	movs	r7, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044ea:	4798      	blx	r3
  hcdc->TxState = 0U;
 80044ec:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80044f0:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044f4:	7c26      	ldrb	r6, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044f6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80044fa:	4641      	mov	r1, r8
 80044fc:	4620      	mov	r0, r4
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044fe:	b99e      	cbnz	r6, 8004528 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004504:	f001 f9d0 	bl	80058a8 <USBD_LL_PrepareReceive>
}
 8004508:	4630      	mov	r0, r6
 800450a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800450e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004512:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004514:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004516:	2202      	movs	r2, #2
 8004518:	4620      	mov	r0, r4
 800451a:	f001 f95b 	bl	80057d4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800451e:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004520:	4631      	mov	r1, r6
 8004522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004526:	e7c9      	b.n	80044bc <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004528:	2340      	movs	r3, #64	; 0x40
  return (uint8_t)USBD_OK;
 800452a:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800452c:	f001 f9bc 	bl	80058a8 <USBD_LL_PrepareReceive>
}
 8004530:	4630      	mov	r0, r6
 8004532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8004536:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8004538:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800453c:	4630      	mov	r0, r6
 800453e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004542:	bf00      	nop

08004544 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8004544:	b119      	cbz	r1, 800454e <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8004546:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800454a:	2000      	movs	r0, #0
 800454c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800454e:	2003      	movs	r0, #3
}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop

08004554 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004554:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004558:	b12b      	cbz	r3, 8004566 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800455a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800455e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004562:	2000      	movs	r0, #0
 8004564:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004566:	2003      	movs	r0, #3
}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800456c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004570:	b11b      	cbz	r3, 800457a <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8004572:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004576:	2000      	movs	r0, #0
 8004578:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800457a:	2003      	movs	r0, #3
}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop

08004580 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004580:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8004584:	b192      	cbz	r2, 80045ac <USBD_CDC_TransmitPacket+0x2c>
{
 8004586:	b538      	push	{r3, r4, r5, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8004588:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800458c:	b10c      	cbz	r4, 8004592 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800458e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8004590:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004592:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    hcdc->TxState = 1U;
 8004596:	2501      	movs	r5, #1
 8004598:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800459c:	2181      	movs	r1, #129	; 0x81
 800459e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80045a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80045a4:	f001 f972 	bl	800588c <USBD_LL_Transmit>
    ret = USBD_OK;
 80045a8:	4620      	mov	r0, r4
}
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80045ac:	2003      	movs	r0, #3
}
 80045ae:	4770      	bx	lr

080045b0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045b0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 80045b4:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 80045b6:	b18a      	cbz	r2, 80045dc <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045b8:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045ba:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045be:	b134      	cbz	r4, 80045ce <USBD_CDC_ReceivePacket+0x1e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045c0:	2340      	movs	r3, #64	; 0x40
 80045c2:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80045c4:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045c6:	f001 f96f 	bl	80058a8 <USBD_LL_PrepareReceive>
}
 80045ca:	4620      	mov	r0, r4
 80045cc:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d2:	2101      	movs	r1, #1
 80045d4:	f001 f968 	bl	80058a8 <USBD_LL_PrepareReceive>
}
 80045d8:	4620      	mov	r0, r4
 80045da:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80045dc:	2403      	movs	r4, #3
}
 80045de:	4620      	mov	r0, r4
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	bf00      	nop

080045e4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80045e4:	b178      	cbz	r0, 8004606 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80045ec:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80045f0:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80045f4:	b109      	cbz	r1, 80045fa <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80045f6:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045fa:	2301      	movs	r3, #1
  pdev->id = id;
 80045fc:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045fe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004602:	f001 b895 	b.w	8005730 <USBD_LL_Init>

  return ret;
}
 8004606:	2003      	movs	r0, #3
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop

0800460c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800460c:	b530      	push	{r4, r5, lr}
 800460e:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8004610:	2400      	movs	r4, #0
 8004612:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8004616:	b179      	cbz	r1, 8004638 <USBD_RegisterClass+0x2c>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004618:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 800461a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800461e:	4605      	mov	r5, r0
 8004620:	b13b      	cbz	r3, 8004632 <USBD_RegisterClass+0x26>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004622:	f10d 0006 	add.w	r0, sp, #6
 8004626:	4798      	blx	r3
 8004628:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800462c:	4620      	mov	r0, r4
}
 800462e:	b003      	add	sp, #12
 8004630:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 8004632:	4618      	mov	r0, r3
}
 8004634:	b003      	add	sp, #12
 8004636:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8004638:	2003      	movs	r0, #3
}
 800463a:	b003      	add	sp, #12
 800463c:	bd30      	pop	{r4, r5, pc}
 800463e:	bf00      	nop

08004640 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004640:	f001 b8ba 	b.w	80057b8 <USBD_LL_Start>

08004644 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004644:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004648:	b10b      	cbz	r3, 800464e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4718      	bx	r3
  }

  return ret;
}
 800464e:	2003      	movs	r0, #3
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop

08004654 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004654:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004656:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800465a:	b10b      	cbz	r3, 8004660 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004660:	2000      	movs	r0, #0
 8004662:	bd08      	pop	{r3, pc}

08004664 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004668:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800466c:	4628      	mov	r0, r5
 800466e:	f000 fb79 	bl	8004d64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004672:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8004676:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800467a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800467e:	2201      	movs	r2, #1
 8004680:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8004684:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8004686:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800468a:	d009      	beq.n	80046a0 <USBD_LL_SetupStage+0x3c>
 800468c:	2b02      	cmp	r3, #2
 800468e:	d013      	beq.n	80046b8 <USBD_LL_SetupStage+0x54>
 8004690:	b163      	cbz	r3, 80046ac <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004692:	4620      	mov	r0, r4
 8004694:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8004698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800469c:	f001 b8b8 	b.w	8005810 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80046a0:	4629      	mov	r1, r5
 80046a2:	4620      	mov	r0, r4
}
 80046a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80046a8:	f000 ba92 	b.w	8004bd0 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80046ac:	4629      	mov	r1, r5
 80046ae:	4620      	mov	r0, r4
}
 80046b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80046b4:	f000 b8ec 	b.w	8004890 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80046b8:	4629      	mov	r1, r5
 80046ba:	4620      	mov	r0, r4
}
 80046bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80046c0:	f000 bab6 	b.w	8004c30 <USBD_StdEPReq>

080046c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80046c4:	b510      	push	{r4, lr}
 80046c6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80046c8:	b931      	cbnz	r1, 80046d8 <USBD_LL_DataOutStage+0x14>
 80046ca:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046cc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80046d0:	2a03      	cmp	r2, #3
 80046d2:	d00d      	beq.n	80046f0 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 80046d4:	2000      	movs	r0, #0
 80046d6:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046d8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d1f9      	bne.n	80046d4 <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 80046e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f4      	beq.n	80046d4 <USBD_LL_DataOutStage+0x10>
}
 80046ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80046ee:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80046f0:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 80046f4:	4291      	cmp	r1, r2
 80046f6:	d808      	bhi.n	800470a <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d00e      	beq.n	800471e <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 8004700:	4620      	mov	r0, r4
 8004702:	f000 fba1 	bl	8004e48 <USBD_CtlSendStatus>
}
 8004706:	2000      	movs	r0, #0
 8004708:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800470a:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800470c:	428a      	cmp	r2, r1
 800470e:	bf28      	it	cs
 8004710:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 8004712:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004716:	4619      	mov	r1, r3
 8004718:	f000 fb8e 	bl	8004e38 <USBD_CtlContinueRx>
 800471c:	e7da      	b.n	80046d4 <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 800471e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0eb      	beq.n	8004700 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 8004728:	4798      	blx	r3
 800472a:	e7e9      	b.n	8004700 <USBD_LL_DataOutStage+0x3c>

0800472c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004730:	b951      	cbnz	r1, 8004748 <USBD_LL_DataInStage+0x1c>
 8004732:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004734:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004738:	2a02      	cmp	r2, #2
 800473a:	d011      	beq.n	8004760 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800473c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004740:	2b01      	cmp	r3, #1
 8004742:	d022      	beq.n	800478a <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 8004744:	2000      	movs	r0, #0
 8004746:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004748:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800474c:	2b03      	cmp	r3, #3
 800474e:	d1f9      	bne.n	8004744 <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 8004750:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f4      	beq.n	8004744 <USBD_LL_DataInStage+0x18>
}
 800475a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800475e:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8004760:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8004764:	42b2      	cmp	r2, r6
 8004766:	460d      	mov	r5, r1
 8004768:	d814      	bhi.n	8004794 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800476a:	d01f      	beq.n	80047ac <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800476c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004770:	2b03      	cmp	r3, #3
 8004772:	d028      	beq.n	80047c6 <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004774:	2180      	movs	r1, #128	; 0x80
 8004776:	4620      	mov	r0, r4
 8004778:	f001 f84a 	bl	8005810 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800477c:	4620      	mov	r0, r4
 800477e:	f000 fb6f 	bl	8004e60 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8004782:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004786:	2b01      	cmp	r3, #1
 8004788:	d1dc      	bne.n	8004744 <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8004790:	2000      	movs	r0, #0
 8004792:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8004794:	1b92      	subs	r2, r2, r6
 8004796:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004798:	4619      	mov	r1, r3
 800479a:	f000 fb37 	bl	8004e0c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800479e:	462b      	mov	r3, r5
 80047a0:	462a      	mov	r2, r5
 80047a2:	4629      	mov	r1, r5
 80047a4:	4620      	mov	r0, r4
 80047a6:	f001 f87f 	bl	80058a8 <USBD_LL_PrepareReceive>
 80047aa:	e7c7      	b.n	800473c <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 80047ac:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d8dc      	bhi.n	800476c <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 80047b2:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d2d8      	bcs.n	800476c <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80047ba:	460a      	mov	r2, r1
 80047bc:	f000 fb26 	bl	8004e0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80047c0:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80047c4:	e7eb      	b.n	800479e <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 80047c6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0d1      	beq.n	8004774 <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 80047d0:	4620      	mov	r0, r4
 80047d2:	4798      	blx	r3
 80047d4:	e7ce      	b.n	8004774 <USBD_LL_DataInStage+0x48>
 80047d6:	bf00      	nop

080047d8 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 80047d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 80047dc:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047de:	2201      	movs	r2, #1
 80047e0:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 80047e4:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 80047e6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 80047ea:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 80047ee:	b1eb      	cbz	r3, 800482c <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 80047f0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 80047f8:	b112      	cbz	r2, 8004800 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	b103      	cbz	r3, 8004800 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047fe:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004800:	2200      	movs	r2, #0
 8004802:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004804:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004806:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004808:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800480a:	4620      	mov	r0, r4
 800480c:	f000 ffe2 	bl	80057d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004810:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004814:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004818:	462b      	mov	r3, r5
 800481a:	2200      	movs	r2, #0
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	4620      	mov	r0, r4
 8004820:	f000 ffd8 	bl	80057d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004824:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004826:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8004828:	2000      	movs	r0, #0
}
 800482a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800482c:	2003      	movs	r0, #3
}
 800482e:	4770      	bx	lr

08004830 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004830:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004832:	2000      	movs	r0, #0
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004838:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 800483c:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800483e:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d

  return USBD_OK;
}
 8004846:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004848:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop

08004850 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004850:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004858:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004862:	2000      	movs	r0, #0
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop

08004868 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8004868:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800486c:	b15a      	cbz	r2, 8004886 <USBD_LL_SOF+0x1e>
{
 800486e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004870:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004874:	2b03      	cmp	r3, #3
 8004876:	d001      	beq.n	800487c <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8004878:	2000      	movs	r0, #0
}
 800487a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800487c:	69d3      	ldr	r3, [r2, #28]
 800487e:	b123      	cbz	r3, 800488a <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 8004880:	4798      	blx	r3
  return USBD_OK;
 8004882:	2000      	movs	r0, #0
}
 8004884:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004886:	2003      	movs	r0, #3
}
 8004888:	4770      	bx	lr
  return USBD_OK;
 800488a:	4618      	mov	r0, r3
}
 800488c:	bd08      	pop	{r3, pc}
 800488e:	bf00      	nop

08004890 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004892:	780c      	ldrb	r4, [r1, #0]
 8004894:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004898:	2c20      	cmp	r4, #32
{
 800489a:	b083      	sub	sp, #12
 800489c:	460e      	mov	r6, r1
 800489e:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048a0:	d00e      	beq.n	80048c0 <USBD_StdDevReq+0x30>
 80048a2:	2c40      	cmp	r4, #64	; 0x40
 80048a4:	d00c      	beq.n	80048c0 <USBD_StdDevReq+0x30>
 80048a6:	b1ac      	cbz	r4, 80048d4 <USBD_StdDevReq+0x44>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	4628      	mov	r0, r5
 80048ac:	f000 ffb0 	bl	8005810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80048b0:	4628      	mov	r0, r5
 80048b2:	2100      	movs	r1, #0
 80048b4:	f000 ffac 	bl	8005810 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80048b8:	2400      	movs	r4, #0
}
 80048ba:	4620      	mov	r0, r4
 80048bc:	b003      	add	sp, #12
 80048be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048c0:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80048c4:	4631      	mov	r1, r6
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4628      	mov	r0, r5
 80048ca:	4798      	blx	r3
 80048cc:	4604      	mov	r4, r0
}
 80048ce:	4620      	mov	r0, r4
 80048d0:	b003      	add	sp, #12
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 80048d4:	784b      	ldrb	r3, [r1, #1]
 80048d6:	2b09      	cmp	r3, #9
 80048d8:	d8e6      	bhi.n	80048a8 <USBD_StdDevReq+0x18>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <USBD_StdDevReq+0x50>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004941 	.word	0x08004941
 80048e4:	0800496f 	.word	0x0800496f
 80048e8:	080048a9 	.word	0x080048a9
 80048ec:	0800498d 	.word	0x0800498d
 80048f0:	080048a9 	.word	0x080048a9
 80048f4:	08004995 	.word	0x08004995
 80048f8:	080049cd 	.word	0x080049cd
 80048fc:	080048a9 	.word	0x080048a9
 8004900:	080049e9 	.word	0x080049e9
 8004904:	08004909 	.word	0x08004909
  cfgidx = (uint8_t)(req->wValue);
 8004908:	788e      	ldrb	r6, [r1, #2]
 800490a:	4fb0      	ldr	r7, [pc, #704]	; (8004bcc <USBD_StdDevReq+0x33c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800490c:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 800490e:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004910:	f200 8139 	bhi.w	8004b86 <USBD_StdDevReq+0x2f6>
  switch (pdev->dev_state)
 8004914:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004918:	2b02      	cmp	r3, #2
 800491a:	b2da      	uxtb	r2, r3
 800491c:	f000 8121 	beq.w	8004b62 <USBD_StdDevReq+0x2d2>
 8004920:	2a03      	cmp	r2, #3
 8004922:	f000 80fb 	beq.w	8004b1c <USBD_StdDevReq+0x28c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	f000 ff72 	bl	8005810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800492c:	2100      	movs	r1, #0
 800492e:	4628      	mov	r0, r5
 8004930:	f000 ff6e 	bl	8005810 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004934:	7839      	ldrb	r1, [r7, #0]
 8004936:	4628      	mov	r0, r5
 8004938:	f7ff fe8c 	bl	8004654 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800493c:	2403      	movs	r4, #3
      break;
 800493e:	e7bc      	b.n	80048ba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8004940:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004944:	3a01      	subs	r2, #1
 8004946:	2a02      	cmp	r2, #2
 8004948:	d866      	bhi.n	8004a18 <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 800494a:	88ca      	ldrh	r2, [r1, #6]
 800494c:	2a02      	cmp	r2, #2
 800494e:	d163      	bne.n	8004a18 <USBD_StdDevReq+0x188>
      if (pdev->dev_remote_wakeup != 0U)
 8004950:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004954:	2101      	movs	r1, #1
 8004956:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8004958:	b10a      	cbz	r2, 800495e <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800495a:	2203      	movs	r2, #3
 800495c:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800495e:	2202      	movs	r2, #2
 8004960:	f105 010c 	add.w	r1, r5, #12
 8004964:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8004966:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004968:	f000 fa42 	bl	8004df0 <USBD_CtlSendData>
      break;
 800496c:	e7a5      	b.n	80048ba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800496e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004972:	3b01      	subs	r3, #1
 8004974:	2b02      	cmp	r3, #2
 8004976:	d84f      	bhi.n	8004a18 <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004978:	884b      	ldrh	r3, [r1, #2]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d19d      	bne.n	80048ba <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004984:	4628      	mov	r0, r5
 8004986:	f000 fa5f 	bl	8004e48 <USBD_CtlSendStatus>
 800498a:	e796      	b.n	80048ba <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800498c:	884b      	ldrh	r3, [r1, #2]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d193      	bne.n	80048ba <USBD_StdDevReq+0x2a>
 8004992:	e7f5      	b.n	8004980 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004994:	888b      	ldrh	r3, [r1, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d13e      	bne.n	8004a18 <USBD_StdDevReq+0x188>
 800499a:	88cb      	ldrh	r3, [r1, #6]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d13b      	bne.n	8004a18 <USBD_StdDevReq+0x188>
 80049a0:	884e      	ldrh	r6, [r1, #2]
 80049a2:	2e7f      	cmp	r6, #127	; 0x7f
 80049a4:	d838      	bhi.n	8004a18 <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d034      	beq.n	8004a18 <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80049ae:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80049b0:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80049b4:	f000 ff5c 	bl	8005870 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 fa45 	bl	8004e48 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80049be:	2e00      	cmp	r6, #0
 80049c0:	f000 80ff 	beq.w	8004bc2 <USBD_StdDevReq+0x332>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80049c4:	2302      	movs	r3, #2
 80049c6:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80049ca:	e776      	b.n	80048ba <USBD_StdDevReq+0x2a>
          USBD_GetDescriptor(pdev, req);
 80049cc:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80049ce:	0a13      	lsrs	r3, r2, #8
 80049d0:	2100      	movs	r1, #0
 80049d2:	3b01      	subs	r3, #1
 80049d4:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d81d      	bhi.n	8004a18 <USBD_StdDevReq+0x188>
 80049dc:	e8df f003 	tbb	[pc, r3]
 80049e0:	1c4d606d 	.word	0x1c4d606d
 80049e4:	431c      	.short	0x431c
 80049e6:	27          	.byte	0x27
 80049e7:	00          	.byte	0x00
  if (req->wLength != 1U)
 80049e8:	88ca      	ldrh	r2, [r1, #6]
 80049ea:	2a01      	cmp	r2, #1
 80049ec:	d114      	bne.n	8004a18 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 80049ee:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80049f2:	2902      	cmp	r1, #2
 80049f4:	b2cb      	uxtb	r3, r1
 80049f6:	f200 808a 	bhi.w	8004b0e <USBD_StdDevReq+0x27e>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f43f af54 	beq.w	80048a8 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8004a00:	4601      	mov	r1, r0
 8004a02:	2300      	movs	r3, #0
 8004a04:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004a08:	f000 f9f2 	bl	8004df0 <USBD_CtlSendData>
        break;
 8004a0c:	e755      	b.n	80048ba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004a0e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d15d      	bne.n	8004ad4 <USBD_StdDevReq+0x244>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a18:	2180      	movs	r1, #128	; 0x80
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 fef8 	bl	8005810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004a20:	4628      	mov	r0, r5
 8004a22:	2100      	movs	r1, #0
 8004a24:	f000 fef4 	bl	8005810 <USBD_LL_StallEP>
}
 8004a28:	4620      	mov	r0, r4
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a2e:	7c03      	ldrb	r3, [r0, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f1      	bne.n	8004a18 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004a34:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004a38:	f10d 0006 	add.w	r0, sp, #6
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004a40:	2307      	movs	r3, #7
 8004a42:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 8004a44:	88f2      	ldrh	r2, [r6, #6]
 8004a46:	2a00      	cmp	r2, #0
 8004a48:	d09c      	beq.n	8004984 <USBD_StdDevReq+0xf4>
    if (len != 0U)
 8004a4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0e2      	beq.n	8004a18 <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 8004a52:	429a      	cmp	r2, r3
 8004a54:	bf28      	it	cs
 8004a56:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004a58:	4601      	mov	r1, r0
 8004a5a:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8004a5c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004a60:	f000 f9c6 	bl	8004df0 <USBD_CtlSendData>
 8004a64:	e729      	b.n	80048ba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a66:	7c03      	ldrb	r3, [r0, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1d5      	bne.n	8004a18 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004a6c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004a70:	f10d 0006 	add.w	r0, sp, #6
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	4798      	blx	r3
  if (err != 0U)
 8004a78:	e7e4      	b.n	8004a44 <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	2a05      	cmp	r2, #5
 8004a7e:	d8cb      	bhi.n	8004a18 <USBD_StdDevReq+0x188>
 8004a80:	a301      	add	r3, pc, #4	; (adr r3, 8004a88 <USBD_StdDevReq+0x1f8>)
 8004a82:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004a0f 	.word	0x08004a0f
 8004a8c:	08004b03 	.word	0x08004b03
 8004a90:	08004af7 	.word	0x08004af7
 8004a94:	08004aeb 	.word	0x08004aeb
 8004a98:	08004adf 	.word	0x08004adf
 8004a9c:	08004acb 	.word	0x08004acb
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aa0:	7c03      	ldrb	r3, [r0, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 8084 	bne.w	8004bb0 <USBD_StdDevReq+0x320>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004aa8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004aac:	f10d 0006 	add.w	r0, sp, #6
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004ab8:	e7c4      	b.n	8004a44 <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004aba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004abe:	7c00      	ldrb	r0, [r0, #16]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f10d 0106 	add.w	r1, sp, #6
 8004ac6:	4798      	blx	r3
  if (err != 0U)
 8004ac8:	e7bc      	b.n	8004a44 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004aca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0a1      	beq.n	8004a18 <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004ad4:	7c28      	ldrb	r0, [r5, #16]
 8004ad6:	f10d 0106 	add.w	r1, sp, #6
 8004ada:	4798      	blx	r3
  if (err != 0U)
 8004adc:	e7b2      	b.n	8004a44 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004ade:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f5      	bne.n	8004ad4 <USBD_StdDevReq+0x244>
 8004ae8:	e796      	b.n	8004a18 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004aea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ef      	bne.n	8004ad4 <USBD_StdDevReq+0x244>
 8004af4:	e790      	b.n	8004a18 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004af6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e9      	bne.n	8004ad4 <USBD_StdDevReq+0x244>
 8004b00:	e78a      	b.n	8004a18 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004b02:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e3      	bne.n	8004ad4 <USBD_StdDevReq+0x244>
 8004b0c:	e784      	b.n	8004a18 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	f47f aeca 	bne.w	80048a8 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004b14:	1d01      	adds	r1, r0, #4
 8004b16:	f000 f96b 	bl	8004df0 <USBD_CtlSendData>
        break;
 8004b1a:	e6ce      	b.n	80048ba <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	d03b      	beq.n	8004b98 <USBD_StdDevReq+0x308>
      else if (cfgidx != pdev->dev_config)
 8004b20:	6841      	ldr	r1, [r0, #4]
 8004b22:	2901      	cmp	r1, #1
 8004b24:	f43f af2e 	beq.w	8004984 <USBD_StdDevReq+0xf4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004b28:	b2c9      	uxtb	r1, r1
 8004b2a:	f7ff fd93 	bl	8004654 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004b2e:	7839      	ldrb	r1, [r7, #0]
 8004b30:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004b32:	4628      	mov	r0, r5
 8004b34:	f7ff fd86 	bl	8004644 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004b38:	4606      	mov	r6, r0
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f43f af22 	beq.w	8004984 <USBD_StdDevReq+0xf4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 fe64 	bl	8005810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 fe60 	bl	8005810 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004b50:	7929      	ldrb	r1, [r5, #4]
 8004b52:	4628      	mov	r0, r5
 8004b54:	f7ff fd7e 	bl	8004654 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	4634      	mov	r4, r6
 8004b5c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8004b60:	e6ab      	b.n	80048ba <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8004b62:	2e00      	cmp	r6, #0
 8004b64:	f43f af0e 	beq.w	8004984 <USBD_StdDevReq+0xf4>
        pdev->dev_config = cfgidx;
 8004b68:	2101      	movs	r1, #1
 8004b6a:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004b6c:	f7ff fd6a 	bl	8004644 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004b70:	4604      	mov	r4, r0
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f47f af50 	bne.w	8004a18 <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 f965 	bl	8004e48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8004b84:	e699      	b.n	80048ba <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	f000 fe42 	bl	8005810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	2100      	movs	r1, #0
 8004b90:	f000 fe3e 	bl	8005810 <USBD_LL_StallEP>
    return USBD_FAIL;
 8004b94:	2403      	movs	r4, #3
 8004b96:	e690      	b.n	80048ba <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b98:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8004b9a:	6046      	str	r6, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b9c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	f7ff fd57 	bl	8004654 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004ba6:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8004ba8:	4634      	mov	r4, r6
        (void)USBD_CtlSendStatus(pdev);
 8004baa:	f000 f94d 	bl	8004e48 <USBD_CtlSendStatus>
 8004bae:	e684      	b.n	80048ba <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004bb0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004bb4:	f10d 0006 	add.w	r0, sp, #6
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004bc0:	e740      	b.n	8004a44 <USBD_StdDevReq+0x1b4>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8004bc8:	e677      	b.n	80048ba <USBD_StdDevReq+0x2a>
 8004bca:	bf00      	nop
 8004bcc:	20000208 	.word	0x20000208

08004bd0 <USBD_StdItfReq>:
{
 8004bd0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bd2:	780b      	ldrb	r3, [r1, #0]
 8004bd4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004bd8:	2a40      	cmp	r2, #64	; 0x40
{
 8004bda:	460d      	mov	r5, r1
 8004bdc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bde:	d00b      	beq.n	8004bf8 <USBD_StdItfReq+0x28>
 8004be0:	065b      	lsls	r3, r3, #25
 8004be2:	d509      	bpl.n	8004bf8 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	f000 fe13 	bl	8005810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004bea:	4620      	mov	r0, r4
 8004bec:	2100      	movs	r1, #0
 8004bee:	f000 fe0f 	bl	8005810 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8004bf2:	2500      	movs	r5, #0
}
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8004bf8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d812      	bhi.n	8004c28 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004c02:	792b      	ldrb	r3, [r5, #4]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d80f      	bhi.n	8004c28 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c08:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4620      	mov	r0, r4
 8004c12:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004c14:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c16:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1eb      	bne.n	8004bf4 <USBD_StdItfReq+0x24>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d1e9      	bne.n	8004bf4 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 f911 	bl	8004e48 <USBD_CtlSendStatus>
 8004c26:	e7e5      	b.n	8004bf4 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c28:	2180      	movs	r1, #128	; 0x80
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	e7db      	b.n	8004be6 <USBD_StdItfReq+0x16>
 8004c2e:	bf00      	nop

08004c30 <USBD_StdEPReq>:
{
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	780b      	ldrb	r3, [r1, #0]
 8004c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c38:	2b20      	cmp	r3, #32
{
 8004c3a:	460d      	mov	r5, r1
 8004c3c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c3e:	d01b      	beq.n	8004c78 <USBD_StdEPReq+0x48>
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d019      	beq.n	8004c78 <USBD_StdEPReq+0x48>
 8004c44:	b303      	cbz	r3, 8004c88 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c46:	2180      	movs	r1, #128	; 0x80
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 fde1 	bl	8005810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004c4e:	4620      	mov	r0, r4
 8004c50:	2100      	movs	r1, #0
 8004c52:	f000 fddd 	bl	8005810 <USBD_LL_StallEP>
}
 8004c56:	2000      	movs	r0, #0
 8004c58:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8004c5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	d053      	beq.n	8004d0c <USBD_StdEPReq+0xdc>
 8004c64:	2a03      	cmp	r2, #3
 8004c66:	d1ee      	bne.n	8004c46 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c68:	886b      	ldrh	r3, [r5, #2]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f3      	bne.n	8004c56 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004c6e:	064e      	lsls	r6, r1, #25
 8004c70:	d16f      	bne.n	8004d52 <USBD_StdEPReq+0x122>
                (void)USBD_CtlSendStatus(pdev);
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 f8e8 	bl	8004e48 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c78:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	4620      	mov	r0, r4
 8004c80:	689b      	ldr	r3, [r3, #8]
}
 8004c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c86:	4718      	bx	r3
      switch (req->bRequest)
 8004c88:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8004c8a:	888a      	ldrh	r2, [r1, #4]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8004c90:	d0e3      	beq.n	8004c5a <USBD_StdEPReq+0x2a>
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d029      	beq.n	8004cea <USBD_StdEPReq+0xba>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1d5      	bne.n	8004c46 <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 8004c9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	b2d8      	uxtb	r0, r3
 8004ca2:	d03c      	beq.n	8004d1e <USBD_StdEPReq+0xee>
 8004ca4:	2803      	cmp	r0, #3
 8004ca6:	d1ce      	bne.n	8004c46 <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004ca8:	f001 030f 	and.w	r3, r1, #15
 8004cac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8004cb0:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004cb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8004cb6:	d441      	bmi.n	8004d3c <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004cb8:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0c2      	beq.n	8004c46 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cc0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004cc4:	2514      	movs	r5, #20
 8004cc6:	fb05 4503 	mla	r5, r5, r3, r4
 8004cca:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004cce:	b12b      	cbz	r3, 8004cdc <USBD_StdEPReq+0xac>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 fdb9 	bl	8005848 <USBD_LL_IsStallEP>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d03e      	beq.n	8004d58 <USBD_StdEPReq+0x128>
                pep->status = 0x0001U;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f000 f884 	bl	8004df0 <USBD_CtlSendData>
              break;
 8004ce8:	e7b5      	b.n	8004c56 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 8004cea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	d00b      	beq.n	8004d0c <USBD_StdEPReq+0xdc>
 8004cf4:	2a03      	cmp	r2, #3
 8004cf6:	d1a6      	bne.n	8004c46 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004cf8:	886b      	ldrh	r3, [r5, #2]
 8004cfa:	b91b      	cbnz	r3, 8004d04 <USBD_StdEPReq+0xd4>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004cfc:	064a      	lsls	r2, r1, #25
 8004cfe:	d001      	beq.n	8004d04 <USBD_StdEPReq+0xd4>
 8004d00:	88eb      	ldrh	r3, [r5, #6]
 8004d02:	b35b      	cbz	r3, 8004d5c <USBD_StdEPReq+0x12c>
              (void)USBD_CtlSendStatus(pdev);
 8004d04:	4620      	mov	r0, r4
 8004d06:	f000 f89f 	bl	8004e48 <USBD_CtlSendStatus>
              break;
 8004d0a:	e7a4      	b.n	8004c56 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d0c:	064b      	lsls	r3, r1, #25
 8004d0e:	d09a      	beq.n	8004c46 <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d10:	f000 fd7e 	bl	8005810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d14:	4620      	mov	r0, r4
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	f000 fd7a 	bl	8005810 <USBD_LL_StallEP>
 8004d1c:	e79b      	b.n	8004c56 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d1e:	0648      	lsls	r0, r1, #25
 8004d20:	d191      	bne.n	8004c46 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d22:	0611      	lsls	r1, r2, #24
 8004d24:	bf4c      	ite	mi
 8004d26:	f104 0114 	addmi.w	r1, r4, #20
 8004d2a:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8004d2e:	2300      	movs	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d30:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 8004d32:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d34:	2202      	movs	r2, #2
 8004d36:	f000 f85b 	bl	8004df0 <USBD_CtlSendData>
              break;
 8004d3a:	e78c      	b.n	8004c56 <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d081      	beq.n	8004c46 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d42:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004d46:	1c5d      	adds	r5, r3, #1
 8004d48:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004d4c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d50:	e7bd      	b.n	8004cce <USBD_StdEPReq+0x9e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004d52:	f000 fd6b 	bl	800582c <USBD_LL_ClearStallEP>
 8004d56:	e78c      	b.n	8004c72 <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 8004d58:	6028      	str	r0, [r5, #0]
 8004d5a:	e7c0      	b.n	8004cde <USBD_StdEPReq+0xae>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d5c:	f000 fd58 	bl	8005810 <USBD_LL_StallEP>
 8004d60:	e7d0      	b.n	8004d04 <USBD_StdEPReq+0xd4>
 8004d62:	bf00      	nop

08004d64 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004d64:	780b      	ldrb	r3, [r1, #0]
 8004d66:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004d68:	784b      	ldrb	r3, [r1, #1]
 8004d6a:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d6c:	78ca      	ldrb	r2, [r1, #3]
 8004d6e:	788b      	ldrb	r3, [r1, #2]
 8004d70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004d74:	8043      	strh	r3, [r0, #2]
 8004d76:	794a      	ldrb	r2, [r1, #5]
 8004d78:	790b      	ldrb	r3, [r1, #4]
 8004d7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8004d7e:	8083      	strh	r3, [r0, #4]
 8004d80:	79ca      	ldrb	r2, [r1, #7]
 8004d82:	798b      	ldrb	r3, [r1, #6]
 8004d84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004d88:	80c3      	strh	r3, [r0, #6]
}
 8004d8a:	4770      	bx	lr

08004d8c <USBD_CtlError>:
{
 8004d8c:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d8e:	2180      	movs	r1, #128	; 0x80
{
 8004d90:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d92:	f000 fd3d 	bl	8005810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004d96:	4620      	mov	r0, r4
 8004d98:	2100      	movs	r1, #0
}
 8004d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004d9e:	f000 bd37 	b.w	8005810 <USBD_LL_StallEP>
 8004da2:	bf00      	nop

08004da4 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8004da4:	b308      	cbz	r0, 8004dea <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004da6:	7803      	ldrb	r3, [r0, #0]
{
 8004da8:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 8004daa:	b1fb      	cbz	r3, 8004dec <USBD_GetString+0x48>
 8004dac:	4604      	mov	r4, r0
 8004dae:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 8004db2:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 8004db4:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2d00      	cmp	r5, #0
 8004dbc:	d1f9      	bne.n	8004db2 <USBD_GetString+0xe>
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004dc2:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004dc4:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8004dc6:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004dc8:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8004dca:	7804      	ldrb	r4, [r0, #0]
 8004dcc:	b15c      	cbz	r4, 8004de6 <USBD_GetString+0x42>
  idx++;
 8004dce:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8004dd0:	2500      	movs	r5, #0
    idx++;
 8004dd2:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8004dd4:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8004dd6:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 8004dd8:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8004dda:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8004dde:	3302      	adds	r3, #2
 8004de0:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004de2:	2c00      	cmp	r4, #0
 8004de4:	d1f5      	bne.n	8004dd2 <USBD_GetString+0x2e>
}
 8004de6:	bc70      	pop	{r4, r5, r6}
 8004de8:	4770      	bx	lr
 8004dea:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8004dec:	2302      	movs	r3, #2
 8004dee:	e7e8      	b.n	8004dc2 <USBD_GetString+0x1e>

08004df0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004df4:	2502      	movs	r5, #2
{
 8004df6:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004df8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004dfc:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004e00:	2100      	movs	r1, #0
 8004e02:	f000 fd43 	bl	800588c <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e06:	2000      	movs	r0, #0
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop

08004e0c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004e0c:	b508      	push	{r3, lr}
 8004e0e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004e10:	460a      	mov	r2, r1
 8004e12:	2100      	movs	r1, #0
 8004e14:	f000 fd3a 	bl	800588c <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e18:	2000      	movs	r0, #0
 8004e1a:	bd08      	pop	{r3, pc}

08004e1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004e20:	2503      	movs	r5, #3
{
 8004e22:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004e24:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004e28:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f000 fd3b 	bl	80058a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e32:	2000      	movs	r0, #0
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
 8004e36:	bf00      	nop

08004e38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004e38:	b508      	push	{r3, lr}
 8004e3a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e3c:	460a      	mov	r2, r1
 8004e3e:	2100      	movs	r1, #0
 8004e40:	f000 fd32 	bl	80058a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e44:	2000      	movs	r0, #0
 8004e46:	bd08      	pop	{r3, pc}

08004e48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004e48:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e4a:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e4c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e4e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e52:	461a      	mov	r2, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	f000 fd19 	bl	800588c <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	bd08      	pop	{r3, pc}
 8004e5e:	bf00      	nop

08004e60 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004e60:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e62:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e64:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e66:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f000 fd1b 	bl	80058a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e72:	2000      	movs	r0, #0
 8004e74:	bd08      	pop	{r3, pc}
 8004e76:	bf00      	nop

08004e78 <tmc4671_readInt>:
extern uint8_t tmc4671_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int32_t tmc4671_readInt(uint8_t motor, uint8_t address)
{
 8004e78:	b538      	push	{r3, r4, r5, lr}
	// clear write bit
	address &= 0x7F;

	// write address
	tmc4671_readwriteByte(motor, address, false);
 8004e7a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004e7e:	2200      	movs	r2, #0
{
 8004e80:	4604      	mov	r4, r0
	tmc4671_readwriteByte(motor, address, false);
 8004e82:	f7fb fe2f 	bl	8000ae4 <tmc4671_readwriteByte>

	// read data
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
 8004e86:	2200      	movs	r2, #0
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f7fb fe2a 	bl	8000ae4 <tmc4671_readwriteByte>
	value <<= 8;
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004e90:	2200      	movs	r2, #0
 8004e92:	4611      	mov	r1, r2
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
 8004e94:	4605      	mov	r5, r0
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004e96:	4620      	mov	r0, r4
 8004e98:	f7fb fe24 	bl	8000ae4 <tmc4671_readwriteByte>
	value <<= 8;
 8004e9c:	022d      	lsls	r5, r5, #8
	value <<= 8;
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004e9e:	2200      	movs	r2, #0
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004ea0:	ea40 0305 	orr.w	r3, r0, r5
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4620      	mov	r0, r4
	value <<= 8;
 8004ea8:	021d      	lsls	r5, r3, #8
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004eaa:	f7fb fe1b 	bl	8000ae4 <tmc4671_readwriteByte>
	value <<= 8;
	value |= tmc4671_readwriteByte(motor, 0, true);
 8004eae:	2201      	movs	r2, #1
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004eb0:	ea40 0305 	orr.w	r3, r0, r5
	value |= tmc4671_readwriteByte(motor, 0, true);
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4620      	mov	r0, r4
	value <<= 8;
 8004eb8:	021c      	lsls	r4, r3, #8
	value |= tmc4671_readwriteByte(motor, 0, true);
 8004eba:	f7fb fe13 	bl	8000ae4 <tmc4671_readwriteByte>

	return value;
}
 8004ebe:	4320      	orrs	r0, r4
 8004ec0:	bd38      	pop	{r3, r4, r5, pc}
 8004ec2:	bf00      	nop

08004ec4 <tmc4671_writeInt>:

void tmc4671_writeInt(uint8_t motor, uint8_t address, int32_t value)
{
 8004ec4:	b538      	push	{r3, r4, r5, lr}
	// write address
	tmc4671_readwriteByte(motor, address|0x80, false);
 8004ec6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
 8004eca:	4615      	mov	r5, r2
 8004ecc:	4604      	mov	r4, r0
	tmc4671_readwriteByte(motor, address|0x80, false);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f7fb fe08 	bl	8000ae4 <tmc4671_readwriteByte>

	// write value
	tmc4671_readwriteByte(motor, 0xFF & (value>>24), false);
 8004ed4:	0e29      	lsrs	r1, r5, #24
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f7fb fe03 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>16), false);
 8004ede:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f7fb fdfd 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>8), false);
 8004eea:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8004eee:	4620      	mov	r0, r4
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f7fb fdf7 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
 8004ef6:	b2e9      	uxtb	r1, r5
 8004ef8:	4620      	mov	r0, r4
 8004efa:	2201      	movs	r2, #1
}
 8004efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
 8004f00:	f7fb bdf0 	b.w	8000ae4 <tmc4671_readwriteByte>

08004f04 <tmc4671_disablePWM>:
}

// =====

void tmc4671_disablePWM(uint8_t motor)
{
 8004f04:	b510      	push	{r4, lr}
	tmc4671_readwriteByte(motor, address|0x80, false);
 8004f06:	2200      	movs	r2, #0
 8004f08:	219a      	movs	r1, #154	; 0x9a
{
 8004f0a:	4604      	mov	r4, r0
	tmc4671_readwriteByte(motor, address|0x80, false);
 8004f0c:	f7fb fdea 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>24), false);
 8004f10:	2200      	movs	r2, #0
 8004f12:	4611      	mov	r1, r2
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7fb fde5 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>16), false);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f7fb fde0 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>8), false);
 8004f24:	2200      	movs	r2, #0
 8004f26:	4611      	mov	r1, r2
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7fb fddb 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
 8004f2e:	4620      	mov	r0, r4
 8004f30:	2201      	movs	r2, #1
	tmc4671_writeInt(motor, TMC4671_PWM_SV_CHOP, 0);
}
 8004f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
 8004f36:	2100      	movs	r1, #0
 8004f38:	f7fb bdd4 	b.w	8000ae4 <tmc4671_readwriteByte>

08004f3c <tmc4671_readFieldWithDependency>:
{
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_P_POSITION_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
}

int32_t tmc4671_readFieldWithDependency(uint8_t motor, uint8_t reg, uint8_t dependsReg, uint32_t dependsValue, uint32_t mask, uint8_t shift)
{
 8004f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f40:	468b      	mov	fp, r1
 8004f42:	4617      	mov	r7, r2
	tmc4671_readwriteByte(motor, address, false);
 8004f44:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8004f48:	2200      	movs	r2, #0
{
 8004f4a:	4699      	mov	r9, r3
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004f50:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
	tmc4671_readwriteByte(motor, address, false);
 8004f54:	f7fb fdc6 	bl	8000ae4 <tmc4671_readwriteByte>
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7fb fdc1 	bl	8000ae4 <tmc4671_readwriteByte>
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004f62:	2200      	movs	r2, #0
 8004f64:	4611      	mov	r1, r2
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
 8004f66:	4680      	mov	r8, r0
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f7fb fdbb 	bl	8000ae4 <tmc4671_readwriteByte>
	value <<= 8;
 8004f6e:	ea4f 2808 	mov.w	r8, r8, lsl #8
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004f72:	2200      	movs	r2, #0
 8004f74:	4611      	mov	r1, r2
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004f76:	ea40 0808 	orr.w	r8, r0, r8
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f7fb fdb2 	bl	8000ae4 <tmc4671_readwriteByte>
	value <<= 8;
 8004f80:	ea4f 2808 	mov.w	r8, r8, lsl #8
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004f84:	ea40 0808 	orr.w	r8, r0, r8
	value |= tmc4671_readwriteByte(motor, 0, true);
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	f7fb fda9 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, address|0x80, false);
 8004f92:	f047 0780 	orr.w	r7, r7, #128	; 0x80
	value <<= 8;
 8004f96:	ea4f 2508 	mov.w	r5, r8, lsl #8
	tmc4671_readwriteByte(motor, address|0x80, false);
 8004f9a:	4639      	mov	r1, r7
	value |= tmc4671_readwriteByte(motor, 0, true);
 8004f9c:	4680      	mov	r8, r0
	tmc4671_readwriteByte(motor, address|0x80, false);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f7fb fd9f 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>24), false);
 8004fa6:	ea4f 6119 	mov.w	r1, r9, lsr #24
 8004faa:	4620      	mov	r0, r4
 8004fac:	2200      	movs	r2, #0
 8004fae:	f7fb fd99 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>16), false);
 8004fb2:	f3c9 4107 	ubfx	r1, r9, #16, #8
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f7fb fd93 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>8), false);
 8004fbe:	f3c9 2107 	ubfx	r1, r9, #8, #8
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f7fb fd8d 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
 8004fca:	fa5f f189 	uxtb.w	r1, r9
 8004fce:	4620      	mov	r0, r4
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f7fb fd87 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, address, false);
 8004fd6:	f00b 017f 	and.w	r1, fp, #127	; 0x7f
 8004fda:	4620      	mov	r0, r4
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f7fb fd81 	bl	8000ae4 <tmc4671_readwriteByte>
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f7fb fd7c 	bl	8000ae4 <tmc4671_readwriteByte>
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004fec:	2200      	movs	r2, #0
	value |= tmc4671_readwriteByte(motor, 0, true);
 8004fee:	ea48 0805 	orr.w	r8, r8, r5
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004ff2:	4611      	mov	r1, r2
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
 8004ff4:	4605      	mov	r5, r0
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f7fb fd74 	bl	8000ae4 <tmc4671_readwriteByte>
	value <<= 8;
 8004ffc:	022d      	lsls	r5, r5, #8
	value |= tmc4671_readwriteByte(motor, 0, false);
 8004ffe:	2200      	movs	r2, #0
 8005000:	4611      	mov	r1, r2
	value |= tmc4671_readwriteByte(motor, 0, false);
 8005002:	4305      	orrs	r5, r0
	value |= tmc4671_readwriteByte(motor, 0, false);
 8005004:	4620      	mov	r0, r4
 8005006:	f7fb fd6d 	bl	8000ae4 <tmc4671_readwriteByte>
	value <<= 8;
 800500a:	022d      	lsls	r5, r5, #8
	value |= tmc4671_readwriteByte(motor, 0, false);
 800500c:	4305      	orrs	r5, r0
	value |= tmc4671_readwriteByte(motor, 0, true);
 800500e:	2201      	movs	r2, #1
 8005010:	4620      	mov	r0, r4
 8005012:	2100      	movs	r1, #0
 8005014:	f7fb fd66 	bl	8000ae4 <tmc4671_readwriteByte>
	value <<= 8;
 8005018:	022d      	lsls	r5, r5, #8
	tmc4671_readwriteByte(motor, address|0x80, false);
 800501a:	4639      	mov	r1, r7
	value |= tmc4671_readwriteByte(motor, 0, true);
 800501c:	4305      	orrs	r5, r0
	tmc4671_readwriteByte(motor, address|0x80, false);
 800501e:	2200      	movs	r2, #0
 8005020:	4620      	mov	r0, r4
 8005022:	f7fb fd5f 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>24), false);
 8005026:	ea4f 6118 	mov.w	r1, r8, lsr #24
 800502a:	4620      	mov	r0, r4
 800502c:	2200      	movs	r2, #0
 800502e:	f7fb fd59 	bl	8000ae4 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>16), false);
 8005032:	f3c8 4107 	ubfx	r1, r8, #16, #8
 8005036:	4620      	mov	r0, r4
 8005038:	2200      	movs	r2, #0
 800503a:	f7fb fd53 	bl	8000ae4 <tmc4671_readwriteByte>
	// remember old depends value
	uint32_t lastDependsValue = tmc4671_readInt(motor, dependsReg);

	// set needed depends value
	tmc4671_writeInt(motor, dependsReg, dependsValue);
	uint32_t value = FIELD_GET(tmc4671_readInt(motor, reg), mask, shift);
 800503e:	4035      	ands	r5, r6
	tmc4671_readwriteByte(motor, 0xFF & (value>>8), false);
 8005040:	f3c8 2107 	ubfx	r1, r8, #8, #8
 8005044:	4620      	mov	r0, r4
 8005046:	2200      	movs	r2, #0
 8005048:	f7fb fd4c 	bl	8000ae4 <tmc4671_readwriteByte>
	uint32_t value = FIELD_GET(tmc4671_readInt(motor, reg), mask, shift);
 800504c:	fa25 f50a 	lsr.w	r5, r5, sl
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
 8005050:	fa5f f188 	uxtb.w	r1, r8
 8005054:	4620      	mov	r0, r4
 8005056:	2201      	movs	r2, #1
 8005058:	f7fb fd44 	bl	8000ae4 <tmc4671_readwriteByte>

	// set old depends value
	tmc4671_writeInt(motor, dependsReg, lastDependsValue);
	return value;
}
 800505c:	4628      	mov	r0, r5
 800505e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop

08005064 <tmcl_getVersion>:

void tmcl_getVersion()
{
	uint32_t i;

	if (ActualCommand.Type == 0)
 8005064:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <tmcl_getVersion+0xac>)
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	b9c3      	cbnz	r3, 800509c <tmcl_getVersion+0x38>
	{
		TMCLReplyFormat = RF_SPECIAL;
		SpecialReply[0] = HOST_ADDRESS;
 800506a:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <tmcl_getVersion+0xb0>)
		for (i = 0; i < 8; i++)
			SpecialReply[i + 1] = VersionString[i];
 800506c:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <tmcl_getVersion+0xb4>)
		SpecialReply[0] = HOST_ADDRESS;
 800506e:	4619      	mov	r1, r3
 8005070:	2002      	movs	r0, #2
			SpecialReply[i + 1] = VersionString[i];
 8005072:	6812      	ldr	r2, [r2, #0]
{
 8005074:	b430      	push	{r4, r5}
		SpecialReply[0] = HOST_ADDRESS;
 8005076:	f801 0b01 	strb.w	r0, [r1], #1
		TMCLReplyFormat = RF_SPECIAL;
 800507a:	4c28      	ldr	r4, [pc, #160]	; (800511c <tmcl_getVersion+0xb8>)
 800507c:	1d10      	adds	r0, r2, #4
 800507e:	2501      	movs	r5, #1
 8005080:	4288      	cmp	r0, r1
 8005082:	7025      	strb	r5, [r4, #0]
		for (i = 0; i < 8; i++)
 8005084:	d902      	bls.n	800508c <tmcl_getVersion+0x28>
 8005086:	1d59      	adds	r1, r3, #5
 8005088:	428a      	cmp	r2, r1
 800508a:	d32e      	bcc.n	80050ea <tmcl_getVersion+0x86>
			SpecialReply[i + 1] = VersionString[i];
 800508c:	6811      	ldr	r1, [r2, #0]
 800508e:	f8c3 1001 	str.w	r1, [r3, #1]
 8005092:	6852      	ldr	r2, [r2, #4]
 8005094:	f8c3 2005 	str.w	r2, [r3, #5]
		ActualReply.Value.Byte[3] = ((VersionString[0] - '0') * 10) + (VersionString[1] - '0');
		ActualReply.Value.Byte[2] = ((VersionString[2] - '0') * 10) + (VersionString[3] - '0');
		ActualReply.Value.Byte[1] = (VersionString[5] - '0');
		ActualReply.Value.Byte[0] = ((VersionString[6] - '0') * 10) + (VersionString[7] - '0');
	}
}
 8005098:	bc30      	pop	{r4, r5}
 800509a:	4770      	bx	lr
	else if (ActualCommand.Type == 1)
 800509c:	2b01      	cmp	r3, #1
 800509e:	d000      	beq.n	80050a2 <tmcl_getVersion+0x3e>
 80050a0:	4770      	bx	lr
		ActualReply.Value.Byte[3] = ((VersionString[0] - '0') * 10) + (VersionString[1] - '0');
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <tmcl_getVersion+0xb4>)
 80050a4:	481e      	ldr	r0, [pc, #120]	; (8005120 <tmcl_getVersion+0xbc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	7859      	ldrb	r1, [r3, #1]
 80050ac:	3a30      	subs	r2, #48	; 0x30
 80050ae:	3930      	subs	r1, #48	; 0x30
 80050b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80050b4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80050b8:	71c2      	strb	r2, [r0, #7]
		ActualReply.Value.Byte[2] = ((VersionString[2] - '0') * 10) + (VersionString[3] - '0');
 80050ba:	789a      	ldrb	r2, [r3, #2]
 80050bc:	78d9      	ldrb	r1, [r3, #3]
 80050be:	3a30      	subs	r2, #48	; 0x30
 80050c0:	3930      	subs	r1, #48	; 0x30
 80050c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80050c6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80050ca:	7182      	strb	r2, [r0, #6]
		ActualReply.Value.Byte[1] = (VersionString[5] - '0');
 80050cc:	795a      	ldrb	r2, [r3, #5]
 80050ce:	3a30      	subs	r2, #48	; 0x30
 80050d0:	7142      	strb	r2, [r0, #5]
		ActualReply.Value.Byte[0] = ((VersionString[6] - '0') * 10) + (VersionString[7] - '0');
 80050d2:	799a      	ldrb	r2, [r3, #6]
 80050d4:	79d9      	ldrb	r1, [r3, #7]
 80050d6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80050da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80050e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80050e6:	7103      	strb	r3, [r0, #4]
}
 80050e8:	4770      	bx	lr
			SpecialReply[i + 1] = VersionString[i];
 80050ea:	7811      	ldrb	r1, [r2, #0]
 80050ec:	7059      	strb	r1, [r3, #1]
 80050ee:	7851      	ldrb	r1, [r2, #1]
 80050f0:	7099      	strb	r1, [r3, #2]
 80050f2:	7891      	ldrb	r1, [r2, #2]
 80050f4:	70d9      	strb	r1, [r3, #3]
 80050f6:	78d1      	ldrb	r1, [r2, #3]
 80050f8:	7119      	strb	r1, [r3, #4]
 80050fa:	7911      	ldrb	r1, [r2, #4]
 80050fc:	7159      	strb	r1, [r3, #5]
 80050fe:	7951      	ldrb	r1, [r2, #5]
 8005100:	7199      	strb	r1, [r3, #6]
 8005102:	7991      	ldrb	r1, [r2, #6]
 8005104:	71d9      	strb	r1, [r3, #7]
 8005106:	79d2      	ldrb	r2, [r2, #7]
 8005108:	721a      	strb	r2, [r3, #8]
}
 800510a:	bc30      	pop	{r4, r5}
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000438 	.word	0x20000438
 8005114:	20000444 	.word	0x20000444
 8005118:	2000011c 	.word	0x2000011c
 800511c:	20000440 	.word	0x20000440
 8005120:	20000450 	.word	0x20000450
 8005124:	00000000 	.word	0x00000000

08005128 <tmcl_executeActualCommand>:
		break;
	}
}

void tmcl_executeActualCommand()
{
 8005128:	b530      	push	{r4, r5, lr}
	// prepare reply command
	ActualReply.Opcode = ActualCommand.Opcode;
 800512a:	4c2f      	ldr	r4, [pc, #188]	; (80051e8 <tmcl_executeActualCommand+0xc0>)
 800512c:	4d2f      	ldr	r5, [pc, #188]	; (80051ec <tmcl_executeActualCommand+0xc4>)
	ActualReply.Status = REPLY_OK;
	ActualReply.Value.Int32 = ActualCommand.Value.Int32;
 800512e:	6863      	ldr	r3, [r4, #4]
	ActualReply.Opcode = ActualCommand.Opcode;
 8005130:	7821      	ldrb	r1, [r4, #0]

	printf("Opcode: %d\n", ActualCommand.Opcode);
 8005132:	482f      	ldr	r0, [pc, #188]	; (80051f0 <tmcl_executeActualCommand+0xc8>)
	ActualReply.Value.Int32 = ActualCommand.Value.Int32;
 8005134:	606b      	str	r3, [r5, #4]
	ActualReply.Status = REPLY_OK;
 8005136:	2264      	movs	r2, #100	; 0x64
{
 8005138:	b083      	sub	sp, #12
	ActualReply.Opcode = ActualCommand.Opcode;
 800513a:	7069      	strb	r1, [r5, #1]
	ActualReply.Status = REPLY_OK;
 800513c:	702a      	strb	r2, [r5, #0]
	printf("Opcode: %d\n", ActualCommand.Opcode);
 800513e:	f000 fc0b 	bl	8005958 <iprintf>

	switch (ActualCommand.Opcode)
 8005142:	7823      	ldrb	r3, [r4, #0]
 8005144:	2b92      	cmp	r3, #146	; 0x92
 8005146:	d016      	beq.n	8005176 <tmcl_executeActualCommand+0x4e>
 8005148:	d808      	bhi.n	800515c <tmcl_executeActualCommand+0x34>
 800514a:	2b0f      	cmp	r3, #15
 800514c:	d00c      	beq.n	8005168 <tmcl_executeActualCommand+0x40>
 800514e:	2b88      	cmp	r3, #136	; 0x88
 8005150:	d108      	bne.n	8005164 <tmcl_executeActualCommand+0x3c>
	case TMCL_writeRegisterChannel_1:
		if (ActualCommand.Motor == 0)
			tmc4671_writeInt(DEFAULT_MC, ActualCommand.Type, ActualCommand.Value.Int32);
		break;
	}
}
 8005152:	b003      	add	sp, #12
 8005154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		tmcl_getVersion();
 8005158:	f7ff bf84 	b.w	8005064 <tmcl_getVersion>
	switch (ActualCommand.Opcode)
 800515c:	2b94      	cmp	r3, #148	; 0x94
 800515e:	d101      	bne.n	8005164 <tmcl_executeActualCommand+0x3c>
		if (ActualCommand.Motor == 0)
 8005160:	78a3      	ldrb	r3, [r4, #2]
 8005162:	b19b      	cbz	r3, 800518c <tmcl_executeActualCommand+0x64>
}
 8005164:	b003      	add	sp, #12
 8005166:	bd30      	pop	{r4, r5, pc}
	switch (ActualCommand.Type)
 8005168:	7860      	ldrb	r0, [r4, #1]
 800516a:	2805      	cmp	r0, #5
 800516c:	d014      	beq.n	8005198 <tmcl_executeActualCommand+0x70>
		ActualReply.Status = REPLY_INVALID_VALUE;
 800516e:	2304      	movs	r3, #4
 8005170:	702b      	strb	r3, [r5, #0]
}
 8005172:	b003      	add	sp, #12
 8005174:	bd30      	pop	{r4, r5, pc}
		if (ActualCommand.Motor == 0)
 8005176:	78a3      	ldrb	r3, [r4, #2]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f3      	bne.n	8005164 <tmcl_executeActualCommand+0x3c>
			tmc4671_writeInt(DEFAULT_MC, ActualCommand.Type, ActualCommand.Value.Int32);
 800517c:	6862      	ldr	r2, [r4, #4]
 800517e:	7861      	ldrb	r1, [r4, #1]
 8005180:	2005      	movs	r0, #5
}
 8005182:	b003      	add	sp, #12
 8005184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			tmc4671_writeInt(DEFAULT_MC, ActualCommand.Type, ActualCommand.Value.Int32);
 8005188:	f7ff be9c 	b.w	8004ec4 <tmc4671_writeInt>
			ActualReply.Value.Int32 = tmc4671_readInt(DEFAULT_MC, ActualCommand.Type);
 800518c:	7861      	ldrb	r1, [r4, #1]
 800518e:	2005      	movs	r0, #5
 8005190:	f7ff fe72 	bl	8004e78 <tmc4671_readInt>
 8005194:	6068      	str	r0, [r5, #4]
 8005196:	e7e5      	b.n	8005164 <tmcl_executeActualCommand+0x3c>
		rawVMADC = tmc4671_readFieldWithDependency(DEFAULT_MC, TMC4671_ADC_RAW_DATA, TMC4671_ADC_RAW_ADDR, 1, TMC4671_ADC_VM_RAW_MASK, TMC4671_ADC_VM_RAW_SHIFT)-VM_ADC_OFFSET;
 8005198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800519c:	2200      	movs	r2, #0
 800519e:	e9cd 3200 	strd	r3, r2, [sp]
 80051a2:	2102      	movs	r1, #2
 80051a4:	2301      	movs	r3, #1
 80051a6:	2203      	movs	r2, #3
 80051a8:	f7ff fec8 	bl	8004f3c <tmc4671_readFieldWithDependency>
 80051ac:	f7fb fb04 	bl	80007b8 <__aeabi_i2d>
 80051b0:	a309      	add	r3, pc, #36	; (adr r3, 80051d8 <tmcl_executeActualCommand+0xb0>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f7fb f9b1 	bl	800051c <__aeabi_dsub>
 80051ba:	f7fb fb67 	bl	800088c <__aeabi_d2iz>
		ActualReply.Value.Int32 = ((rawVMADC*(VM_ADC_REF/VM_ADC_RES))/(VM_DIV_FACTOR))*10;
 80051be:	f7fb fafb 	bl	80007b8 <__aeabi_i2d>
 80051c2:	a307      	add	r3, pc, #28	; (adr r3, 80051e0 <tmcl_executeActualCommand+0xb8>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f87a 	bl	80002c0 <__aeabi_dmul>
 80051cc:	f7fb fb5e 	bl	800088c <__aeabi_d2iz>
 80051d0:	6068      	str	r0, [r5, #4]
}
 80051d2:	e7c7      	b.n	8005164 <tmcl_executeActualCommand+0x3c>
 80051d4:	f3af 8000 	nop.w
 80051d8:	00000000 	.word	0x00000000
 80051dc:	40e0c700 	.word	0x40e0c700
 80051e0:	55555555 	.word	0x55555555
 80051e4:	3fa85155 	.word	0x3fa85155
 80051e8:	20000438 	.word	0x20000438
 80051ec:	20000450 	.word	0x20000450
 80051f0:	0800682c 	.word	0x0800682c

080051f4 <tmcl_processCommand>:

void tmcl_processCommand()
{
 80051f4:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t USBCmd[9];
	uint8_t USBReply[9];

	/* send reply for last TMCL request */
	if (TMCLCommandState == TCS_USB) // reply via USB
 80051f6:	4c4a      	ldr	r4, [pc, #296]	; (8005320 <tmcl_processCommand+0x12c>)
 80051f8:	7823      	ldrb	r3, [r4, #0]
 80051fa:	2b07      	cmp	r3, #7
{
 80051fc:	b089      	sub	sp, #36	; 0x24
	if (TMCLCommandState == TCS_USB) // reply via USB
 80051fe:	d018      	beq.n	8005232 <tmcl_processCommand+0x3e>
				USBReply[i] = SpecialReply[i];
			}
		}
		CDC_Transmit_FS(USBReply, 9);
	}
	else if (TMCLCommandState == TCS_USB_ERROR) // last command had a wrong checksum
 8005200:	2b08      	cmp	r3, #8
 8005202:	d071      	beq.n	80052e8 <tmcl_processCommand+0xf4>
 8005204:	4d47      	ldr	r5, [pc, #284]	; (8005324 <tmcl_processCommand+0x130>)

		CDC_Transmit_FS(USBReply, 9);
	}

	// reset command state (reply has been send)
	TMCLCommandState = TCS_IDLE;
 8005206:	2300      	movs	r3, #0
	TMCLReplyFormat = RF_STANDARD;

	// last command was a reset?

	/* read next request */
	if (USB_retrieveCMD(USBCmd, &CMDLen))
 8005208:	a901      	add	r1, sp, #4
 800520a:	a802      	add	r0, sp, #8
	TMCLCommandState = TCS_IDLE;
 800520c:	7023      	strb	r3, [r4, #0]
	TMCLReplyFormat = RF_STANDARD;
 800520e:	702b      	strb	r3, [r5, #0]
	if (USB_retrieveCMD(USBCmd, &CMDLen))
 8005210:	f000 f924 	bl	800545c <USB_retrieveCMD>
 8005214:	b110      	cbz	r0, 800521c <tmcl_processCommand+0x28>
	{
		if (CMDLen == 9)
 8005216:	9b01      	ldr	r3, [sp, #4]
 8005218:	2b09      	cmp	r3, #9
 800521a:	d016      	beq.n	800524a <tmcl_processCommand+0x56>
			}
		}
	}

	// handle request after successful reading
	if (TMCLCommandState != TCS_IDLE && TMCLCommandState != TCS_UART_ERROR && TMCLCommandState != TCS_RS485_ERROR && TMCLCommandState != TCS_USB_ERROR)
 800521c:	7823      	ldrb	r3, [r4, #0]
 800521e:	2b08      	cmp	r3, #8
 8005220:	d842      	bhi.n	80052a8 <tmcl_processCommand+0xb4>
 8005222:	f240 1251 	movw	r2, #337	; 0x151
 8005226:	fa22 f303 	lsr.w	r3, r2, r3
 800522a:	07db      	lsls	r3, r3, #31
 800522c:	d53c      	bpl.n	80052a8 <tmcl_processCommand+0xb4>
	{
		tmcl_executeActualCommand();
	}
}
 800522e:	b009      	add	sp, #36	; 0x24
 8005230:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (TMCLReplyFormat == RF_STANDARD)
 8005232:	4d3c      	ldr	r5, [pc, #240]	; (8005324 <tmcl_processCommand+0x130>)
 8005234:	782b      	ldrb	r3, [r5, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d03a      	beq.n	80052b0 <tmcl_processCommand+0xbc>
		else if (TMCLReplyFormat == RF_SPECIAL)
 800523a:	2b01      	cmp	r3, #1
 800523c:	d064      	beq.n	8005308 <tmcl_processCommand+0x114>
 800523e:	ab05      	add	r3, sp, #20
		CDC_Transmit_FS(USBReply, 9);
 8005240:	4618      	mov	r0, r3
 8005242:	2109      	movs	r1, #9
 8005244:	f000 f8f4 	bl	8005430 <CDC_Transmit_FS>
 8005248:	e7dd      	b.n	8005206 <tmcl_processCommand+0x12>
			commLoopCounter++;
 800524a:	4a37      	ldr	r2, [pc, #220]	; (8005328 <tmcl_processCommand+0x134>)
			if (USBCmd[0] == MODULE_ADDRESS)	 // check address
 800524c:	f89d 1008 	ldrb.w	r1, [sp, #8]
			commLoopCounter++;
 8005250:	6813      	ldr	r3, [r2, #0]
			if (USBCmd[0] == MODULE_ADDRESS)	 // check address
 8005252:	2901      	cmp	r1, #1
			commLoopCounter++;
 8005254:	f103 0301 	add.w	r3, r3, #1
 8005258:	6013      	str	r3, [r2, #0]
			if (USBCmd[0] == MODULE_ADDRESS)	 // check address
 800525a:	d1df      	bne.n	800521c <tmcl_processCommand+0x28>
					checksum += USBCmd[i];
 800525c:	e9dd 2002 	ldrd	r2, r0, [sp, #8]
 8005260:	f002 337f 	and.w	r3, r2, #2139062143	; 0x7f7f7f7f
 8005264:	f000 367f 	and.w	r6, r0, #2139062143	; 0x7f7f7f7f
 8005268:	4042      	eors	r2, r0
 800526a:	4433      	add	r3, r6
 800526c:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8005270:	405a      	eors	r2, r3
				if (checksum == USBCmd[8])  // check checksum
 8005272:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005276:	4413      	add	r3, r2
 8005278:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800527c:	440b      	add	r3, r1
 800527e:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8005282:	eb03 6312 	add.w	r3, r3, r2, lsr #24
 8005286:	b2db      	uxtb	r3, r3
 8005288:	429d      	cmp	r5, r3
 800528a:	d146      	bne.n	800531a <tmcl_processCommand+0x126>
					ActualCommand.Opcode = USBCmd[1];
 800528c:	4b27      	ldr	r3, [pc, #156]	; (800532c <tmcl_processCommand+0x138>)
 800528e:	f89d 2009 	ldrb.w	r2, [sp, #9]
					ActualCommand.Type = USBCmd[2];
 8005292:	f89d 500a 	ldrb.w	r5, [sp, #10]
					ActualCommand.Motor = USBCmd[3];
 8005296:	f89d 100b 	ldrb.w	r1, [sp, #11]
					ActualCommand.Opcode = USBCmd[1];
 800529a:	701a      	strb	r2, [r3, #0]
					ActualCommand.Type = USBCmd[2];
 800529c:	ba00      	rev	r0, r0
					TMCLCommandState = TCS_USB;
 800529e:	2207      	movs	r2, #7
					ActualCommand.Value.Byte[0] = USBCmd[7];
 80052a0:	6058      	str	r0, [r3, #4]
					ActualCommand.Type = USBCmd[2];
 80052a2:	705d      	strb	r5, [r3, #1]
					ActualCommand.Motor = USBCmd[3];
 80052a4:	7099      	strb	r1, [r3, #2]
					TMCLCommandState = TCS_USB;
 80052a6:	7022      	strb	r2, [r4, #0]
		tmcl_executeActualCommand();
 80052a8:	f7ff ff3e 	bl	8005128 <tmcl_executeActualCommand>
}
 80052ac:	b009      	add	sp, #36	; 0x24
 80052ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint8_t Checksum = HOST_ADDRESS + MODULE_ADDRESS + ActualReply.Status + ActualReply.Opcode + ActualReply.Value.Byte[3] + ActualReply.Value.Byte[2] + ActualReply.Value.Byte[1] + ActualReply.Value.Byte[0];
 80052b0:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <tmcl_processCommand+0x13c>)
 80052b2:	7851      	ldrb	r1, [r2, #1]
 80052b4:	7813      	ldrb	r3, [r2, #0]
 80052b6:	79d7      	ldrb	r7, [r2, #7]
			USBReply[2] = ActualReply.Status;
 80052b8:	f88d 3016 	strb.w	r3, [sp, #22]
			uint8_t Checksum = HOST_ADDRESS + MODULE_ADDRESS + ActualReply.Status + ActualReply.Opcode + ActualReply.Value.Byte[3] + ActualReply.Value.Byte[2] + ActualReply.Value.Byte[1] + ActualReply.Value.Byte[0];
 80052bc:	440b      	add	r3, r1
 80052be:	7996      	ldrb	r6, [r2, #6]
 80052c0:	7950      	ldrb	r0, [r2, #5]
			USBReply[3] = ActualReply.Opcode;
 80052c2:	f88d 1017 	strb.w	r1, [sp, #23]
			uint8_t Checksum = HOST_ADDRESS + MODULE_ADDRESS + ActualReply.Status + ActualReply.Opcode + ActualReply.Value.Byte[3] + ActualReply.Value.Byte[2] + ActualReply.Value.Byte[1] + ActualReply.Value.Byte[0];
 80052c6:	3303      	adds	r3, #3
 80052c8:	443b      	add	r3, r7
 80052ca:	4433      	add	r3, r6
 80052cc:	4403      	add	r3, r0
 80052ce:	7910      	ldrb	r0, [r2, #4]
 80052d0:	6852      	ldr	r2, [r2, #4]
 80052d2:	4403      	add	r3, r0
			USBReply[1] = MODULE_ADDRESS;
 80052d4:	ba12      	rev	r2, r2
			USBReply[0] = HOST_ADDRESS;
 80052d6:	f44f 7181 	mov.w	r1, #258	; 0x102
			USBReply[8] = Checksum;
 80052da:	f88d 301c 	strb.w	r3, [sp, #28]
			USBReply[4] = ActualReply.Value.Byte[3];
 80052de:	9206      	str	r2, [sp, #24]
			USBReply[0] = HOST_ADDRESS;
 80052e0:	f8ad 1014 	strh.w	r1, [sp, #20]
			USBReply[8] = Checksum;
 80052e4:	ab05      	add	r3, sp, #20
 80052e6:	e7ab      	b.n	8005240 <tmcl_processCommand+0x4c>
		ActualReply.Status = REPLY_CHKERR;
 80052e8:	4a11      	ldr	r2, [pc, #68]	; (8005330 <tmcl_processCommand+0x13c>)
		USBReply[0] = HOST_ADDRESS;
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <tmcl_processCommand+0x140>)
 80052ec:	9305      	str	r3, [sp, #20]
		ActualReply.Status = REPLY_CHKERR;
 80052ee:	2001      	movs	r0, #1
		ActualReply.Value.Int32 = 0;
 80052f0:	2300      	movs	r3, #0
		USBReply[8] = Checksum;
 80052f2:	2504      	movs	r5, #4
		ActualReply.Status = REPLY_CHKERR;
 80052f4:	8010      	strh	r0, [r2, #0]
		CDC_Transmit_FS(USBReply, 9);
 80052f6:	2109      	movs	r1, #9
 80052f8:	a805      	add	r0, sp, #20
		ActualReply.Value.Int32 = 0;
 80052fa:	6053      	str	r3, [r2, #4]
		USBReply[0] = HOST_ADDRESS;
 80052fc:	9306      	str	r3, [sp, #24]
		USBReply[8] = Checksum;
 80052fe:	f88d 501c 	strb.w	r5, [sp, #28]
		CDC_Transmit_FS(USBReply, 9);
 8005302:	f000 f895 	bl	8005430 <CDC_Transmit_FS>
 8005306:	e77d      	b.n	8005204 <tmcl_processCommand+0x10>
 8005308:	4a0b      	ldr	r2, [pc, #44]	; (8005338 <tmcl_processCommand+0x144>)
 800530a:	ab05      	add	r3, sp, #20
 800530c:	6810      	ldr	r0, [r2, #0]
 800530e:	6851      	ldr	r1, [r2, #4]
 8005310:	7a16      	ldrb	r6, [r2, #8]
 8005312:	461a      	mov	r2, r3
 8005314:	c203      	stmia	r2!, {r0, r1}
 8005316:	7016      	strb	r6, [r2, #0]
 8005318:	e792      	b.n	8005240 <tmcl_processCommand+0x4c>
					TMCLCommandState = TCS_USB_ERROR;  // checksum was wrong
 800531a:	2308      	movs	r3, #8
 800531c:	7023      	strb	r3, [r4, #0]
	if (TMCLCommandState != TCS_IDLE && TMCLCommandState != TCS_UART_ERROR && TMCLCommandState != TCS_RS485_ERROR && TMCLCommandState != TCS_USB_ERROR)
 800531e:	e786      	b.n	800522e <tmcl_processCommand+0x3a>
 8005320:	20000209 	.word	0x20000209
 8005324:	20000440 	.word	0x20000440
 8005328:	2000020c 	.word	0x2000020c
 800532c:	20000438 	.word	0x20000438
 8005330:	20000450 	.word	0x20000450
 8005334:	00010102 	.word	0x00010102
 8005338:	20000444 	.word	0x20000444

0800533c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800533c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800533e:	4918      	ldr	r1, [pc, #96]	; (80053a0 <MX_USB_Device_Init+0x64>)
 8005340:	4818      	ldr	r0, [pc, #96]	; (80053a4 <MX_USB_Device_Init+0x68>)
 8005342:	2200      	movs	r2, #0
 8005344:	f7ff f94e 	bl	80045e4 <USBD_Init>
 8005348:	b970      	cbnz	r0, 8005368 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800534a:	4917      	ldr	r1, [pc, #92]	; (80053a8 <MX_USB_Device_Init+0x6c>)
 800534c:	4815      	ldr	r0, [pc, #84]	; (80053a4 <MX_USB_Device_Init+0x68>)
 800534e:	f7ff f95d 	bl	800460c <USBD_RegisterClass>
 8005352:	b988      	cbnz	r0, 8005378 <MX_USB_Device_Init+0x3c>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8005354:	4915      	ldr	r1, [pc, #84]	; (80053ac <MX_USB_Device_Init+0x70>)
 8005356:	4813      	ldr	r0, [pc, #76]	; (80053a4 <MX_USB_Device_Init+0x68>)
 8005358:	f7ff f8f4 	bl	8004544 <USBD_CDC_RegisterInterface>
 800535c:	b9a0      	cbnz	r0, 8005388 <MX_USB_Device_Init+0x4c>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800535e:	4811      	ldr	r0, [pc, #68]	; (80053a4 <MX_USB_Device_Init+0x68>)
 8005360:	f7ff f96e 	bl	8004640 <USBD_Start>
 8005364:	b9b8      	cbnz	r0, 8005396 <MX_USB_Device_Init+0x5a>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8005366:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005368:	f7fb fbee 	bl	8000b48 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800536c:	490e      	ldr	r1, [pc, #56]	; (80053a8 <MX_USB_Device_Init+0x6c>)
 800536e:	480d      	ldr	r0, [pc, #52]	; (80053a4 <MX_USB_Device_Init+0x68>)
 8005370:	f7ff f94c 	bl	800460c <USBD_RegisterClass>
 8005374:	2800      	cmp	r0, #0
 8005376:	d0ed      	beq.n	8005354 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8005378:	f7fb fbe6 	bl	8000b48 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800537c:	490b      	ldr	r1, [pc, #44]	; (80053ac <MX_USB_Device_Init+0x70>)
 800537e:	4809      	ldr	r0, [pc, #36]	; (80053a4 <MX_USB_Device_Init+0x68>)
 8005380:	f7ff f8e0 	bl	8004544 <USBD_CDC_RegisterInterface>
 8005384:	2800      	cmp	r0, #0
 8005386:	d0ea      	beq.n	800535e <MX_USB_Device_Init+0x22>
    Error_Handler();
 8005388:	f7fb fbde 	bl	8000b48 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800538c:	4805      	ldr	r0, [pc, #20]	; (80053a4 <MX_USB_Device_Init+0x68>)
 800538e:	f7ff f957 	bl	8004640 <USBD_Start>
 8005392:	2800      	cmp	r0, #0
 8005394:	d0e7      	beq.n	8005366 <MX_USB_Device_Init+0x2a>
}
 8005396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800539a:	f7fb bbd5 	b.w	8000b48 <Error_Handler>
 800539e:	bf00      	nop
 80053a0:	20000134 	.word	0x20000134
 80053a4:	200004c0 	.word	0x200004c0
 80053a8:	2000000c 	.word	0x2000000c
 80053ac:	20000120 	.word	0x20000120

080053b0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 80053b0:	2000      	movs	r0, #0
 80053b2:	4770      	bx	lr

080053b4 <CDC_Control_FS>:
		break;
	}

	return (USBD_OK);
  /* USER CODE END 5 */
}
 80053b4:	2000      	movs	r0, #0
 80053b6:	4770      	bx	lr

080053b8 <CDC_TransmitCplt_FS>:
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80053b8:	2000      	movs	r0, #0
 80053ba:	4770      	bx	lr

080053bc <CDC_Receive_FS>:
{
 80053bc:	b530      	push	{r4, r5, lr}
	rx_cmd_buf.IsCommandDataReceived = 1;
 80053be:	4c10      	ldr	r4, [pc, #64]	; (8005400 <CDC_Receive_FS+0x44>)
 80053c0:	2301      	movs	r3, #1
 80053c2:	7223      	strb	r3, [r4, #8]
	rx_cmd_buf.CMDLens[rx_cmd_buf.pos_receive] = (*Len);
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	680a      	ldr	r2, [r1, #0]
{
 80053c8:	b083      	sub	sp, #12
 80053ca:	4601      	mov	r1, r0
	rx_cmd_buf.CMDLens[rx_cmd_buf.pos_receive] = (*Len);
 80053cc:	18e5      	adds	r5, r4, r3
	memcpy(rx_cmd_buf.RxBufferFS[rx_cmd_buf.pos_receive], Buf, (*Len));
 80053ce:	eb04 20c3 	add.w	r0, r4, r3, lsl #11
	rx_cmd_buf.CMDLens[rx_cmd_buf.pos_receive] = (*Len);
 80053d2:	f245 0309 	movw	r3, #20489	; 0x5009
	memcpy(rx_cmd_buf.RxBufferFS[rx_cmd_buf.pos_receive], Buf, (*Len));
 80053d6:	3009      	adds	r0, #9
	rx_cmd_buf.CMDLens[rx_cmd_buf.pos_receive] = (*Len);
 80053d8:	54ea      	strb	r2, [r5, r3]
	memcpy(rx_cmd_buf.RxBufferFS[rx_cmd_buf.pos_receive], Buf, (*Len));
 80053da:	9101      	str	r1, [sp, #4]
 80053dc:	f000 faa6 	bl	800592c <memcpy>
	rx_cmd_buf.pos_receive++;
 80053e0:	6823      	ldr	r3, [r4, #0]
	if (rx_cmd_buf.pos_receive >= RX_CMND_BUF_LEN)
 80053e2:	9901      	ldr	r1, [sp, #4]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80053e4:	4807      	ldr	r0, [pc, #28]	; (8005404 <CDC_Receive_FS+0x48>)
	rx_cmd_buf.pos_receive++;
 80053e6:	3301      	adds	r3, #1
	if (rx_cmd_buf.pos_receive >= RX_CMND_BUF_LEN)
 80053e8:	2b09      	cmp	r3, #9
		rx_cmd_buf.pos_receive = 0;
 80053ea:	bfc8      	it	gt
 80053ec:	2300      	movgt	r3, #0
 80053ee:	6023      	str	r3, [r4, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80053f0:	f7ff f8bc 	bl	800456c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80053f4:	4803      	ldr	r0, [pc, #12]	; (8005404 <CDC_Receive_FS+0x48>)
 80053f6:	f7ff f8db 	bl	80045b0 <USBD_CDC_ReceivePacket>
}
 80053fa:	2000      	movs	r0, #0
 80053fc:	b003      	add	sp, #12
 80053fe:	bd30      	pop	{r4, r5, pc}
 8005400:	20001790 	.word	0x20001790
 8005404:	200004c0 	.word	0x200004c0

08005408 <CDC_Init_FS>:
{
 8005408:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800540a:	4c06      	ldr	r4, [pc, #24]	; (8005424 <CDC_Init_FS+0x1c>)
 800540c:	4906      	ldr	r1, [pc, #24]	; (8005428 <CDC_Init_FS+0x20>)
 800540e:	2200      	movs	r2, #0
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff f89f 	bl	8004554 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005416:	4905      	ldr	r1, [pc, #20]	; (800542c <CDC_Init_FS+0x24>)
 8005418:	4620      	mov	r0, r4
 800541a:	f7ff f8a7 	bl	800456c <USBD_CDC_SetRxBuffer>
}
 800541e:	2000      	movs	r0, #0
 8005420:	bd10      	pop	{r4, pc}
 8005422:	bf00      	nop
 8005424:	200004c0 	.word	0x200004c0
 8005428:	20000f90 	.word	0x20000f90
 800542c:	20000790 	.word	0x20000790

08005430 <CDC_Transmit_FS>:
{
 8005430:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8005432:	4c09      	ldr	r4, [pc, #36]	; (8005458 <CDC_Transmit_FS+0x28>)
 8005434:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
	if (hcdc->TxState != 0)
 8005438:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800543c:	b10b      	cbz	r3, 8005442 <CDC_Transmit_FS+0x12>
}
 800543e:	2001      	movs	r0, #1
 8005440:	bd10      	pop	{r4, pc}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005442:	460a      	mov	r2, r1
 8005444:	4601      	mov	r1, r0
 8005446:	4620      	mov	r0, r4
 8005448:	f7ff f884 	bl	8004554 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800544c:	4620      	mov	r0, r4
}
 800544e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005452:	f7ff b895 	b.w	8004580 <USBD_CDC_TransmitPacket>
 8005456:	bf00      	nop
 8005458:	200004c0 	.word	0x200004c0

0800545c <USB_retrieveCMD>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t USB_retrieveCMD(uint8_t *Buf, uint32_t *Len)
{
 800545c:	b538      	push	{r3, r4, r5, lr}
	if (rx_cmd_buf.IsCommandDataReceived == 0)
 800545e:	4c0e      	ldr	r4, [pc, #56]	; (8005498 <USB_retrieveCMD+0x3c>)
 8005460:	7a23      	ldrb	r3, [r4, #8]
 8005462:	b1bb      	cbz	r3, 8005494 <USB_retrieveCMD+0x38>
	{
		return 0;
	}

	int index = rx_cmd_buf.pos_process;
 8005464:	6863      	ldr	r3, [r4, #4]
	*Len = rx_cmd_buf.CMDLens[index];
 8005466:	f245 0209 	movw	r2, #20489	; 0x5009
 800546a:	18e5      	adds	r5, r4, r3

	memcpy(Buf, rx_cmd_buf.RxBufferFS[index], (*Len));
 800546c:	eb04 23c3 	add.w	r3, r4, r3, lsl #11
	*Len = rx_cmd_buf.CMDLens[index];
 8005470:	5caa      	ldrb	r2, [r5, r2]
 8005472:	600a      	str	r2, [r1, #0]
	memcpy(Buf, rx_cmd_buf.RxBufferFS[index], (*Len));
 8005474:	f103 0109 	add.w	r1, r3, #9
 8005478:	f000 fa58 	bl	800592c <memcpy>
	//testing only. make sure there is ending char in the returned command string
	//check if all data were processed.
	rx_cmd_buf.pos_process++;
 800547c:	6863      	ldr	r3, [r4, #4]
	if (rx_cmd_buf.pos_process >= RX_CMND_BUF_LEN)
	{
		rx_cmd_buf.pos_process = 0;
	}

	if (rx_cmd_buf.pos_process == rx_cmd_buf.pos_receive)
 800547e:	6822      	ldr	r2, [r4, #0]
	rx_cmd_buf.pos_process++;
 8005480:	3301      	adds	r3, #1
	if (rx_cmd_buf.pos_process >= RX_CMND_BUF_LEN)
 8005482:	2b09      	cmp	r3, #9
		rx_cmd_buf.pos_process = 0;
 8005484:	bfc8      	it	gt
 8005486:	2300      	movgt	r3, #0
	if (rx_cmd_buf.pos_process == rx_cmd_buf.pos_receive)
 8005488:	429a      	cmp	r2, r3
		rx_cmd_buf.pos_process = 0;
 800548a:	6063      	str	r3, [r4, #4]
	{
		rx_cmd_buf.IsCommandDataReceived = 0;
 800548c:	bf04      	itt	eq
 800548e:	2300      	moveq	r3, #0
 8005490:	7223      	strbeq	r3, [r4, #8]
	}

	//check if all data were processed
	return 1;
 8005492:	2301      	movs	r3, #1

}
 8005494:	4618      	mov	r0, r3
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20001790 	.word	0x20001790

0800549c <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800549c:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 800549e:	4801      	ldr	r0, [pc, #4]	; (80054a4 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 80054a0:	800b      	strh	r3, [r1, #0]
}
 80054a2:	4770      	bx	lr
 80054a4:	20000150 	.word	0x20000150

080054a8 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80054a8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80054aa:	4801      	ldr	r0, [pc, #4]	; (80054b0 <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80054ac:	800b      	strh	r3, [r1, #0]
}
 80054ae:	4770      	bx	lr
 80054b0:	20000164 	.word	0x20000164

080054b4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054b4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80054b6:	4c04      	ldr	r4, [pc, #16]	; (80054c8 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 80054b8:	4804      	ldr	r0, [pc, #16]	; (80054cc <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 80054ba:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80054bc:	4621      	mov	r1, r4
 80054be:	f7ff fc71 	bl	8004da4 <USBD_GetString>
  return USBD_StrDesc;
}
 80054c2:	4620      	mov	r0, r4
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	bf00      	nop
 80054c8:	200067a4 	.word	0x200067a4
 80054cc:	08006844 	.word	0x08006844

080054d0 <USBD_CDC_ProductStrDescriptor>:
{
 80054d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80054d2:	4c04      	ldr	r4, [pc, #16]	; (80054e4 <USBD_CDC_ProductStrDescriptor+0x14>)
 80054d4:	4804      	ldr	r0, [pc, #16]	; (80054e8 <USBD_CDC_ProductStrDescriptor+0x18>)
{
 80054d6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80054d8:	4621      	mov	r1, r4
 80054da:	f7ff fc63 	bl	8004da4 <USBD_GetString>
}
 80054de:	4620      	mov	r0, r4
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	bf00      	nop
 80054e4:	200067a4 	.word	0x200067a4
 80054e8:	0800684c 	.word	0x0800684c

080054ec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054ec:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80054ee:	4c04      	ldr	r4, [pc, #16]	; (8005500 <USBD_CDC_ConfigStrDescriptor+0x14>)
 80054f0:	4804      	ldr	r0, [pc, #16]	; (8005504 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 80054f2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80054f4:	4621      	mov	r1, r4
 80054f6:	f7ff fc55 	bl	8004da4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80054fa:	4620      	mov	r0, r4
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	bf00      	nop
 8005500:	200067a4 	.word	0x200067a4
 8005504:	08006858 	.word	0x08006858

08005508 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005508:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800550a:	4c04      	ldr	r4, [pc, #16]	; (800551c <USBD_CDC_InterfaceStrDescriptor+0x14>)
 800550c:	4804      	ldr	r0, [pc, #16]	; (8005520 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 800550e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005510:	4621      	mov	r1, r4
 8005512:	f7ff fc47 	bl	8004da4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005516:	4620      	mov	r0, r4
 8005518:	bd10      	pop	{r4, pc}
 800551a:	bf00      	nop
 800551c:	200067a4 	.word	0x200067a4
 8005520:	08006864 	.word	0x08006864

08005524 <USBD_CDC_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005524:	4a41      	ldr	r2, [pc, #260]	; (800562c <USBD_CDC_SerialStrDescriptor+0x108>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005526:	4b42      	ldr	r3, [pc, #264]	; (8005630 <USBD_CDC_SerialStrDescriptor+0x10c>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005528:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 800552a:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800552c:	201a      	movs	r0, #26

  if (deviceserial0 != 0)
 800552e:	18d3      	adds	r3, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 8005530:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 8005532:	d101      	bne.n	8005538 <USBD_CDC_SerialStrDescriptor+0x14>
}
 8005534:	483f      	ldr	r0, [pc, #252]	; (8005634 <USBD_CDC_SerialStrDescriptor+0x110>)
 8005536:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005538:	4a3f      	ldr	r2, [pc, #252]	; (8005638 <USBD_CDC_SerialStrDescriptor+0x114>)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800553a:	0f18      	lsrs	r0, r3, #28
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800553c:	6811      	ldr	r1, [r2, #0]
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800553e:	4a3d      	ldr	r2, [pc, #244]	; (8005634 <USBD_CDC_SerialStrDescriptor+0x110>)
    if (((value >> 28)) < 0xA)
 8005540:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005544:	bf2c      	ite	cs
 8005546:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005548:	3030      	addcc	r0, #48	; 0x30
{
 800554a:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + '0';
 800554c:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800554e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005552:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005554:	bf8c      	ite	hi
 8005556:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005558:	3030      	addls	r0, #48	; 0x30
 800555a:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800555c:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8005560:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005562:	bf8c      	ite	hi
 8005564:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005566:	3030      	addls	r0, #48	; 0x30
 8005568:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800556a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800556e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005570:	bf8c      	ite	hi
 8005572:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005574:	3030      	addls	r0, #48	; 0x30
 8005576:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8005578:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800557c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800557e:	bf8c      	ite	hi
 8005580:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005582:	3030      	addls	r0, #48	; 0x30
 8005584:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8005586:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800558a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800558c:	bf8c      	ite	hi
 800558e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005590:	3030      	addls	r0, #48	; 0x30
 8005592:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8005594:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8005598:	2809      	cmp	r0, #9
 800559a:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800559e:	bf8c      	ite	hi
 80055a0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80055a2:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 80055a4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80055a6:	bf94      	ite	ls
 80055a8:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80055aa:	3337      	addhi	r3, #55	; 0x37
 80055ac:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80055ae:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 80055b0:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 80055b4:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 80055b6:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80055ba:	bf2c      	ite	cs
 80055bc:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80055be:	3330      	addcc	r3, #48	; 0x30
 80055c0:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 80055c2:	f3c1 6303 	ubfx	r3, r1, #24, #4
 80055c6:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80055c8:	bf8c      	ite	hi
 80055ca:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80055cc:	3330      	addls	r3, #48	; 0x30
 80055ce:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 80055d0:	f3c1 5303 	ubfx	r3, r1, #20, #4
 80055d4:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80055d6:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80055da:	bf8c      	ite	hi
 80055dc:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80055de:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80055e0:	70d4      	strb	r4, [r2, #3]
 80055e2:	2400      	movs	r4, #0
 80055e4:	7154      	strb	r4, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 80055e6:	7593      	strb	r3, [r2, #22]
    pbuf[2 * idx + 1] = 0;
 80055e8:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80055ea:	f3c1 4303 	ubfx	r3, r1, #16, #4
 80055ee:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80055f0:	71d4      	strb	r4, [r2, #7]
      pbuf[2 * idx] = (value >> 28) + '0';
 80055f2:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 80055f4:	f04f 0400 	mov.w	r4, #0
 80055f8:	f04f 0000 	mov.w	r0, #0
 80055fc:	7254      	strb	r4, [r2, #9]
 80055fe:	73d0      	strb	r0, [r2, #15]
 8005600:	f04f 0400 	mov.w	r4, #0
 8005604:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8005608:	bf94      	ite	ls
 800560a:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800560c:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800560e:	72d4      	strb	r4, [r2, #11]
 8005610:	74d0      	strb	r0, [r2, #19]
 8005612:	2400      	movs	r4, #0
 8005614:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005616:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8005618:	2100      	movs	r1, #0
 800561a:	2300      	movs	r3, #0
 800561c:	7550      	strb	r0, [r2, #21]
 800561e:	7354      	strb	r4, [r2, #13]
 8005620:	75d1      	strb	r1, [r2, #23]
 8005622:	7653      	strb	r3, [r2, #25]
}
 8005624:	4803      	ldr	r0, [pc, #12]	; (8005634 <USBD_CDC_SerialStrDescriptor+0x110>)
 8005626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	1fff7590 	.word	0x1fff7590
 8005630:	1fff7598 	.word	0x1fff7598
 8005634:	20000168 	.word	0x20000168
 8005638:	1fff7594 	.word	0x1fff7594

0800563c <HAL_PCD_MspInit>:
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
  if(pcdHandle->Instance==USB)
 800563c:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <HAL_PCD_MspInit+0x3c>)
 800563e:	6802      	ldr	r2, [r0, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d000      	beq.n	8005646 <HAL_PCD_MspInit+0xa>
 8005644:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005646:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 800564a:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800564c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800564e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005652:	659a      	str	r2, [r3, #88]	; 0x58
 8005654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8005656:	b083      	sub	sp, #12

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005658:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800565a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800565e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005660:	4611      	mov	r1, r2
 8005662:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8005664:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005666:	f7fb fbe5 	bl	8000e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800566a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800566c:	b003      	add	sp, #12
 800566e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8005672:	f7fb bc17 	b.w	8000ea4 <HAL_NVIC_EnableIRQ>
 8005676:	bf00      	nop
 8005678:	40005c00 	.word	0x40005c00

0800567c <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800567c:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8005680:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8005684:	f7fe bfee 	b.w	8004664 <USBD_LL_SetupStage>

08005688 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005688:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800568c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005690:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8005694:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005698:	f7ff b814 	b.w	80046c4 <USBD_LL_DataOutStage>

0800569c <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800569c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80056a0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80056a4:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80056a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056aa:	f7ff b83f 	b.w	800472c <USBD_LL_DataInStage>
 80056ae:	bf00      	nop

080056b0 <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80056b0:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80056b4:	f7ff b8d8 	b.w	8004868 <USBD_LL_SOF>

080056b8 <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80056b8:	6883      	ldr	r3, [r0, #8]
 80056ba:	2b02      	cmp	r3, #2
{
 80056bc:	b510      	push	{r4, lr}
 80056be:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80056c0:	d001      	beq.n	80056c6 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80056c2:	f7fb fa41 	bl	8000b48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80056c6:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 80056ca:	2101      	movs	r1, #1
 80056cc:	f7ff f8b0 	bl	8004830 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80056d0:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80056d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80056d8:	f7ff b87e 	b.w	80047d8 <USBD_LL_Reset>

080056dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056dc:	b510      	push	{r4, lr}
 80056de:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80056e0:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80056e4:	f7ff f8a8 	bl	8004838 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80056e8:	69a3      	ldr	r3, [r4, #24]
 80056ea:	b123      	cbz	r3, 80056f6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80056ec:	4a02      	ldr	r2, [pc, #8]	; (80056f8 <HAL_PCD_SuspendCallback+0x1c>)
 80056ee:	6913      	ldr	r3, [r2, #16]
 80056f0:	f043 0306 	orr.w	r3, r3, #6
 80056f4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80056f6:	bd10      	pop	{r4, pc}
 80056f8:	e000ed00 	.word	0xe000ed00

080056fc <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80056fc:	6983      	ldr	r3, [r0, #24]
{
 80056fe:	b510      	push	{r4, lr}
 8005700:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8005702:	b92b      	cbnz	r3, 8005710 <HAL_PCD_ResumeCallback+0x14>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005704:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8005708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800570c:	f7ff b8a0 	b.w	8004850 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005710:	4a06      	ldr	r2, [pc, #24]	; (800572c <HAL_PCD_ResumeCallback+0x30>)
 8005712:	6913      	ldr	r3, [r2, #16]
 8005714:	f023 0306 	bic.w	r3, r3, #6
 8005718:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 800571a:	f7fb f94f 	bl	80009bc <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800571e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 8005722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005726:	f7ff b893 	b.w	8004850 <USBD_LL_Resume>
 800572a:	bf00      	nop
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <USBD_LL_Init>:
{
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005734:	481e      	ldr	r0, [pc, #120]	; (80057b0 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Instance = USB;
 8005736:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 8005738:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800573c:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800573e:	2508      	movs	r5, #8
  hpcd_USB_FS.Instance = USB;
 8005740:	6002      	str	r2, [r0, #0]
  pdev->pData = &hpcd_USB_FS;
 8005742:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8005746:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005748:	e9c0 5101 	strd	r5, r1, [r0, #4]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800574c:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005750:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005754:	6202      	str	r2, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005756:	f7fb fccd 	bl	80010f4 <HAL_PCD_Init>
 800575a:	bb30      	cbnz	r0, 80057aa <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800575c:	2200      	movs	r2, #0
 800575e:	4611      	mov	r1, r2
 8005760:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8005764:	2318      	movs	r3, #24
 8005766:	f7fc fc1d 	bl	8001fa4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800576a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800576e:	2358      	movs	r3, #88	; 0x58
 8005770:	2200      	movs	r2, #0
 8005772:	2180      	movs	r1, #128	; 0x80
 8005774:	f7fc fc16 	bl	8001fa4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005778:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800577c:	23c0      	movs	r3, #192	; 0xc0
 800577e:	2200      	movs	r2, #0
 8005780:	2181      	movs	r1, #129	; 0x81
 8005782:	f7fc fc0f 	bl	8001fa4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005786:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800578a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800578e:	2200      	movs	r2, #0
 8005790:	2101      	movs	r1, #1
 8005792:	f7fc fc07 	bl	8001fa4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005796:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800579a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800579e:	2200      	movs	r2, #0
 80057a0:	2182      	movs	r1, #130	; 0x82
 80057a2:	f7fc fbff 	bl	8001fa4 <HAL_PCDEx_PMAConfig>
}
 80057a6:	2000      	movs	r0, #0
 80057a8:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 80057aa:	f7fb f9cd 	bl	8000b48 <Error_Handler>
 80057ae:	e7d5      	b.n	800575c <USBD_LL_Init+0x2c>
 80057b0:	200069a4 	.word	0x200069a4
 80057b4:	40005c00 	.word	0x40005c00

080057b8 <USBD_LL_Start>:
{
 80057b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80057ba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80057be:	f7fb fcfb 	bl	80011b8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80057c2:	2803      	cmp	r0, #3
 80057c4:	bf96      	itet	ls
 80057c6:	4b02      	ldrls	r3, [pc, #8]	; (80057d0 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80057c8:	2003      	movhi	r0, #3
 80057ca:	5c18      	ldrbls	r0, [r3, r0]
}
 80057cc:	bd08      	pop	{r3, pc}
 80057ce:	bf00      	nop
 80057d0:	08006874 	.word	0x08006874

080057d4 <USBD_LL_OpenEP>:
{
 80057d4:	b510      	push	{r4, lr}
 80057d6:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80057d8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80057dc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80057de:	4623      	mov	r3, r4
 80057e0:	f7fc fac6 	bl	8001d70 <HAL_PCD_EP_Open>
  switch (hal_status)
 80057e4:	2803      	cmp	r0, #3
 80057e6:	bf96      	itet	ls
 80057e8:	4b01      	ldrls	r3, [pc, #4]	; (80057f0 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80057ea:	2003      	movhi	r0, #3
 80057ec:	5c18      	ldrbls	r0, [r3, r0]
}
 80057ee:	bd10      	pop	{r4, pc}
 80057f0:	08006874 	.word	0x08006874

080057f4 <USBD_LL_CloseEP>:
{
 80057f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80057f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80057fa:	f7fc faed 	bl	8001dd8 <HAL_PCD_EP_Close>
  switch (hal_status)
 80057fe:	2803      	cmp	r0, #3
 8005800:	bf96      	itet	ls
 8005802:	4b02      	ldrls	r3, [pc, #8]	; (800580c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005804:	2003      	movhi	r0, #3
 8005806:	5c18      	ldrbls	r0, [r3, r0]
}
 8005808:	bd08      	pop	{r3, pc}
 800580a:	bf00      	nop
 800580c:	08006874 	.word	0x08006874

08005810 <USBD_LL_StallEP>:
{
 8005810:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005812:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005816:	f7fc fb53 	bl	8001ec0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800581a:	2803      	cmp	r0, #3
 800581c:	bf96      	itet	ls
 800581e:	4b02      	ldrls	r3, [pc, #8]	; (8005828 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005820:	2003      	movhi	r0, #3
 8005822:	5c18      	ldrbls	r0, [r3, r0]
}
 8005824:	bd08      	pop	{r3, pc}
 8005826:	bf00      	nop
 8005828:	08006874 	.word	0x08006874

0800582c <USBD_LL_ClearStallEP>:
{
 800582c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800582e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005832:	f7fc fb7d 	bl	8001f30 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8005836:	2803      	cmp	r0, #3
 8005838:	bf96      	itet	ls
 800583a:	4b02      	ldrls	r3, [pc, #8]	; (8005844 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800583c:	2003      	movhi	r0, #3
 800583e:	5c18      	ldrbls	r0, [r3, r0]
}
 8005840:	bd08      	pop	{r3, pc}
 8005842:	bf00      	nop
 8005844:	08006874 	.word	0x08006874

08005848 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8005848:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800584a:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800584e:	d406      	bmi.n	800585e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005850:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005854:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005858:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800585c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800585e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005862:	3101      	adds	r1, #1
 8005864:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005868:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800586c:	7888      	ldrb	r0, [r1, #2]
 800586e:	4770      	bx	lr

08005870 <USBD_LL_SetUSBAddress>:
{
 8005870:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005872:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005876:	f7fc fa67 	bl	8001d48 <HAL_PCD_SetAddress>
  switch (hal_status)
 800587a:	2803      	cmp	r0, #3
 800587c:	bf96      	itet	ls
 800587e:	4b02      	ldrls	r3, [pc, #8]	; (8005888 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005880:	2003      	movhi	r0, #3
 8005882:	5c18      	ldrbls	r0, [r3, r0]
}
 8005884:	bd08      	pop	{r3, pc}
 8005886:	bf00      	nop
 8005888:	08006874 	.word	0x08006874

0800588c <USBD_LL_Transmit>:
{
 800588c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800588e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005892:	f7fc faf7 	bl	8001e84 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8005896:	2803      	cmp	r0, #3
 8005898:	bf96      	itet	ls
 800589a:	4b02      	ldrls	r3, [pc, #8]	; (80058a4 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800589c:	2003      	movhi	r0, #3
 800589e:	5c18      	ldrbls	r0, [r3, r0]
}
 80058a0:	bd08      	pop	{r3, pc}
 80058a2:	bf00      	nop
 80058a4:	08006874 	.word	0x08006874

080058a8 <USBD_LL_PrepareReceive>:
{
 80058a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80058aa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80058ae:	f7fc fac3 	bl	8001e38 <HAL_PCD_EP_Receive>
  switch (hal_status)
 80058b2:	2803      	cmp	r0, #3
 80058b4:	bf96      	itet	ls
 80058b6:	4b02      	ldrls	r3, [pc, #8]	; (80058c0 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80058b8:	2003      	movhi	r0, #3
 80058ba:	5c18      	ldrbls	r0, [r3, r0]
}
 80058bc:	bd08      	pop	{r3, pc}
 80058be:	bf00      	nop
 80058c0:	08006874 	.word	0x08006874

080058c4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80058c4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80058c8:	f7fc bad2 	b.w	8001e70 <HAL_PCD_EP_GetRxCount>

080058cc <USBD_static_malloc>:
}
 80058cc:	4800      	ldr	r0, [pc, #0]	; (80058d0 <USBD_static_malloc+0x4>)
 80058ce:	4770      	bx	lr
 80058d0:	20000210 	.word	0x20000210

080058d4 <USBD_static_free>:
}
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop

080058d8 <__errno>:
 80058d8:	4b01      	ldr	r3, [pc, #4]	; (80058e0 <__errno+0x8>)
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000184 	.word	0x20000184

080058e4 <__libc_init_array>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	4d0d      	ldr	r5, [pc, #52]	; (800591c <__libc_init_array+0x38>)
 80058e8:	4c0d      	ldr	r4, [pc, #52]	; (8005920 <__libc_init_array+0x3c>)
 80058ea:	1b64      	subs	r4, r4, r5
 80058ec:	10a4      	asrs	r4, r4, #2
 80058ee:	2600      	movs	r6, #0
 80058f0:	42a6      	cmp	r6, r4
 80058f2:	d109      	bne.n	8005908 <__libc_init_array+0x24>
 80058f4:	4d0b      	ldr	r5, [pc, #44]	; (8005924 <__libc_init_array+0x40>)
 80058f6:	4c0c      	ldr	r4, [pc, #48]	; (8005928 <__libc_init_array+0x44>)
 80058f8:	f000 ff84 	bl	8006804 <_init>
 80058fc:	1b64      	subs	r4, r4, r5
 80058fe:	10a4      	asrs	r4, r4, #2
 8005900:	2600      	movs	r6, #0
 8005902:	42a6      	cmp	r6, r4
 8005904:	d105      	bne.n	8005912 <__libc_init_array+0x2e>
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	f855 3b04 	ldr.w	r3, [r5], #4
 800590c:	4798      	blx	r3
 800590e:	3601      	adds	r6, #1
 8005910:	e7ee      	b.n	80058f0 <__libc_init_array+0xc>
 8005912:	f855 3b04 	ldr.w	r3, [r5], #4
 8005916:	4798      	blx	r3
 8005918:	3601      	adds	r6, #1
 800591a:	e7f2      	b.n	8005902 <__libc_init_array+0x1e>
 800591c:	08006910 	.word	0x08006910
 8005920:	08006910 	.word	0x08006910
 8005924:	08006910 	.word	0x08006910
 8005928:	08006914 	.word	0x08006914

0800592c <memcpy>:
 800592c:	440a      	add	r2, r1
 800592e:	4291      	cmp	r1, r2
 8005930:	f100 33ff 	add.w	r3, r0, #4294967295
 8005934:	d100      	bne.n	8005938 <memcpy+0xc>
 8005936:	4770      	bx	lr
 8005938:	b510      	push	{r4, lr}
 800593a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800593e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005942:	4291      	cmp	r1, r2
 8005944:	d1f9      	bne.n	800593a <memcpy+0xe>
 8005946:	bd10      	pop	{r4, pc}

08005948 <memset>:
 8005948:	4402      	add	r2, r0
 800594a:	4603      	mov	r3, r0
 800594c:	4293      	cmp	r3, r2
 800594e:	d100      	bne.n	8005952 <memset+0xa>
 8005950:	4770      	bx	lr
 8005952:	f803 1b01 	strb.w	r1, [r3], #1
 8005956:	e7f9      	b.n	800594c <memset+0x4>

08005958 <iprintf>:
 8005958:	b40f      	push	{r0, r1, r2, r3}
 800595a:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <iprintf+0x2c>)
 800595c:	b513      	push	{r0, r1, r4, lr}
 800595e:	681c      	ldr	r4, [r3, #0]
 8005960:	b124      	cbz	r4, 800596c <iprintf+0x14>
 8005962:	69a3      	ldr	r3, [r4, #24]
 8005964:	b913      	cbnz	r3, 800596c <iprintf+0x14>
 8005966:	4620      	mov	r0, r4
 8005968:	f000 f866 	bl	8005a38 <__sinit>
 800596c:	ab05      	add	r3, sp, #20
 800596e:	9a04      	ldr	r2, [sp, #16]
 8005970:	68a1      	ldr	r1, [r4, #8]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	4620      	mov	r0, r4
 8005976:	f000 f983 	bl	8005c80 <_vfiprintf_r>
 800597a:	b002      	add	sp, #8
 800597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005980:	b004      	add	sp, #16
 8005982:	4770      	bx	lr
 8005984:	20000184 	.word	0x20000184

08005988 <std>:
 8005988:	2300      	movs	r3, #0
 800598a:	b510      	push	{r4, lr}
 800598c:	4604      	mov	r4, r0
 800598e:	e9c0 3300 	strd	r3, r3, [r0]
 8005992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005996:	6083      	str	r3, [r0, #8]
 8005998:	8181      	strh	r1, [r0, #12]
 800599a:	6643      	str	r3, [r0, #100]	; 0x64
 800599c:	81c2      	strh	r2, [r0, #14]
 800599e:	6183      	str	r3, [r0, #24]
 80059a0:	4619      	mov	r1, r3
 80059a2:	2208      	movs	r2, #8
 80059a4:	305c      	adds	r0, #92	; 0x5c
 80059a6:	f7ff ffcf 	bl	8005948 <memset>
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <std+0x38>)
 80059ac:	6263      	str	r3, [r4, #36]	; 0x24
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <std+0x3c>)
 80059b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <std+0x40>)
 80059b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059b6:	4b05      	ldr	r3, [pc, #20]	; (80059cc <std+0x44>)
 80059b8:	6224      	str	r4, [r4, #32]
 80059ba:	6323      	str	r3, [r4, #48]	; 0x30
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	08006229 	.word	0x08006229
 80059c4:	0800624b 	.word	0x0800624b
 80059c8:	08006283 	.word	0x08006283
 80059cc:	080062a7 	.word	0x080062a7

080059d0 <_cleanup_r>:
 80059d0:	4901      	ldr	r1, [pc, #4]	; (80059d8 <_cleanup_r+0x8>)
 80059d2:	f000 b8af 	b.w	8005b34 <_fwalk_reent>
 80059d6:	bf00      	nop
 80059d8:	08006581 	.word	0x08006581

080059dc <__sfmoreglue>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	1e4a      	subs	r2, r1, #1
 80059e0:	2568      	movs	r5, #104	; 0x68
 80059e2:	4355      	muls	r5, r2
 80059e4:	460e      	mov	r6, r1
 80059e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059ea:	f000 f8c5 	bl	8005b78 <_malloc_r>
 80059ee:	4604      	mov	r4, r0
 80059f0:	b140      	cbz	r0, 8005a04 <__sfmoreglue+0x28>
 80059f2:	2100      	movs	r1, #0
 80059f4:	e9c0 1600 	strd	r1, r6, [r0]
 80059f8:	300c      	adds	r0, #12
 80059fa:	60a0      	str	r0, [r4, #8]
 80059fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a00:	f7ff ffa2 	bl	8005948 <memset>
 8005a04:	4620      	mov	r0, r4
 8005a06:	bd70      	pop	{r4, r5, r6, pc}

08005a08 <__sfp_lock_acquire>:
 8005a08:	4801      	ldr	r0, [pc, #4]	; (8005a10 <__sfp_lock_acquire+0x8>)
 8005a0a:	f000 b8b3 	b.w	8005b74 <__retarget_lock_acquire_recursive>
 8005a0e:	bf00      	nop
 8005a10:	20006ca0 	.word	0x20006ca0

08005a14 <__sfp_lock_release>:
 8005a14:	4801      	ldr	r0, [pc, #4]	; (8005a1c <__sfp_lock_release+0x8>)
 8005a16:	f000 b8ae 	b.w	8005b76 <__retarget_lock_release_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	20006ca0 	.word	0x20006ca0

08005a20 <__sinit_lock_acquire>:
 8005a20:	4801      	ldr	r0, [pc, #4]	; (8005a28 <__sinit_lock_acquire+0x8>)
 8005a22:	f000 b8a7 	b.w	8005b74 <__retarget_lock_acquire_recursive>
 8005a26:	bf00      	nop
 8005a28:	20006c9b 	.word	0x20006c9b

08005a2c <__sinit_lock_release>:
 8005a2c:	4801      	ldr	r0, [pc, #4]	; (8005a34 <__sinit_lock_release+0x8>)
 8005a2e:	f000 b8a2 	b.w	8005b76 <__retarget_lock_release_recursive>
 8005a32:	bf00      	nop
 8005a34:	20006c9b 	.word	0x20006c9b

08005a38 <__sinit>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	f7ff fff0 	bl	8005a20 <__sinit_lock_acquire>
 8005a40:	69a3      	ldr	r3, [r4, #24]
 8005a42:	b11b      	cbz	r3, 8005a4c <__sinit+0x14>
 8005a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a48:	f7ff bff0 	b.w	8005a2c <__sinit_lock_release>
 8005a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a50:	6523      	str	r3, [r4, #80]	; 0x50
 8005a52:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <__sinit+0x68>)
 8005a54:	4a13      	ldr	r2, [pc, #76]	; (8005aa4 <__sinit+0x6c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a5a:	42a3      	cmp	r3, r4
 8005a5c:	bf04      	itt	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	61a3      	streq	r3, [r4, #24]
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f820 	bl	8005aa8 <__sfp>
 8005a68:	6060      	str	r0, [r4, #4]
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 f81c 	bl	8005aa8 <__sfp>
 8005a70:	60a0      	str	r0, [r4, #8]
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 f818 	bl	8005aa8 <__sfp>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	60e0      	str	r0, [r4, #12]
 8005a7c:	2104      	movs	r1, #4
 8005a7e:	6860      	ldr	r0, [r4, #4]
 8005a80:	f7ff ff82 	bl	8005988 <std>
 8005a84:	68a0      	ldr	r0, [r4, #8]
 8005a86:	2201      	movs	r2, #1
 8005a88:	2109      	movs	r1, #9
 8005a8a:	f7ff ff7d 	bl	8005988 <std>
 8005a8e:	68e0      	ldr	r0, [r4, #12]
 8005a90:	2202      	movs	r2, #2
 8005a92:	2112      	movs	r1, #18
 8005a94:	f7ff ff78 	bl	8005988 <std>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	61a3      	str	r3, [r4, #24]
 8005a9c:	e7d2      	b.n	8005a44 <__sinit+0xc>
 8005a9e:	bf00      	nop
 8005aa0:	08006878 	.word	0x08006878
 8005aa4:	080059d1 	.word	0x080059d1

08005aa8 <__sfp>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	4607      	mov	r7, r0
 8005aac:	f7ff ffac 	bl	8005a08 <__sfp_lock_acquire>
 8005ab0:	4b1e      	ldr	r3, [pc, #120]	; (8005b2c <__sfp+0x84>)
 8005ab2:	681e      	ldr	r6, [r3, #0]
 8005ab4:	69b3      	ldr	r3, [r6, #24]
 8005ab6:	b913      	cbnz	r3, 8005abe <__sfp+0x16>
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f7ff ffbd 	bl	8005a38 <__sinit>
 8005abe:	3648      	adds	r6, #72	; 0x48
 8005ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	d503      	bpl.n	8005ad0 <__sfp+0x28>
 8005ac8:	6833      	ldr	r3, [r6, #0]
 8005aca:	b30b      	cbz	r3, 8005b10 <__sfp+0x68>
 8005acc:	6836      	ldr	r6, [r6, #0]
 8005ace:	e7f7      	b.n	8005ac0 <__sfp+0x18>
 8005ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ad4:	b9d5      	cbnz	r5, 8005b0c <__sfp+0x64>
 8005ad6:	4b16      	ldr	r3, [pc, #88]	; (8005b30 <__sfp+0x88>)
 8005ad8:	60e3      	str	r3, [r4, #12]
 8005ada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ade:	6665      	str	r5, [r4, #100]	; 0x64
 8005ae0:	f000 f847 	bl	8005b72 <__retarget_lock_init_recursive>
 8005ae4:	f7ff ff96 	bl	8005a14 <__sfp_lock_release>
 8005ae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005aec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005af0:	6025      	str	r5, [r4, #0]
 8005af2:	61a5      	str	r5, [r4, #24]
 8005af4:	2208      	movs	r2, #8
 8005af6:	4629      	mov	r1, r5
 8005af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005afc:	f7ff ff24 	bl	8005948 <memset>
 8005b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b08:	4620      	mov	r0, r4
 8005b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b0c:	3468      	adds	r4, #104	; 0x68
 8005b0e:	e7d9      	b.n	8005ac4 <__sfp+0x1c>
 8005b10:	2104      	movs	r1, #4
 8005b12:	4638      	mov	r0, r7
 8005b14:	f7ff ff62 	bl	80059dc <__sfmoreglue>
 8005b18:	4604      	mov	r4, r0
 8005b1a:	6030      	str	r0, [r6, #0]
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1d5      	bne.n	8005acc <__sfp+0x24>
 8005b20:	f7ff ff78 	bl	8005a14 <__sfp_lock_release>
 8005b24:	230c      	movs	r3, #12
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	e7ee      	b.n	8005b08 <__sfp+0x60>
 8005b2a:	bf00      	nop
 8005b2c:	08006878 	.word	0x08006878
 8005b30:	ffff0001 	.word	0xffff0001

08005b34 <_fwalk_reent>:
 8005b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b38:	4606      	mov	r6, r0
 8005b3a:	4688      	mov	r8, r1
 8005b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b40:	2700      	movs	r7, #0
 8005b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b46:	f1b9 0901 	subs.w	r9, r9, #1
 8005b4a:	d505      	bpl.n	8005b58 <_fwalk_reent+0x24>
 8005b4c:	6824      	ldr	r4, [r4, #0]
 8005b4e:	2c00      	cmp	r4, #0
 8005b50:	d1f7      	bne.n	8005b42 <_fwalk_reent+0xe>
 8005b52:	4638      	mov	r0, r7
 8005b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b58:	89ab      	ldrh	r3, [r5, #12]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d907      	bls.n	8005b6e <_fwalk_reent+0x3a>
 8005b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b62:	3301      	adds	r3, #1
 8005b64:	d003      	beq.n	8005b6e <_fwalk_reent+0x3a>
 8005b66:	4629      	mov	r1, r5
 8005b68:	4630      	mov	r0, r6
 8005b6a:	47c0      	blx	r8
 8005b6c:	4307      	orrs	r7, r0
 8005b6e:	3568      	adds	r5, #104	; 0x68
 8005b70:	e7e9      	b.n	8005b46 <_fwalk_reent+0x12>

08005b72 <__retarget_lock_init_recursive>:
 8005b72:	4770      	bx	lr

08005b74 <__retarget_lock_acquire_recursive>:
 8005b74:	4770      	bx	lr

08005b76 <__retarget_lock_release_recursive>:
 8005b76:	4770      	bx	lr

08005b78 <_malloc_r>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	1ccd      	adds	r5, r1, #3
 8005b7c:	f025 0503 	bic.w	r5, r5, #3
 8005b80:	3508      	adds	r5, #8
 8005b82:	2d0c      	cmp	r5, #12
 8005b84:	bf38      	it	cc
 8005b86:	250c      	movcc	r5, #12
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	db01      	blt.n	8005b92 <_malloc_r+0x1a>
 8005b8e:	42a9      	cmp	r1, r5
 8005b90:	d903      	bls.n	8005b9a <_malloc_r+0x22>
 8005b92:	230c      	movs	r3, #12
 8005b94:	6033      	str	r3, [r6, #0]
 8005b96:	2000      	movs	r0, #0
 8005b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b9a:	f000 fda3 	bl	80066e4 <__malloc_lock>
 8005b9e:	4921      	ldr	r1, [pc, #132]	; (8005c24 <_malloc_r+0xac>)
 8005ba0:	680a      	ldr	r2, [r1, #0]
 8005ba2:	4614      	mov	r4, r2
 8005ba4:	b99c      	cbnz	r4, 8005bce <_malloc_r+0x56>
 8005ba6:	4f20      	ldr	r7, [pc, #128]	; (8005c28 <_malloc_r+0xb0>)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	b923      	cbnz	r3, 8005bb6 <_malloc_r+0x3e>
 8005bac:	4621      	mov	r1, r4
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f000 fb2a 	bl	8006208 <_sbrk_r>
 8005bb4:	6038      	str	r0, [r7, #0]
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f000 fb25 	bl	8006208 <_sbrk_r>
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	d123      	bne.n	8005c0a <_malloc_r+0x92>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	6033      	str	r3, [r6, #0]
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f000 fd92 	bl	80066f0 <__malloc_unlock>
 8005bcc:	e7e3      	b.n	8005b96 <_malloc_r+0x1e>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	1b5b      	subs	r3, r3, r5
 8005bd2:	d417      	bmi.n	8005c04 <_malloc_r+0x8c>
 8005bd4:	2b0b      	cmp	r3, #11
 8005bd6:	d903      	bls.n	8005be0 <_malloc_r+0x68>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	441c      	add	r4, r3
 8005bdc:	6025      	str	r5, [r4, #0]
 8005bde:	e004      	b.n	8005bea <_malloc_r+0x72>
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	42a2      	cmp	r2, r4
 8005be4:	bf0c      	ite	eq
 8005be6:	600b      	streq	r3, [r1, #0]
 8005be8:	6053      	strne	r3, [r2, #4]
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 fd80 	bl	80066f0 <__malloc_unlock>
 8005bf0:	f104 000b 	add.w	r0, r4, #11
 8005bf4:	1d23      	adds	r3, r4, #4
 8005bf6:	f020 0007 	bic.w	r0, r0, #7
 8005bfa:	1ac2      	subs	r2, r0, r3
 8005bfc:	d0cc      	beq.n	8005b98 <_malloc_r+0x20>
 8005bfe:	1a1b      	subs	r3, r3, r0
 8005c00:	50a3      	str	r3, [r4, r2]
 8005c02:	e7c9      	b.n	8005b98 <_malloc_r+0x20>
 8005c04:	4622      	mov	r2, r4
 8005c06:	6864      	ldr	r4, [r4, #4]
 8005c08:	e7cc      	b.n	8005ba4 <_malloc_r+0x2c>
 8005c0a:	1cc4      	adds	r4, r0, #3
 8005c0c:	f024 0403 	bic.w	r4, r4, #3
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d0e3      	beq.n	8005bdc <_malloc_r+0x64>
 8005c14:	1a21      	subs	r1, r4, r0
 8005c16:	4630      	mov	r0, r6
 8005c18:	f000 faf6 	bl	8006208 <_sbrk_r>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d1dd      	bne.n	8005bdc <_malloc_r+0x64>
 8005c20:	e7cf      	b.n	8005bc2 <_malloc_r+0x4a>
 8005c22:	bf00      	nop
 8005c24:	20000430 	.word	0x20000430
 8005c28:	20000434 	.word	0x20000434

08005c2c <__sfputc_r>:
 8005c2c:	6893      	ldr	r3, [r2, #8]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	b410      	push	{r4}
 8005c34:	6093      	str	r3, [r2, #8]
 8005c36:	da08      	bge.n	8005c4a <__sfputc_r+0x1e>
 8005c38:	6994      	ldr	r4, [r2, #24]
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	db01      	blt.n	8005c42 <__sfputc_r+0x16>
 8005c3e:	290a      	cmp	r1, #10
 8005c40:	d103      	bne.n	8005c4a <__sfputc_r+0x1e>
 8005c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c46:	f000 bb33 	b.w	80062b0 <__swbuf_r>
 8005c4a:	6813      	ldr	r3, [r2, #0]
 8005c4c:	1c58      	adds	r0, r3, #1
 8005c4e:	6010      	str	r0, [r2, #0]
 8005c50:	7019      	strb	r1, [r3, #0]
 8005c52:	4608      	mov	r0, r1
 8005c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <__sfputs_r>:
 8005c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	460f      	mov	r7, r1
 8005c60:	4614      	mov	r4, r2
 8005c62:	18d5      	adds	r5, r2, r3
 8005c64:	42ac      	cmp	r4, r5
 8005c66:	d101      	bne.n	8005c6c <__sfputs_r+0x12>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	e007      	b.n	8005c7c <__sfputs_r+0x22>
 8005c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c70:	463a      	mov	r2, r7
 8005c72:	4630      	mov	r0, r6
 8005c74:	f7ff ffda 	bl	8005c2c <__sfputc_r>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d1f3      	bne.n	8005c64 <__sfputs_r+0xa>
 8005c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c80 <_vfiprintf_r>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	460d      	mov	r5, r1
 8005c86:	b09d      	sub	sp, #116	; 0x74
 8005c88:	4614      	mov	r4, r2
 8005c8a:	4698      	mov	r8, r3
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	b118      	cbz	r0, 8005c98 <_vfiprintf_r+0x18>
 8005c90:	6983      	ldr	r3, [r0, #24]
 8005c92:	b90b      	cbnz	r3, 8005c98 <_vfiprintf_r+0x18>
 8005c94:	f7ff fed0 	bl	8005a38 <__sinit>
 8005c98:	4b89      	ldr	r3, [pc, #548]	; (8005ec0 <_vfiprintf_r+0x240>)
 8005c9a:	429d      	cmp	r5, r3
 8005c9c:	d11b      	bne.n	8005cd6 <_vfiprintf_r+0x56>
 8005c9e:	6875      	ldr	r5, [r6, #4]
 8005ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca2:	07d9      	lsls	r1, r3, #31
 8005ca4:	d405      	bmi.n	8005cb2 <_vfiprintf_r+0x32>
 8005ca6:	89ab      	ldrh	r3, [r5, #12]
 8005ca8:	059a      	lsls	r2, r3, #22
 8005caa:	d402      	bmi.n	8005cb2 <_vfiprintf_r+0x32>
 8005cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cae:	f7ff ff61 	bl	8005b74 <__retarget_lock_acquire_recursive>
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	071b      	lsls	r3, r3, #28
 8005cb6:	d501      	bpl.n	8005cbc <_vfiprintf_r+0x3c>
 8005cb8:	692b      	ldr	r3, [r5, #16]
 8005cba:	b9eb      	cbnz	r3, 8005cf8 <_vfiprintf_r+0x78>
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f000 fb5a 	bl	8006378 <__swsetup_r>
 8005cc4:	b1c0      	cbz	r0, 8005cf8 <_vfiprintf_r+0x78>
 8005cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cc8:	07dc      	lsls	r4, r3, #31
 8005cca:	d50e      	bpl.n	8005cea <_vfiprintf_r+0x6a>
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	b01d      	add	sp, #116	; 0x74
 8005cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd6:	4b7b      	ldr	r3, [pc, #492]	; (8005ec4 <_vfiprintf_r+0x244>)
 8005cd8:	429d      	cmp	r5, r3
 8005cda:	d101      	bne.n	8005ce0 <_vfiprintf_r+0x60>
 8005cdc:	68b5      	ldr	r5, [r6, #8]
 8005cde:	e7df      	b.n	8005ca0 <_vfiprintf_r+0x20>
 8005ce0:	4b79      	ldr	r3, [pc, #484]	; (8005ec8 <_vfiprintf_r+0x248>)
 8005ce2:	429d      	cmp	r5, r3
 8005ce4:	bf08      	it	eq
 8005ce6:	68f5      	ldreq	r5, [r6, #12]
 8005ce8:	e7da      	b.n	8005ca0 <_vfiprintf_r+0x20>
 8005cea:	89ab      	ldrh	r3, [r5, #12]
 8005cec:	0598      	lsls	r0, r3, #22
 8005cee:	d4ed      	bmi.n	8005ccc <_vfiprintf_r+0x4c>
 8005cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cf2:	f7ff ff40 	bl	8005b76 <__retarget_lock_release_recursive>
 8005cf6:	e7e9      	b.n	8005ccc <_vfiprintf_r+0x4c>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d06:	2330      	movs	r3, #48	; 0x30
 8005d08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ecc <_vfiprintf_r+0x24c>
 8005d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d10:	f04f 0901 	mov.w	r9, #1
 8005d14:	4623      	mov	r3, r4
 8005d16:	469a      	mov	sl, r3
 8005d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d1c:	b10a      	cbz	r2, 8005d22 <_vfiprintf_r+0xa2>
 8005d1e:	2a25      	cmp	r2, #37	; 0x25
 8005d20:	d1f9      	bne.n	8005d16 <_vfiprintf_r+0x96>
 8005d22:	ebba 0b04 	subs.w	fp, sl, r4
 8005d26:	d00b      	beq.n	8005d40 <_vfiprintf_r+0xc0>
 8005d28:	465b      	mov	r3, fp
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7ff ff93 	bl	8005c5a <__sfputs_r>
 8005d34:	3001      	adds	r0, #1
 8005d36:	f000 80aa 	beq.w	8005e8e <_vfiprintf_r+0x20e>
 8005d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d3c:	445a      	add	r2, fp
 8005d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d40:	f89a 3000 	ldrb.w	r3, [sl]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80a2 	beq.w	8005e8e <_vfiprintf_r+0x20e>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d54:	f10a 0a01 	add.w	sl, sl, #1
 8005d58:	9304      	str	r3, [sp, #16]
 8005d5a:	9307      	str	r3, [sp, #28]
 8005d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d60:	931a      	str	r3, [sp, #104]	; 0x68
 8005d62:	4654      	mov	r4, sl
 8005d64:	2205      	movs	r2, #5
 8005d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d6a:	4858      	ldr	r0, [pc, #352]	; (8005ecc <_vfiprintf_r+0x24c>)
 8005d6c:	f7fa fa58 	bl	8000220 <memchr>
 8005d70:	9a04      	ldr	r2, [sp, #16]
 8005d72:	b9d8      	cbnz	r0, 8005dac <_vfiprintf_r+0x12c>
 8005d74:	06d1      	lsls	r1, r2, #27
 8005d76:	bf44      	itt	mi
 8005d78:	2320      	movmi	r3, #32
 8005d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d7e:	0713      	lsls	r3, r2, #28
 8005d80:	bf44      	itt	mi
 8005d82:	232b      	movmi	r3, #43	; 0x2b
 8005d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d88:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d8e:	d015      	beq.n	8005dbc <_vfiprintf_r+0x13c>
 8005d90:	9a07      	ldr	r2, [sp, #28]
 8005d92:	4654      	mov	r4, sl
 8005d94:	2000      	movs	r0, #0
 8005d96:	f04f 0c0a 	mov.w	ip, #10
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da0:	3b30      	subs	r3, #48	; 0x30
 8005da2:	2b09      	cmp	r3, #9
 8005da4:	d94e      	bls.n	8005e44 <_vfiprintf_r+0x1c4>
 8005da6:	b1b0      	cbz	r0, 8005dd6 <_vfiprintf_r+0x156>
 8005da8:	9207      	str	r2, [sp, #28]
 8005daa:	e014      	b.n	8005dd6 <_vfiprintf_r+0x156>
 8005dac:	eba0 0308 	sub.w	r3, r0, r8
 8005db0:	fa09 f303 	lsl.w	r3, r9, r3
 8005db4:	4313      	orrs	r3, r2
 8005db6:	9304      	str	r3, [sp, #16]
 8005db8:	46a2      	mov	sl, r4
 8005dba:	e7d2      	b.n	8005d62 <_vfiprintf_r+0xe2>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	1d19      	adds	r1, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	9103      	str	r1, [sp, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bfbb      	ittet	lt
 8005dc8:	425b      	neglt	r3, r3
 8005dca:	f042 0202 	orrlt.w	r2, r2, #2
 8005dce:	9307      	strge	r3, [sp, #28]
 8005dd0:	9307      	strlt	r3, [sp, #28]
 8005dd2:	bfb8      	it	lt
 8005dd4:	9204      	strlt	r2, [sp, #16]
 8005dd6:	7823      	ldrb	r3, [r4, #0]
 8005dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8005dda:	d10c      	bne.n	8005df6 <_vfiprintf_r+0x176>
 8005ddc:	7863      	ldrb	r3, [r4, #1]
 8005dde:	2b2a      	cmp	r3, #42	; 0x2a
 8005de0:	d135      	bne.n	8005e4e <_vfiprintf_r+0x1ce>
 8005de2:	9b03      	ldr	r3, [sp, #12]
 8005de4:	1d1a      	adds	r2, r3, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	9203      	str	r2, [sp, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bfb8      	it	lt
 8005dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8005df2:	3402      	adds	r4, #2
 8005df4:	9305      	str	r3, [sp, #20]
 8005df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005edc <_vfiprintf_r+0x25c>
 8005dfa:	7821      	ldrb	r1, [r4, #0]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	4650      	mov	r0, sl
 8005e00:	f7fa fa0e 	bl	8000220 <memchr>
 8005e04:	b140      	cbz	r0, 8005e18 <_vfiprintf_r+0x198>
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	eba0 000a 	sub.w	r0, r0, sl
 8005e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	4303      	orrs	r3, r0
 8005e14:	3401      	adds	r4, #1
 8005e16:	9304      	str	r3, [sp, #16]
 8005e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1c:	482c      	ldr	r0, [pc, #176]	; (8005ed0 <_vfiprintf_r+0x250>)
 8005e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e22:	2206      	movs	r2, #6
 8005e24:	f7fa f9fc 	bl	8000220 <memchr>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d03f      	beq.n	8005eac <_vfiprintf_r+0x22c>
 8005e2c:	4b29      	ldr	r3, [pc, #164]	; (8005ed4 <_vfiprintf_r+0x254>)
 8005e2e:	bb1b      	cbnz	r3, 8005e78 <_vfiprintf_r+0x1f8>
 8005e30:	9b03      	ldr	r3, [sp, #12]
 8005e32:	3307      	adds	r3, #7
 8005e34:	f023 0307 	bic.w	r3, r3, #7
 8005e38:	3308      	adds	r3, #8
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3e:	443b      	add	r3, r7
 8005e40:	9309      	str	r3, [sp, #36]	; 0x24
 8005e42:	e767      	b.n	8005d14 <_vfiprintf_r+0x94>
 8005e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e48:	460c      	mov	r4, r1
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	e7a5      	b.n	8005d9a <_vfiprintf_r+0x11a>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	3401      	adds	r4, #1
 8005e52:	9305      	str	r3, [sp, #20]
 8005e54:	4619      	mov	r1, r3
 8005e56:	f04f 0c0a 	mov.w	ip, #10
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e60:	3a30      	subs	r2, #48	; 0x30
 8005e62:	2a09      	cmp	r2, #9
 8005e64:	d903      	bls.n	8005e6e <_vfiprintf_r+0x1ee>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0c5      	beq.n	8005df6 <_vfiprintf_r+0x176>
 8005e6a:	9105      	str	r1, [sp, #20]
 8005e6c:	e7c3      	b.n	8005df6 <_vfiprintf_r+0x176>
 8005e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e72:	4604      	mov	r4, r0
 8005e74:	2301      	movs	r3, #1
 8005e76:	e7f0      	b.n	8005e5a <_vfiprintf_r+0x1da>
 8005e78:	ab03      	add	r3, sp, #12
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	462a      	mov	r2, r5
 8005e7e:	4b16      	ldr	r3, [pc, #88]	; (8005ed8 <_vfiprintf_r+0x258>)
 8005e80:	a904      	add	r1, sp, #16
 8005e82:	4630      	mov	r0, r6
 8005e84:	f3af 8000 	nop.w
 8005e88:	4607      	mov	r7, r0
 8005e8a:	1c78      	adds	r0, r7, #1
 8005e8c:	d1d6      	bne.n	8005e3c <_vfiprintf_r+0x1bc>
 8005e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e90:	07d9      	lsls	r1, r3, #31
 8005e92:	d405      	bmi.n	8005ea0 <_vfiprintf_r+0x220>
 8005e94:	89ab      	ldrh	r3, [r5, #12]
 8005e96:	059a      	lsls	r2, r3, #22
 8005e98:	d402      	bmi.n	8005ea0 <_vfiprintf_r+0x220>
 8005e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e9c:	f7ff fe6b 	bl	8005b76 <__retarget_lock_release_recursive>
 8005ea0:	89ab      	ldrh	r3, [r5, #12]
 8005ea2:	065b      	lsls	r3, r3, #25
 8005ea4:	f53f af12 	bmi.w	8005ccc <_vfiprintf_r+0x4c>
 8005ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eaa:	e711      	b.n	8005cd0 <_vfiprintf_r+0x50>
 8005eac:	ab03      	add	r3, sp, #12
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	462a      	mov	r2, r5
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <_vfiprintf_r+0x258>)
 8005eb4:	a904      	add	r1, sp, #16
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f000 f880 	bl	8005fbc <_printf_i>
 8005ebc:	e7e4      	b.n	8005e88 <_vfiprintf_r+0x208>
 8005ebe:	bf00      	nop
 8005ec0:	0800689c 	.word	0x0800689c
 8005ec4:	080068bc 	.word	0x080068bc
 8005ec8:	0800687c 	.word	0x0800687c
 8005ecc:	080068dc 	.word	0x080068dc
 8005ed0:	080068e6 	.word	0x080068e6
 8005ed4:	00000000 	.word	0x00000000
 8005ed8:	08005c5b 	.word	0x08005c5b
 8005edc:	080068e2 	.word	0x080068e2

08005ee0 <_printf_common>:
 8005ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	4616      	mov	r6, r2
 8005ee6:	4699      	mov	r9, r3
 8005ee8:	688a      	ldr	r2, [r1, #8]
 8005eea:	690b      	ldr	r3, [r1, #16]
 8005eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	bfb8      	it	lt
 8005ef4:	4613      	movlt	r3, r2
 8005ef6:	6033      	str	r3, [r6, #0]
 8005ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005efc:	4607      	mov	r7, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	b10a      	cbz	r2, 8005f06 <_printf_common+0x26>
 8005f02:	3301      	adds	r3, #1
 8005f04:	6033      	str	r3, [r6, #0]
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	0699      	lsls	r1, r3, #26
 8005f0a:	bf42      	ittt	mi
 8005f0c:	6833      	ldrmi	r3, [r6, #0]
 8005f0e:	3302      	addmi	r3, #2
 8005f10:	6033      	strmi	r3, [r6, #0]
 8005f12:	6825      	ldr	r5, [r4, #0]
 8005f14:	f015 0506 	ands.w	r5, r5, #6
 8005f18:	d106      	bne.n	8005f28 <_printf_common+0x48>
 8005f1a:	f104 0a19 	add.w	sl, r4, #25
 8005f1e:	68e3      	ldr	r3, [r4, #12]
 8005f20:	6832      	ldr	r2, [r6, #0]
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	42ab      	cmp	r3, r5
 8005f26:	dc26      	bgt.n	8005f76 <_printf_common+0x96>
 8005f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f2c:	1e13      	subs	r3, r2, #0
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	bf18      	it	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	0692      	lsls	r2, r2, #26
 8005f36:	d42b      	bmi.n	8005f90 <_printf_common+0xb0>
 8005f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	4638      	mov	r0, r7
 8005f40:	47c0      	blx	r8
 8005f42:	3001      	adds	r0, #1
 8005f44:	d01e      	beq.n	8005f84 <_printf_common+0xa4>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	68e5      	ldr	r5, [r4, #12]
 8005f4a:	6832      	ldr	r2, [r6, #0]
 8005f4c:	f003 0306 	and.w	r3, r3, #6
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	bf08      	it	eq
 8005f54:	1aad      	subeq	r5, r5, r2
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	bf0c      	ite	eq
 8005f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f60:	2500      	movne	r5, #0
 8005f62:	4293      	cmp	r3, r2
 8005f64:	bfc4      	itt	gt
 8005f66:	1a9b      	subgt	r3, r3, r2
 8005f68:	18ed      	addgt	r5, r5, r3
 8005f6a:	2600      	movs	r6, #0
 8005f6c:	341a      	adds	r4, #26
 8005f6e:	42b5      	cmp	r5, r6
 8005f70:	d11a      	bne.n	8005fa8 <_printf_common+0xc8>
 8005f72:	2000      	movs	r0, #0
 8005f74:	e008      	b.n	8005f88 <_printf_common+0xa8>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4652      	mov	r2, sl
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	47c0      	blx	r8
 8005f80:	3001      	adds	r0, #1
 8005f82:	d103      	bne.n	8005f8c <_printf_common+0xac>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	e7c6      	b.n	8005f1e <_printf_common+0x3e>
 8005f90:	18e1      	adds	r1, r4, r3
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	2030      	movs	r0, #48	; 0x30
 8005f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f9a:	4422      	add	r2, r4
 8005f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	e7c7      	b.n	8005f38 <_printf_common+0x58>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4622      	mov	r2, r4
 8005fac:	4649      	mov	r1, r9
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c0      	blx	r8
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d0e6      	beq.n	8005f84 <_printf_common+0xa4>
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	e7d9      	b.n	8005f6e <_printf_common+0x8e>
	...

08005fbc <_printf_i>:
 8005fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	4691      	mov	r9, r2
 8005fc4:	7e27      	ldrb	r7, [r4, #24]
 8005fc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fc8:	2f78      	cmp	r7, #120	; 0x78
 8005fca:	4680      	mov	r8, r0
 8005fcc:	469a      	mov	sl, r3
 8005fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd2:	d807      	bhi.n	8005fe4 <_printf_i+0x28>
 8005fd4:	2f62      	cmp	r7, #98	; 0x62
 8005fd6:	d80a      	bhi.n	8005fee <_printf_i+0x32>
 8005fd8:	2f00      	cmp	r7, #0
 8005fda:	f000 80d8 	beq.w	800618e <_printf_i+0x1d2>
 8005fde:	2f58      	cmp	r7, #88	; 0x58
 8005fe0:	f000 80a3 	beq.w	800612a <_printf_i+0x16e>
 8005fe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fec:	e03a      	b.n	8006064 <_printf_i+0xa8>
 8005fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ff2:	2b15      	cmp	r3, #21
 8005ff4:	d8f6      	bhi.n	8005fe4 <_printf_i+0x28>
 8005ff6:	a001      	add	r0, pc, #4	; (adr r0, 8005ffc <_printf_i+0x40>)
 8005ff8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ffc:	08006055 	.word	0x08006055
 8006000:	08006069 	.word	0x08006069
 8006004:	08005fe5 	.word	0x08005fe5
 8006008:	08005fe5 	.word	0x08005fe5
 800600c:	08005fe5 	.word	0x08005fe5
 8006010:	08005fe5 	.word	0x08005fe5
 8006014:	08006069 	.word	0x08006069
 8006018:	08005fe5 	.word	0x08005fe5
 800601c:	08005fe5 	.word	0x08005fe5
 8006020:	08005fe5 	.word	0x08005fe5
 8006024:	08005fe5 	.word	0x08005fe5
 8006028:	08006175 	.word	0x08006175
 800602c:	08006099 	.word	0x08006099
 8006030:	08006157 	.word	0x08006157
 8006034:	08005fe5 	.word	0x08005fe5
 8006038:	08005fe5 	.word	0x08005fe5
 800603c:	08006197 	.word	0x08006197
 8006040:	08005fe5 	.word	0x08005fe5
 8006044:	08006099 	.word	0x08006099
 8006048:	08005fe5 	.word	0x08005fe5
 800604c:	08005fe5 	.word	0x08005fe5
 8006050:	0800615f 	.word	0x0800615f
 8006054:	680b      	ldr	r3, [r1, #0]
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	600a      	str	r2, [r1, #0]
 800605c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006064:	2301      	movs	r3, #1
 8006066:	e0a3      	b.n	80061b0 <_printf_i+0x1f4>
 8006068:	6825      	ldr	r5, [r4, #0]
 800606a:	6808      	ldr	r0, [r1, #0]
 800606c:	062e      	lsls	r6, r5, #24
 800606e:	f100 0304 	add.w	r3, r0, #4
 8006072:	d50a      	bpl.n	800608a <_printf_i+0xce>
 8006074:	6805      	ldr	r5, [r0, #0]
 8006076:	600b      	str	r3, [r1, #0]
 8006078:	2d00      	cmp	r5, #0
 800607a:	da03      	bge.n	8006084 <_printf_i+0xc8>
 800607c:	232d      	movs	r3, #45	; 0x2d
 800607e:	426d      	negs	r5, r5
 8006080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006084:	485e      	ldr	r0, [pc, #376]	; (8006200 <_printf_i+0x244>)
 8006086:	230a      	movs	r3, #10
 8006088:	e019      	b.n	80060be <_printf_i+0x102>
 800608a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800608e:	6805      	ldr	r5, [r0, #0]
 8006090:	600b      	str	r3, [r1, #0]
 8006092:	bf18      	it	ne
 8006094:	b22d      	sxthne	r5, r5
 8006096:	e7ef      	b.n	8006078 <_printf_i+0xbc>
 8006098:	680b      	ldr	r3, [r1, #0]
 800609a:	6825      	ldr	r5, [r4, #0]
 800609c:	1d18      	adds	r0, r3, #4
 800609e:	6008      	str	r0, [r1, #0]
 80060a0:	0628      	lsls	r0, r5, #24
 80060a2:	d501      	bpl.n	80060a8 <_printf_i+0xec>
 80060a4:	681d      	ldr	r5, [r3, #0]
 80060a6:	e002      	b.n	80060ae <_printf_i+0xf2>
 80060a8:	0669      	lsls	r1, r5, #25
 80060aa:	d5fb      	bpl.n	80060a4 <_printf_i+0xe8>
 80060ac:	881d      	ldrh	r5, [r3, #0]
 80060ae:	4854      	ldr	r0, [pc, #336]	; (8006200 <_printf_i+0x244>)
 80060b0:	2f6f      	cmp	r7, #111	; 0x6f
 80060b2:	bf0c      	ite	eq
 80060b4:	2308      	moveq	r3, #8
 80060b6:	230a      	movne	r3, #10
 80060b8:	2100      	movs	r1, #0
 80060ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060be:	6866      	ldr	r6, [r4, #4]
 80060c0:	60a6      	str	r6, [r4, #8]
 80060c2:	2e00      	cmp	r6, #0
 80060c4:	bfa2      	ittt	ge
 80060c6:	6821      	ldrge	r1, [r4, #0]
 80060c8:	f021 0104 	bicge.w	r1, r1, #4
 80060cc:	6021      	strge	r1, [r4, #0]
 80060ce:	b90d      	cbnz	r5, 80060d4 <_printf_i+0x118>
 80060d0:	2e00      	cmp	r6, #0
 80060d2:	d04d      	beq.n	8006170 <_printf_i+0x1b4>
 80060d4:	4616      	mov	r6, r2
 80060d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80060da:	fb03 5711 	mls	r7, r3, r1, r5
 80060de:	5dc7      	ldrb	r7, [r0, r7]
 80060e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060e4:	462f      	mov	r7, r5
 80060e6:	42bb      	cmp	r3, r7
 80060e8:	460d      	mov	r5, r1
 80060ea:	d9f4      	bls.n	80060d6 <_printf_i+0x11a>
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d10b      	bne.n	8006108 <_printf_i+0x14c>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	07df      	lsls	r7, r3, #31
 80060f4:	d508      	bpl.n	8006108 <_printf_i+0x14c>
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	6861      	ldr	r1, [r4, #4]
 80060fa:	4299      	cmp	r1, r3
 80060fc:	bfde      	ittt	le
 80060fe:	2330      	movle	r3, #48	; 0x30
 8006100:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006104:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006108:	1b92      	subs	r2, r2, r6
 800610a:	6122      	str	r2, [r4, #16]
 800610c:	f8cd a000 	str.w	sl, [sp]
 8006110:	464b      	mov	r3, r9
 8006112:	aa03      	add	r2, sp, #12
 8006114:	4621      	mov	r1, r4
 8006116:	4640      	mov	r0, r8
 8006118:	f7ff fee2 	bl	8005ee0 <_printf_common>
 800611c:	3001      	adds	r0, #1
 800611e:	d14c      	bne.n	80061ba <_printf_i+0x1fe>
 8006120:	f04f 30ff 	mov.w	r0, #4294967295
 8006124:	b004      	add	sp, #16
 8006126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612a:	4835      	ldr	r0, [pc, #212]	; (8006200 <_printf_i+0x244>)
 800612c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	680e      	ldr	r6, [r1, #0]
 8006134:	061f      	lsls	r7, r3, #24
 8006136:	f856 5b04 	ldr.w	r5, [r6], #4
 800613a:	600e      	str	r6, [r1, #0]
 800613c:	d514      	bpl.n	8006168 <_printf_i+0x1ac>
 800613e:	07d9      	lsls	r1, r3, #31
 8006140:	bf44      	itt	mi
 8006142:	f043 0320 	orrmi.w	r3, r3, #32
 8006146:	6023      	strmi	r3, [r4, #0]
 8006148:	b91d      	cbnz	r5, 8006152 <_printf_i+0x196>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f023 0320 	bic.w	r3, r3, #32
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	2310      	movs	r3, #16
 8006154:	e7b0      	b.n	80060b8 <_printf_i+0xfc>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f043 0320 	orr.w	r3, r3, #32
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	2378      	movs	r3, #120	; 0x78
 8006160:	4828      	ldr	r0, [pc, #160]	; (8006204 <_printf_i+0x248>)
 8006162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006166:	e7e3      	b.n	8006130 <_printf_i+0x174>
 8006168:	065e      	lsls	r6, r3, #25
 800616a:	bf48      	it	mi
 800616c:	b2ad      	uxthmi	r5, r5
 800616e:	e7e6      	b.n	800613e <_printf_i+0x182>
 8006170:	4616      	mov	r6, r2
 8006172:	e7bb      	b.n	80060ec <_printf_i+0x130>
 8006174:	680b      	ldr	r3, [r1, #0]
 8006176:	6826      	ldr	r6, [r4, #0]
 8006178:	6960      	ldr	r0, [r4, #20]
 800617a:	1d1d      	adds	r5, r3, #4
 800617c:	600d      	str	r5, [r1, #0]
 800617e:	0635      	lsls	r5, r6, #24
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	d501      	bpl.n	8006188 <_printf_i+0x1cc>
 8006184:	6018      	str	r0, [r3, #0]
 8006186:	e002      	b.n	800618e <_printf_i+0x1d2>
 8006188:	0671      	lsls	r1, r6, #25
 800618a:	d5fb      	bpl.n	8006184 <_printf_i+0x1c8>
 800618c:	8018      	strh	r0, [r3, #0]
 800618e:	2300      	movs	r3, #0
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	4616      	mov	r6, r2
 8006194:	e7ba      	b.n	800610c <_printf_i+0x150>
 8006196:	680b      	ldr	r3, [r1, #0]
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	600a      	str	r2, [r1, #0]
 800619c:	681e      	ldr	r6, [r3, #0]
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	2100      	movs	r1, #0
 80061a2:	4630      	mov	r0, r6
 80061a4:	f7fa f83c 	bl	8000220 <memchr>
 80061a8:	b108      	cbz	r0, 80061ae <_printf_i+0x1f2>
 80061aa:	1b80      	subs	r0, r0, r6
 80061ac:	6060      	str	r0, [r4, #4]
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	2300      	movs	r3, #0
 80061b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b8:	e7a8      	b.n	800610c <_printf_i+0x150>
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	4632      	mov	r2, r6
 80061be:	4649      	mov	r1, r9
 80061c0:	4640      	mov	r0, r8
 80061c2:	47d0      	blx	sl
 80061c4:	3001      	adds	r0, #1
 80061c6:	d0ab      	beq.n	8006120 <_printf_i+0x164>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	079b      	lsls	r3, r3, #30
 80061cc:	d413      	bmi.n	80061f6 <_printf_i+0x23a>
 80061ce:	68e0      	ldr	r0, [r4, #12]
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	4298      	cmp	r0, r3
 80061d4:	bfb8      	it	lt
 80061d6:	4618      	movlt	r0, r3
 80061d8:	e7a4      	b.n	8006124 <_printf_i+0x168>
 80061da:	2301      	movs	r3, #1
 80061dc:	4632      	mov	r2, r6
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	47d0      	blx	sl
 80061e4:	3001      	adds	r0, #1
 80061e6:	d09b      	beq.n	8006120 <_printf_i+0x164>
 80061e8:	3501      	adds	r5, #1
 80061ea:	68e3      	ldr	r3, [r4, #12]
 80061ec:	9903      	ldr	r1, [sp, #12]
 80061ee:	1a5b      	subs	r3, r3, r1
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dcf2      	bgt.n	80061da <_printf_i+0x21e>
 80061f4:	e7eb      	b.n	80061ce <_printf_i+0x212>
 80061f6:	2500      	movs	r5, #0
 80061f8:	f104 0619 	add.w	r6, r4, #25
 80061fc:	e7f5      	b.n	80061ea <_printf_i+0x22e>
 80061fe:	bf00      	nop
 8006200:	080068ed 	.word	0x080068ed
 8006204:	080068fe 	.word	0x080068fe

08006208 <_sbrk_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d06      	ldr	r5, [pc, #24]	; (8006224 <_sbrk_r+0x1c>)
 800620c:	2300      	movs	r3, #0
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	f7fa fd4a 	bl	8000cac <_sbrk>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_sbrk_r+0x1a>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_sbrk_r+0x1a>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20006ca4 	.word	0x20006ca4

08006228 <__sread>:
 8006228:	b510      	push	{r4, lr}
 800622a:	460c      	mov	r4, r1
 800622c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006230:	f000 fab4 	bl	800679c <_read_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	bfab      	itete	ge
 8006238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800623a:	89a3      	ldrhlt	r3, [r4, #12]
 800623c:	181b      	addge	r3, r3, r0
 800623e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006242:	bfac      	ite	ge
 8006244:	6563      	strge	r3, [r4, #84]	; 0x54
 8006246:	81a3      	strhlt	r3, [r4, #12]
 8006248:	bd10      	pop	{r4, pc}

0800624a <__swrite>:
 800624a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624e:	461f      	mov	r7, r3
 8006250:	898b      	ldrh	r3, [r1, #12]
 8006252:	05db      	lsls	r3, r3, #23
 8006254:	4605      	mov	r5, r0
 8006256:	460c      	mov	r4, r1
 8006258:	4616      	mov	r6, r2
 800625a:	d505      	bpl.n	8006268 <__swrite+0x1e>
 800625c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006260:	2302      	movs	r3, #2
 8006262:	2200      	movs	r2, #0
 8006264:	f000 f9c8 	bl	80065f8 <_lseek_r>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800626e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	4632      	mov	r2, r6
 8006276:	463b      	mov	r3, r7
 8006278:	4628      	mov	r0, r5
 800627a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800627e:	f000 b869 	b.w	8006354 <_write_r>

08006282 <__sseek>:
 8006282:	b510      	push	{r4, lr}
 8006284:	460c      	mov	r4, r1
 8006286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628a:	f000 f9b5 	bl	80065f8 <_lseek_r>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	bf15      	itete	ne
 8006294:	6560      	strne	r0, [r4, #84]	; 0x54
 8006296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800629a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800629e:	81a3      	strheq	r3, [r4, #12]
 80062a0:	bf18      	it	ne
 80062a2:	81a3      	strhne	r3, [r4, #12]
 80062a4:	bd10      	pop	{r4, pc}

080062a6 <__sclose>:
 80062a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062aa:	f000 b8d3 	b.w	8006454 <_close_r>
	...

080062b0 <__swbuf_r>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	460e      	mov	r6, r1
 80062b4:	4614      	mov	r4, r2
 80062b6:	4605      	mov	r5, r0
 80062b8:	b118      	cbz	r0, 80062c2 <__swbuf_r+0x12>
 80062ba:	6983      	ldr	r3, [r0, #24]
 80062bc:	b90b      	cbnz	r3, 80062c2 <__swbuf_r+0x12>
 80062be:	f7ff fbbb 	bl	8005a38 <__sinit>
 80062c2:	4b21      	ldr	r3, [pc, #132]	; (8006348 <__swbuf_r+0x98>)
 80062c4:	429c      	cmp	r4, r3
 80062c6:	d12b      	bne.n	8006320 <__swbuf_r+0x70>
 80062c8:	686c      	ldr	r4, [r5, #4]
 80062ca:	69a3      	ldr	r3, [r4, #24]
 80062cc:	60a3      	str	r3, [r4, #8]
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	071a      	lsls	r2, r3, #28
 80062d2:	d52f      	bpl.n	8006334 <__swbuf_r+0x84>
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	b36b      	cbz	r3, 8006334 <__swbuf_r+0x84>
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	6820      	ldr	r0, [r4, #0]
 80062dc:	1ac0      	subs	r0, r0, r3
 80062de:	6963      	ldr	r3, [r4, #20]
 80062e0:	b2f6      	uxtb	r6, r6
 80062e2:	4283      	cmp	r3, r0
 80062e4:	4637      	mov	r7, r6
 80062e6:	dc04      	bgt.n	80062f2 <__swbuf_r+0x42>
 80062e8:	4621      	mov	r1, r4
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 f948 	bl	8006580 <_fflush_r>
 80062f0:	bb30      	cbnz	r0, 8006340 <__swbuf_r+0x90>
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	60a3      	str	r3, [r4, #8]
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	701e      	strb	r6, [r3, #0]
 8006300:	6963      	ldr	r3, [r4, #20]
 8006302:	3001      	adds	r0, #1
 8006304:	4283      	cmp	r3, r0
 8006306:	d004      	beq.n	8006312 <__swbuf_r+0x62>
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	07db      	lsls	r3, r3, #31
 800630c:	d506      	bpl.n	800631c <__swbuf_r+0x6c>
 800630e:	2e0a      	cmp	r6, #10
 8006310:	d104      	bne.n	800631c <__swbuf_r+0x6c>
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f000 f933 	bl	8006580 <_fflush_r>
 800631a:	b988      	cbnz	r0, 8006340 <__swbuf_r+0x90>
 800631c:	4638      	mov	r0, r7
 800631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <__swbuf_r+0x9c>)
 8006322:	429c      	cmp	r4, r3
 8006324:	d101      	bne.n	800632a <__swbuf_r+0x7a>
 8006326:	68ac      	ldr	r4, [r5, #8]
 8006328:	e7cf      	b.n	80062ca <__swbuf_r+0x1a>
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <__swbuf_r+0xa0>)
 800632c:	429c      	cmp	r4, r3
 800632e:	bf08      	it	eq
 8006330:	68ec      	ldreq	r4, [r5, #12]
 8006332:	e7ca      	b.n	80062ca <__swbuf_r+0x1a>
 8006334:	4621      	mov	r1, r4
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f81e 	bl	8006378 <__swsetup_r>
 800633c:	2800      	cmp	r0, #0
 800633e:	d0cb      	beq.n	80062d8 <__swbuf_r+0x28>
 8006340:	f04f 37ff 	mov.w	r7, #4294967295
 8006344:	e7ea      	b.n	800631c <__swbuf_r+0x6c>
 8006346:	bf00      	nop
 8006348:	0800689c 	.word	0x0800689c
 800634c:	080068bc 	.word	0x080068bc
 8006350:	0800687c 	.word	0x0800687c

08006354 <_write_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d07      	ldr	r5, [pc, #28]	; (8006374 <_write_r+0x20>)
 8006358:	4604      	mov	r4, r0
 800635a:	4608      	mov	r0, r1
 800635c:	4611      	mov	r1, r2
 800635e:	2200      	movs	r2, #0
 8006360:	602a      	str	r2, [r5, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	f7fa fb0c 	bl	8000980 <_write>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_write_r+0x1e>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_write_r+0x1e>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	20006ca4 	.word	0x20006ca4

08006378 <__swsetup_r>:
 8006378:	4b32      	ldr	r3, [pc, #200]	; (8006444 <__swsetup_r+0xcc>)
 800637a:	b570      	push	{r4, r5, r6, lr}
 800637c:	681d      	ldr	r5, [r3, #0]
 800637e:	4606      	mov	r6, r0
 8006380:	460c      	mov	r4, r1
 8006382:	b125      	cbz	r5, 800638e <__swsetup_r+0x16>
 8006384:	69ab      	ldr	r3, [r5, #24]
 8006386:	b913      	cbnz	r3, 800638e <__swsetup_r+0x16>
 8006388:	4628      	mov	r0, r5
 800638a:	f7ff fb55 	bl	8005a38 <__sinit>
 800638e:	4b2e      	ldr	r3, [pc, #184]	; (8006448 <__swsetup_r+0xd0>)
 8006390:	429c      	cmp	r4, r3
 8006392:	d10f      	bne.n	80063b4 <__swsetup_r+0x3c>
 8006394:	686c      	ldr	r4, [r5, #4]
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800639c:	0719      	lsls	r1, r3, #28
 800639e:	d42c      	bmi.n	80063fa <__swsetup_r+0x82>
 80063a0:	06dd      	lsls	r5, r3, #27
 80063a2:	d411      	bmi.n	80063c8 <__swsetup_r+0x50>
 80063a4:	2309      	movs	r3, #9
 80063a6:	6033      	str	r3, [r6, #0]
 80063a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	f04f 30ff 	mov.w	r0, #4294967295
 80063b2:	e03e      	b.n	8006432 <__swsetup_r+0xba>
 80063b4:	4b25      	ldr	r3, [pc, #148]	; (800644c <__swsetup_r+0xd4>)
 80063b6:	429c      	cmp	r4, r3
 80063b8:	d101      	bne.n	80063be <__swsetup_r+0x46>
 80063ba:	68ac      	ldr	r4, [r5, #8]
 80063bc:	e7eb      	b.n	8006396 <__swsetup_r+0x1e>
 80063be:	4b24      	ldr	r3, [pc, #144]	; (8006450 <__swsetup_r+0xd8>)
 80063c0:	429c      	cmp	r4, r3
 80063c2:	bf08      	it	eq
 80063c4:	68ec      	ldreq	r4, [r5, #12]
 80063c6:	e7e6      	b.n	8006396 <__swsetup_r+0x1e>
 80063c8:	0758      	lsls	r0, r3, #29
 80063ca:	d512      	bpl.n	80063f2 <__swsetup_r+0x7a>
 80063cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ce:	b141      	cbz	r1, 80063e2 <__swsetup_r+0x6a>
 80063d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063d4:	4299      	cmp	r1, r3
 80063d6:	d002      	beq.n	80063de <__swsetup_r+0x66>
 80063d8:	4630      	mov	r0, r6
 80063da:	f000 f98f 	bl	80066fc <_free_r>
 80063de:	2300      	movs	r3, #0
 80063e0:	6363      	str	r3, [r4, #52]	; 0x34
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	2300      	movs	r3, #0
 80063ec:	6063      	str	r3, [r4, #4]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	f043 0308 	orr.w	r3, r3, #8
 80063f8:	81a3      	strh	r3, [r4, #12]
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	b94b      	cbnz	r3, 8006412 <__swsetup_r+0x9a>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006408:	d003      	beq.n	8006412 <__swsetup_r+0x9a>
 800640a:	4621      	mov	r1, r4
 800640c:	4630      	mov	r0, r6
 800640e:	f000 f929 	bl	8006664 <__smakebuf_r>
 8006412:	89a0      	ldrh	r0, [r4, #12]
 8006414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006418:	f010 0301 	ands.w	r3, r0, #1
 800641c:	d00a      	beq.n	8006434 <__swsetup_r+0xbc>
 800641e:	2300      	movs	r3, #0
 8006420:	60a3      	str	r3, [r4, #8]
 8006422:	6963      	ldr	r3, [r4, #20]
 8006424:	425b      	negs	r3, r3
 8006426:	61a3      	str	r3, [r4, #24]
 8006428:	6923      	ldr	r3, [r4, #16]
 800642a:	b943      	cbnz	r3, 800643e <__swsetup_r+0xc6>
 800642c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006430:	d1ba      	bne.n	80063a8 <__swsetup_r+0x30>
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	0781      	lsls	r1, r0, #30
 8006436:	bf58      	it	pl
 8006438:	6963      	ldrpl	r3, [r4, #20]
 800643a:	60a3      	str	r3, [r4, #8]
 800643c:	e7f4      	b.n	8006428 <__swsetup_r+0xb0>
 800643e:	2000      	movs	r0, #0
 8006440:	e7f7      	b.n	8006432 <__swsetup_r+0xba>
 8006442:	bf00      	nop
 8006444:	20000184 	.word	0x20000184
 8006448:	0800689c 	.word	0x0800689c
 800644c:	080068bc 	.word	0x080068bc
 8006450:	0800687c 	.word	0x0800687c

08006454 <_close_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	; (8006470 <_close_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fa fc16 	bl	8000c90 <_close>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_close_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_close_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	20006ca4 	.word	0x20006ca4

08006474 <__sflush_r>:
 8006474:	898a      	ldrh	r2, [r1, #12]
 8006476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647a:	4605      	mov	r5, r0
 800647c:	0710      	lsls	r0, r2, #28
 800647e:	460c      	mov	r4, r1
 8006480:	d458      	bmi.n	8006534 <__sflush_r+0xc0>
 8006482:	684b      	ldr	r3, [r1, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	dc05      	bgt.n	8006494 <__sflush_r+0x20>
 8006488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	dc02      	bgt.n	8006494 <__sflush_r+0x20>
 800648e:	2000      	movs	r0, #0
 8006490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006496:	2e00      	cmp	r6, #0
 8006498:	d0f9      	beq.n	800648e <__sflush_r+0x1a>
 800649a:	2300      	movs	r3, #0
 800649c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064a0:	682f      	ldr	r7, [r5, #0]
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	d032      	beq.n	800650c <__sflush_r+0x98>
 80064a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	075a      	lsls	r2, r3, #29
 80064ac:	d505      	bpl.n	80064ba <__sflush_r+0x46>
 80064ae:	6863      	ldr	r3, [r4, #4]
 80064b0:	1ac0      	subs	r0, r0, r3
 80064b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064b4:	b10b      	cbz	r3, 80064ba <__sflush_r+0x46>
 80064b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064b8:	1ac0      	subs	r0, r0, r3
 80064ba:	2300      	movs	r3, #0
 80064bc:	4602      	mov	r2, r0
 80064be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064c0:	6a21      	ldr	r1, [r4, #32]
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b0      	blx	r6
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	d106      	bne.n	80064da <__sflush_r+0x66>
 80064cc:	6829      	ldr	r1, [r5, #0]
 80064ce:	291d      	cmp	r1, #29
 80064d0:	d82c      	bhi.n	800652c <__sflush_r+0xb8>
 80064d2:	4a2a      	ldr	r2, [pc, #168]	; (800657c <__sflush_r+0x108>)
 80064d4:	40ca      	lsrs	r2, r1
 80064d6:	07d6      	lsls	r6, r2, #31
 80064d8:	d528      	bpl.n	800652c <__sflush_r+0xb8>
 80064da:	2200      	movs	r2, #0
 80064dc:	6062      	str	r2, [r4, #4]
 80064de:	04d9      	lsls	r1, r3, #19
 80064e0:	6922      	ldr	r2, [r4, #16]
 80064e2:	6022      	str	r2, [r4, #0]
 80064e4:	d504      	bpl.n	80064f0 <__sflush_r+0x7c>
 80064e6:	1c42      	adds	r2, r0, #1
 80064e8:	d101      	bne.n	80064ee <__sflush_r+0x7a>
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	b903      	cbnz	r3, 80064f0 <__sflush_r+0x7c>
 80064ee:	6560      	str	r0, [r4, #84]	; 0x54
 80064f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064f2:	602f      	str	r7, [r5, #0]
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d0ca      	beq.n	800648e <__sflush_r+0x1a>
 80064f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064fc:	4299      	cmp	r1, r3
 80064fe:	d002      	beq.n	8006506 <__sflush_r+0x92>
 8006500:	4628      	mov	r0, r5
 8006502:	f000 f8fb 	bl	80066fc <_free_r>
 8006506:	2000      	movs	r0, #0
 8006508:	6360      	str	r0, [r4, #52]	; 0x34
 800650a:	e7c1      	b.n	8006490 <__sflush_r+0x1c>
 800650c:	6a21      	ldr	r1, [r4, #32]
 800650e:	2301      	movs	r3, #1
 8006510:	4628      	mov	r0, r5
 8006512:	47b0      	blx	r6
 8006514:	1c41      	adds	r1, r0, #1
 8006516:	d1c7      	bne.n	80064a8 <__sflush_r+0x34>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0c4      	beq.n	80064a8 <__sflush_r+0x34>
 800651e:	2b1d      	cmp	r3, #29
 8006520:	d001      	beq.n	8006526 <__sflush_r+0xb2>
 8006522:	2b16      	cmp	r3, #22
 8006524:	d101      	bne.n	800652a <__sflush_r+0xb6>
 8006526:	602f      	str	r7, [r5, #0]
 8006528:	e7b1      	b.n	800648e <__sflush_r+0x1a>
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006530:	81a3      	strh	r3, [r4, #12]
 8006532:	e7ad      	b.n	8006490 <__sflush_r+0x1c>
 8006534:	690f      	ldr	r7, [r1, #16]
 8006536:	2f00      	cmp	r7, #0
 8006538:	d0a9      	beq.n	800648e <__sflush_r+0x1a>
 800653a:	0793      	lsls	r3, r2, #30
 800653c:	680e      	ldr	r6, [r1, #0]
 800653e:	bf08      	it	eq
 8006540:	694b      	ldreq	r3, [r1, #20]
 8006542:	600f      	str	r7, [r1, #0]
 8006544:	bf18      	it	ne
 8006546:	2300      	movne	r3, #0
 8006548:	eba6 0807 	sub.w	r8, r6, r7
 800654c:	608b      	str	r3, [r1, #8]
 800654e:	f1b8 0f00 	cmp.w	r8, #0
 8006552:	dd9c      	ble.n	800648e <__sflush_r+0x1a>
 8006554:	6a21      	ldr	r1, [r4, #32]
 8006556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006558:	4643      	mov	r3, r8
 800655a:	463a      	mov	r2, r7
 800655c:	4628      	mov	r0, r5
 800655e:	47b0      	blx	r6
 8006560:	2800      	cmp	r0, #0
 8006562:	dc06      	bgt.n	8006572 <__sflush_r+0xfe>
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	f04f 30ff 	mov.w	r0, #4294967295
 8006570:	e78e      	b.n	8006490 <__sflush_r+0x1c>
 8006572:	4407      	add	r7, r0
 8006574:	eba8 0800 	sub.w	r8, r8, r0
 8006578:	e7e9      	b.n	800654e <__sflush_r+0xda>
 800657a:	bf00      	nop
 800657c:	20400001 	.word	0x20400001

08006580 <_fflush_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	690b      	ldr	r3, [r1, #16]
 8006584:	4605      	mov	r5, r0
 8006586:	460c      	mov	r4, r1
 8006588:	b913      	cbnz	r3, 8006590 <_fflush_r+0x10>
 800658a:	2500      	movs	r5, #0
 800658c:	4628      	mov	r0, r5
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	b118      	cbz	r0, 800659a <_fflush_r+0x1a>
 8006592:	6983      	ldr	r3, [r0, #24]
 8006594:	b90b      	cbnz	r3, 800659a <_fflush_r+0x1a>
 8006596:	f7ff fa4f 	bl	8005a38 <__sinit>
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <_fflush_r+0x6c>)
 800659c:	429c      	cmp	r4, r3
 800659e:	d11b      	bne.n	80065d8 <_fflush_r+0x58>
 80065a0:	686c      	ldr	r4, [r5, #4]
 80065a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0ef      	beq.n	800658a <_fflush_r+0xa>
 80065aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065ac:	07d0      	lsls	r0, r2, #31
 80065ae:	d404      	bmi.n	80065ba <_fflush_r+0x3a>
 80065b0:	0599      	lsls	r1, r3, #22
 80065b2:	d402      	bmi.n	80065ba <_fflush_r+0x3a>
 80065b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b6:	f7ff fadd 	bl	8005b74 <__retarget_lock_acquire_recursive>
 80065ba:	4628      	mov	r0, r5
 80065bc:	4621      	mov	r1, r4
 80065be:	f7ff ff59 	bl	8006474 <__sflush_r>
 80065c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065c4:	07da      	lsls	r2, r3, #31
 80065c6:	4605      	mov	r5, r0
 80065c8:	d4e0      	bmi.n	800658c <_fflush_r+0xc>
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	059b      	lsls	r3, r3, #22
 80065ce:	d4dd      	bmi.n	800658c <_fflush_r+0xc>
 80065d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065d2:	f7ff fad0 	bl	8005b76 <__retarget_lock_release_recursive>
 80065d6:	e7d9      	b.n	800658c <_fflush_r+0xc>
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <_fflush_r+0x70>)
 80065da:	429c      	cmp	r4, r3
 80065dc:	d101      	bne.n	80065e2 <_fflush_r+0x62>
 80065de:	68ac      	ldr	r4, [r5, #8]
 80065e0:	e7df      	b.n	80065a2 <_fflush_r+0x22>
 80065e2:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <_fflush_r+0x74>)
 80065e4:	429c      	cmp	r4, r3
 80065e6:	bf08      	it	eq
 80065e8:	68ec      	ldreq	r4, [r5, #12]
 80065ea:	e7da      	b.n	80065a2 <_fflush_r+0x22>
 80065ec:	0800689c 	.word	0x0800689c
 80065f0:	080068bc 	.word	0x080068bc
 80065f4:	0800687c 	.word	0x0800687c

080065f8 <_lseek_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4d07      	ldr	r5, [pc, #28]	; (8006618 <_lseek_r+0x20>)
 80065fc:	4604      	mov	r4, r0
 80065fe:	4608      	mov	r0, r1
 8006600:	4611      	mov	r1, r2
 8006602:	2200      	movs	r2, #0
 8006604:	602a      	str	r2, [r5, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	f7fa fb4e 	bl	8000ca8 <_lseek>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_lseek_r+0x1e>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	b103      	cbz	r3, 8006616 <_lseek_r+0x1e>
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	20006ca4 	.word	0x20006ca4

0800661c <__swhatbuf_r>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	460e      	mov	r6, r1
 8006620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006624:	2900      	cmp	r1, #0
 8006626:	b096      	sub	sp, #88	; 0x58
 8006628:	4614      	mov	r4, r2
 800662a:	461d      	mov	r5, r3
 800662c:	da07      	bge.n	800663e <__swhatbuf_r+0x22>
 800662e:	2300      	movs	r3, #0
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	89b3      	ldrh	r3, [r6, #12]
 8006634:	061a      	lsls	r2, r3, #24
 8006636:	d410      	bmi.n	800665a <__swhatbuf_r+0x3e>
 8006638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800663c:	e00e      	b.n	800665c <__swhatbuf_r+0x40>
 800663e:	466a      	mov	r2, sp
 8006640:	f000 f8be 	bl	80067c0 <_fstat_r>
 8006644:	2800      	cmp	r0, #0
 8006646:	dbf2      	blt.n	800662e <__swhatbuf_r+0x12>
 8006648:	9a01      	ldr	r2, [sp, #4]
 800664a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800664e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006652:	425a      	negs	r2, r3
 8006654:	415a      	adcs	r2, r3
 8006656:	602a      	str	r2, [r5, #0]
 8006658:	e7ee      	b.n	8006638 <__swhatbuf_r+0x1c>
 800665a:	2340      	movs	r3, #64	; 0x40
 800665c:	2000      	movs	r0, #0
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	b016      	add	sp, #88	; 0x58
 8006662:	bd70      	pop	{r4, r5, r6, pc}

08006664 <__smakebuf_r>:
 8006664:	898b      	ldrh	r3, [r1, #12]
 8006666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006668:	079d      	lsls	r5, r3, #30
 800666a:	4606      	mov	r6, r0
 800666c:	460c      	mov	r4, r1
 800666e:	d507      	bpl.n	8006680 <__smakebuf_r+0x1c>
 8006670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	2301      	movs	r3, #1
 800667a:	6163      	str	r3, [r4, #20]
 800667c:	b002      	add	sp, #8
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	ab01      	add	r3, sp, #4
 8006682:	466a      	mov	r2, sp
 8006684:	f7ff ffca 	bl	800661c <__swhatbuf_r>
 8006688:	9900      	ldr	r1, [sp, #0]
 800668a:	4605      	mov	r5, r0
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff fa73 	bl	8005b78 <_malloc_r>
 8006692:	b948      	cbnz	r0, 80066a8 <__smakebuf_r+0x44>
 8006694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006698:	059a      	lsls	r2, r3, #22
 800669a:	d4ef      	bmi.n	800667c <__smakebuf_r+0x18>
 800669c:	f023 0303 	bic.w	r3, r3, #3
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	e7e3      	b.n	8006670 <__smakebuf_r+0xc>
 80066a8:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <__smakebuf_r+0x7c>)
 80066aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	6020      	str	r0, [r4, #0]
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	6163      	str	r3, [r4, #20]
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	6120      	str	r0, [r4, #16]
 80066be:	b15b      	cbz	r3, 80066d8 <__smakebuf_r+0x74>
 80066c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 f88d 	bl	80067e4 <_isatty_r>
 80066ca:	b128      	cbz	r0, 80066d8 <__smakebuf_r+0x74>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	89a0      	ldrh	r0, [r4, #12]
 80066da:	4305      	orrs	r5, r0
 80066dc:	81a5      	strh	r5, [r4, #12]
 80066de:	e7cd      	b.n	800667c <__smakebuf_r+0x18>
 80066e0:	080059d1 	.word	0x080059d1

080066e4 <__malloc_lock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	; (80066ec <__malloc_lock+0x8>)
 80066e6:	f7ff ba45 	b.w	8005b74 <__retarget_lock_acquire_recursive>
 80066ea:	bf00      	nop
 80066ec:	20006c9c 	.word	0x20006c9c

080066f0 <__malloc_unlock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	; (80066f8 <__malloc_unlock+0x8>)
 80066f2:	f7ff ba40 	b.w	8005b76 <__retarget_lock_release_recursive>
 80066f6:	bf00      	nop
 80066f8:	20006c9c 	.word	0x20006c9c

080066fc <_free_r>:
 80066fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066fe:	2900      	cmp	r1, #0
 8006700:	d048      	beq.n	8006794 <_free_r+0x98>
 8006702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006706:	9001      	str	r0, [sp, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f1a1 0404 	sub.w	r4, r1, #4
 800670e:	bfb8      	it	lt
 8006710:	18e4      	addlt	r4, r4, r3
 8006712:	f7ff ffe7 	bl	80066e4 <__malloc_lock>
 8006716:	4a20      	ldr	r2, [pc, #128]	; (8006798 <_free_r+0x9c>)
 8006718:	9801      	ldr	r0, [sp, #4]
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	4615      	mov	r5, r2
 800671e:	b933      	cbnz	r3, 800672e <_free_r+0x32>
 8006720:	6063      	str	r3, [r4, #4]
 8006722:	6014      	str	r4, [r2, #0]
 8006724:	b003      	add	sp, #12
 8006726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800672a:	f7ff bfe1 	b.w	80066f0 <__malloc_unlock>
 800672e:	42a3      	cmp	r3, r4
 8006730:	d90b      	bls.n	800674a <_free_r+0x4e>
 8006732:	6821      	ldr	r1, [r4, #0]
 8006734:	1862      	adds	r2, r4, r1
 8006736:	4293      	cmp	r3, r2
 8006738:	bf04      	itt	eq
 800673a:	681a      	ldreq	r2, [r3, #0]
 800673c:	685b      	ldreq	r3, [r3, #4]
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	bf04      	itt	eq
 8006742:	1852      	addeq	r2, r2, r1
 8006744:	6022      	streq	r2, [r4, #0]
 8006746:	602c      	str	r4, [r5, #0]
 8006748:	e7ec      	b.n	8006724 <_free_r+0x28>
 800674a:	461a      	mov	r2, r3
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b10b      	cbz	r3, 8006754 <_free_r+0x58>
 8006750:	42a3      	cmp	r3, r4
 8006752:	d9fa      	bls.n	800674a <_free_r+0x4e>
 8006754:	6811      	ldr	r1, [r2, #0]
 8006756:	1855      	adds	r5, r2, r1
 8006758:	42a5      	cmp	r5, r4
 800675a:	d10b      	bne.n	8006774 <_free_r+0x78>
 800675c:	6824      	ldr	r4, [r4, #0]
 800675e:	4421      	add	r1, r4
 8006760:	1854      	adds	r4, r2, r1
 8006762:	42a3      	cmp	r3, r4
 8006764:	6011      	str	r1, [r2, #0]
 8006766:	d1dd      	bne.n	8006724 <_free_r+0x28>
 8006768:	681c      	ldr	r4, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	6053      	str	r3, [r2, #4]
 800676e:	4421      	add	r1, r4
 8006770:	6011      	str	r1, [r2, #0]
 8006772:	e7d7      	b.n	8006724 <_free_r+0x28>
 8006774:	d902      	bls.n	800677c <_free_r+0x80>
 8006776:	230c      	movs	r3, #12
 8006778:	6003      	str	r3, [r0, #0]
 800677a:	e7d3      	b.n	8006724 <_free_r+0x28>
 800677c:	6825      	ldr	r5, [r4, #0]
 800677e:	1961      	adds	r1, r4, r5
 8006780:	428b      	cmp	r3, r1
 8006782:	bf04      	itt	eq
 8006784:	6819      	ldreq	r1, [r3, #0]
 8006786:	685b      	ldreq	r3, [r3, #4]
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	bf04      	itt	eq
 800678c:	1949      	addeq	r1, r1, r5
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	6054      	str	r4, [r2, #4]
 8006792:	e7c7      	b.n	8006724 <_free_r+0x28>
 8006794:	b003      	add	sp, #12
 8006796:	bd30      	pop	{r4, r5, pc}
 8006798:	20000430 	.word	0x20000430

0800679c <_read_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4d07      	ldr	r5, [pc, #28]	; (80067bc <_read_r+0x20>)
 80067a0:	4604      	mov	r4, r0
 80067a2:	4608      	mov	r0, r1
 80067a4:	4611      	mov	r1, r2
 80067a6:	2200      	movs	r2, #0
 80067a8:	602a      	str	r2, [r5, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f7fa fa62 	bl	8000c74 <_read>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d102      	bne.n	80067ba <_read_r+0x1e>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b103      	cbz	r3, 80067ba <_read_r+0x1e>
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	bd38      	pop	{r3, r4, r5, pc}
 80067bc:	20006ca4 	.word	0x20006ca4

080067c0 <_fstat_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4d07      	ldr	r5, [pc, #28]	; (80067e0 <_fstat_r+0x20>)
 80067c4:	2300      	movs	r3, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	f7fa fa63 	bl	8000c98 <_fstat>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	d102      	bne.n	80067dc <_fstat_r+0x1c>
 80067d6:	682b      	ldr	r3, [r5, #0]
 80067d8:	b103      	cbz	r3, 80067dc <_fstat_r+0x1c>
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	20006ca4 	.word	0x20006ca4

080067e4 <_isatty_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d06      	ldr	r5, [pc, #24]	; (8006800 <_isatty_r+0x1c>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	602b      	str	r3, [r5, #0]
 80067f0:	f7fa fa58 	bl	8000ca4 <_isatty>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_isatty_r+0x1a>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_isatty_r+0x1a>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	20006ca4 	.word	0x20006ca4

08006804 <_init>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr

08006810 <_fini>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr
